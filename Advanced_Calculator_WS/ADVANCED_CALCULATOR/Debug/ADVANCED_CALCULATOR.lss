
ADVANCED_CALCULATOR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000042b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000256  00800060  000042b4  00004348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000098  008002b6  008002b6  0000459e  2**0
                  ALLOC
  3 .stab         00003630  00000000  00000000  000045a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001403  00000000  00000000  00007bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00008fd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  00009173  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  00009363  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  0000b76f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  0000cae6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000dcc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  0000de80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  0000e173  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000eb41  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 eb       	ldi	r30, 0xB4	; 180
      68:	f2 e4       	ldi	r31, 0x42	; 66
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3b       	cpi	r26, 0xB6	; 182
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a6 eb       	ldi	r26, 0xB6	; 182
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 34       	cpi	r26, 0x4E	; 78
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <main>
      8a:	0c 94 58 21 	jmp	0x42b0	; 0x42b0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 38 20 	jmp	0x4070	; 0x4070 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 ea       	ldi	r26, 0xA1	; 161
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 54 20 	jmp	0x40a8	; 0x40a8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 44 20 	jmp	0x4088	; 0x4088 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 60 20 	jmp	0x40c0	; 0x40c0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 44 20 	jmp	0x4088	; 0x4088 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 60 20 	jmp	0x40c0	; 0x40c0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 38 20 	jmp	0x4070	; 0x4070 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 ea       	ldi	r24, 0xA1	; 161
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 54 20 	jmp	0x40a8	; 0x40a8 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 40 20 	jmp	0x4080	; 0x4080 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	61 ea       	ldi	r22, 0xA1	; 161
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 5c 20 	jmp	0x40b8	; 0x40b8 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 44 20 	jmp	0x4088	; 0x4088 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 60 20 	jmp	0x40c0	; 0x40c0 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 44 20 	jmp	0x4088	; 0x4088 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 60 20 	jmp	0x40c0	; 0x40c0 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 44 20 	jmp	0x4088	; 0x4088 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 60 20 	jmp	0x40c0	; 0x40c0 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 41 20 	jmp	0x4082	; 0x4082 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 5d 20 	jmp	0x40ba	; 0x40ba <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 48 20 	jmp	0x4090	; 0x4090 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 64 20 	jmp	0x40c8	; 0x40c8 <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	e7 55       	subi	r30, 0x57	; 87
     a94:	fe 4f       	sbci	r31, 0xFE	; 254
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <main>:
 * Description:
 * Function to sum matrices
 */
void matrixSum();

int main (void){
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	0f 92       	push	r0
     dfe:	cd b7       	in	r28, 0x3d	; 61
     e00:	de b7       	in	r29, 0x3e	; 62

	Calculator_Mode mode;

	/* LCD Driver Initialization */
	LCD_init();
     e02:	0e 94 df 1a 	call	0x35be	; 0x35be <LCD_init>

	while(1){
		/* Getting the desired mode from user */
		mode = getMode();
     e06:	0e 94 0a 07 	call	0xe14	; 0xe14 <getMode>
     e0a:	89 83       	std	Y+1, r24	; 0x01

		/**LCD_clearScreen();
		LCD_intgerToString(mode);
		_delay_ms(1000);*/

		operateMode(mode);
     e0c:	89 81       	ldd	r24, Y+1	; 0x01
     e0e:	0e 94 37 07 	call	0xe6e	; 0xe6e <operateMode>
     e12:	f9 cf       	rjmp	.-14     	; 0xe06 <main+0xe>

00000e14 <getMode>:
	}
}


Calculator_Mode getMode(void){
     e14:	df 93       	push	r29
     e16:	cf 93       	push	r28
     e18:	0f 92       	push	r0
     e1a:	cd b7       	in	r28, 0x3d	; 61
     e1c:	de b7       	in	r29, 0x3e	; 62
	uint8 desiredMode;

	LCD_clearScreen();
     e1e:	0e 94 07 20 	call	0x400e	; 0x400e <LCD_clearScreen>
	LCD_displayString("Enter Mode !");
     e22:	80 e6       	ldi	r24, 0x60	; 96
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <LCD_displayString>
	LCD_moveCursor(1, 0);
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	60 e0       	ldi	r22, 0x00	; 0
     e2e:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <LCD_moveCursor>
	LCD_displayString("1:NORM  2:CMPLX");
     e32:	8d e6       	ldi	r24, 0x6D	; 109
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <LCD_displayString>
	LCD_moveCursor(2, 0);
     e3a:	82 e0       	ldi	r24, 0x02	; 2
     e3c:	60 e0       	ldi	r22, 0x00	; 0
     e3e:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <LCD_moveCursor>
	LCD_displayString("3:EQNS  4:MTRX");
     e42:	8d e7       	ldi	r24, 0x7D	; 125
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <LCD_displayString>
	LCD_moveCursor(3, 0);
     e4a:	83 e0       	ldi	r24, 0x03	; 3
     e4c:	60 e0       	ldi	r22, 0x00	; 0
     e4e:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <LCD_moveCursor>
	LCD_displayString("5:VECT  6:TABLE");
     e52:	8c e8       	ldi	r24, 0x8C	; 140
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <LCD_displayString>

	desiredMode = Keypad_getNumInReg(1, 6);
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	66 e0       	ldi	r22, 0x06	; 6
     e5e:	0e 94 7b 07 	call	0xef6	; 0xef6 <Keypad_getNumInReg>
     e62:	89 83       	std	Y+1, r24	; 0x01

	return desiredMode;
     e64:	89 81       	ldd	r24, Y+1	; 0x01
}
     e66:	0f 90       	pop	r0
     e68:	cf 91       	pop	r28
     e6a:	df 91       	pop	r29
     e6c:	08 95       	ret

00000e6e <operateMode>:

void operateMode(Calculator_Mode a_mode){
     e6e:	df 93       	push	r29
     e70:	cf 93       	push	r28
     e72:	cd b7       	in	r28, 0x3d	; 61
     e74:	de b7       	in	r29, 0x3e	; 62
     e76:	62 97       	sbiw	r28, 0x12	; 18
     e78:	0f b6       	in	r0, 0x3f	; 63
     e7a:	f8 94       	cli
     e7c:	de bf       	out	0x3e, r29	; 62
     e7e:	0f be       	out	0x3f, r0	; 63
     e80:	cd bf       	out	0x3d, r28	; 61
     e82:	8d 87       	std	Y+13, r24	; 0x0d
	/* Array of 6 pointers to functions to call the required mode */
	void (*ptr_calculatorMode[6])(void) = {normalMode, complexMode, equationMode, matrixMode, vectorMode, tableMode};
     e84:	ce 01       	movw	r24, r28
     e86:	01 96       	adiw	r24, 0x01	; 1
     e88:	9f 87       	std	Y+15, r25	; 0x0f
     e8a:	8e 87       	std	Y+14, r24	; 0x0e
     e8c:	e9 ea       	ldi	r30, 0xA9	; 169
     e8e:	f2 e0       	ldi	r31, 0x02	; 2
     e90:	f9 8b       	std	Y+17, r31	; 0x11
     e92:	e8 8b       	std	Y+16, r30	; 0x10
     e94:	fc e0       	ldi	r31, 0x0C	; 12
     e96:	fa 8b       	std	Y+18, r31	; 0x12
     e98:	e8 89       	ldd	r30, Y+16	; 0x10
     e9a:	f9 89       	ldd	r31, Y+17	; 0x11
     e9c:	00 80       	ld	r0, Z
     e9e:	88 89       	ldd	r24, Y+16	; 0x10
     ea0:	99 89       	ldd	r25, Y+17	; 0x11
     ea2:	01 96       	adiw	r24, 0x01	; 1
     ea4:	99 8b       	std	Y+17, r25	; 0x11
     ea6:	88 8b       	std	Y+16, r24	; 0x10
     ea8:	ee 85       	ldd	r30, Y+14	; 0x0e
     eaa:	ff 85       	ldd	r31, Y+15	; 0x0f
     eac:	00 82       	st	Z, r0
     eae:	8e 85       	ldd	r24, Y+14	; 0x0e
     eb0:	9f 85       	ldd	r25, Y+15	; 0x0f
     eb2:	01 96       	adiw	r24, 0x01	; 1
     eb4:	9f 87       	std	Y+15, r25	; 0x0f
     eb6:	8e 87       	std	Y+14, r24	; 0x0e
     eb8:	9a 89       	ldd	r25, Y+18	; 0x12
     eba:	91 50       	subi	r25, 0x01	; 1
     ebc:	9a 8b       	std	Y+18, r25	; 0x12
     ebe:	ea 89       	ldd	r30, Y+18	; 0x12
     ec0:	ee 23       	and	r30, r30
     ec2:	51 f7       	brne	.-44     	; 0xe98 <operateMode+0x2a>

	ptr_calculatorMode[a_mode-1]();
     ec4:	8d 85       	ldd	r24, Y+13	; 0x0d
     ec6:	88 2f       	mov	r24, r24
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	01 97       	sbiw	r24, 0x01	; 1
     ecc:	9c 01       	movw	r18, r24
     ece:	22 0f       	add	r18, r18
     ed0:	33 1f       	adc	r19, r19
     ed2:	ce 01       	movw	r24, r28
     ed4:	01 96       	adiw	r24, 0x01	; 1
     ed6:	fc 01       	movw	r30, r24
     ed8:	e2 0f       	add	r30, r18
     eda:	f3 1f       	adc	r31, r19
     edc:	01 90       	ld	r0, Z+
     ede:	f0 81       	ld	r31, Z
     ee0:	e0 2d       	mov	r30, r0
     ee2:	09 95       	icall
}
     ee4:	62 96       	adiw	r28, 0x12	; 18
     ee6:	0f b6       	in	r0, 0x3f	; 63
     ee8:	f8 94       	cli
     eea:	de bf       	out	0x3e, r29	; 62
     eec:	0f be       	out	0x3f, r0	; 63
     eee:	cd bf       	out	0x3d, r28	; 61
     ef0:	cf 91       	pop	r28
     ef2:	df 91       	pop	r29
     ef4:	08 95       	ret

00000ef6 <Keypad_getNumInReg>:

uint8 Keypad_getNumInReg(uint8 a_min, uint8 a_max){
     ef6:	df 93       	push	r29
     ef8:	cf 93       	push	r28
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
     efe:	61 97       	sbiw	r28, 0x11	; 17
     f00:	0f b6       	in	r0, 0x3f	; 63
     f02:	f8 94       	cli
     f04:	de bf       	out	0x3e, r29	; 62
     f06:	0f be       	out	0x3f, r0	; 63
     f08:	cd bf       	out	0x3d, r28	; 61
     f0a:	88 8b       	std	Y+16, r24	; 0x10
     f0c:	69 8b       	std	Y+17, r22	; 0x11
	uint8 key;
	do {
		key = KEYPAD_getPressedKey();
     f0e:	0e 94 ca 19 	call	0x3394	; 0x3394 <KEYPAD_getPressedKey>
     f12:	8f 87       	std	Y+15, r24	; 0x0f
     f14:	80 e0       	ldi	r24, 0x00	; 0
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	aa ef       	ldi	r26, 0xFA	; 250
     f1a:	b3 e4       	ldi	r27, 0x43	; 67
     f1c:	8b 87       	std	Y+11, r24	; 0x0b
     f1e:	9c 87       	std	Y+12, r25	; 0x0c
     f20:	ad 87       	std	Y+13, r26	; 0x0d
     f22:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f24:	6b 85       	ldd	r22, Y+11	; 0x0b
     f26:	7c 85       	ldd	r23, Y+12	; 0x0c
     f28:	8d 85       	ldd	r24, Y+13	; 0x0d
     f2a:	9e 85       	ldd	r25, Y+14	; 0x0e
     f2c:	20 e0       	ldi	r18, 0x00	; 0
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	4a e7       	ldi	r20, 0x7A	; 122
     f32:	53 e4       	ldi	r21, 0x43	; 67
     f34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f38:	dc 01       	movw	r26, r24
     f3a:	cb 01       	movw	r24, r22
     f3c:	8f 83       	std	Y+7, r24	; 0x07
     f3e:	98 87       	std	Y+8, r25	; 0x08
     f40:	a9 87       	std	Y+9, r26	; 0x09
     f42:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f44:	6f 81       	ldd	r22, Y+7	; 0x07
     f46:	78 85       	ldd	r23, Y+8	; 0x08
     f48:	89 85       	ldd	r24, Y+9	; 0x09
     f4a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f4c:	20 e0       	ldi	r18, 0x00	; 0
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	40 e8       	ldi	r20, 0x80	; 128
     f52:	5f e3       	ldi	r21, 0x3F	; 63
     f54:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f58:	88 23       	and	r24, r24
     f5a:	2c f4       	brge	.+10     	; 0xf66 <Keypad_getNumInReg+0x70>
		__ticks = 1;
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	9e 83       	std	Y+6, r25	; 0x06
     f62:	8d 83       	std	Y+5, r24	; 0x05
     f64:	3f c0       	rjmp	.+126    	; 0xfe4 <Keypad_getNumInReg+0xee>
	else if (__tmp > 65535)
     f66:	6f 81       	ldd	r22, Y+7	; 0x07
     f68:	78 85       	ldd	r23, Y+8	; 0x08
     f6a:	89 85       	ldd	r24, Y+9	; 0x09
     f6c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f6e:	20 e0       	ldi	r18, 0x00	; 0
     f70:	3f ef       	ldi	r19, 0xFF	; 255
     f72:	4f e7       	ldi	r20, 0x7F	; 127
     f74:	57 e4       	ldi	r21, 0x47	; 71
     f76:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f7a:	18 16       	cp	r1, r24
     f7c:	4c f5       	brge	.+82     	; 0xfd0 <Keypad_getNumInReg+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f7e:	6b 85       	ldd	r22, Y+11	; 0x0b
     f80:	7c 85       	ldd	r23, Y+12	; 0x0c
     f82:	8d 85       	ldd	r24, Y+13	; 0x0d
     f84:	9e 85       	ldd	r25, Y+14	; 0x0e
     f86:	20 e0       	ldi	r18, 0x00	; 0
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	40 e2       	ldi	r20, 0x20	; 32
     f8c:	51 e4       	ldi	r21, 0x41	; 65
     f8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f92:	dc 01       	movw	r26, r24
     f94:	cb 01       	movw	r24, r22
     f96:	bc 01       	movw	r22, r24
     f98:	cd 01       	movw	r24, r26
     f9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f9e:	dc 01       	movw	r26, r24
     fa0:	cb 01       	movw	r24, r22
     fa2:	9e 83       	std	Y+6, r25	; 0x06
     fa4:	8d 83       	std	Y+5, r24	; 0x05
     fa6:	0f c0       	rjmp	.+30     	; 0xfc6 <Keypad_getNumInReg+0xd0>
     fa8:	89 e1       	ldi	r24, 0x19	; 25
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	9c 83       	std	Y+4, r25	; 0x04
     fae:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fb0:	8b 81       	ldd	r24, Y+3	; 0x03
     fb2:	9c 81       	ldd	r25, Y+4	; 0x04
     fb4:	01 97       	sbiw	r24, 0x01	; 1
     fb6:	f1 f7       	brne	.-4      	; 0xfb4 <Keypad_getNumInReg+0xbe>
     fb8:	9c 83       	std	Y+4, r25	; 0x04
     fba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fbc:	8d 81       	ldd	r24, Y+5	; 0x05
     fbe:	9e 81       	ldd	r25, Y+6	; 0x06
     fc0:	01 97       	sbiw	r24, 0x01	; 1
     fc2:	9e 83       	std	Y+6, r25	; 0x06
     fc4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fc6:	8d 81       	ldd	r24, Y+5	; 0x05
     fc8:	9e 81       	ldd	r25, Y+6	; 0x06
     fca:	00 97       	sbiw	r24, 0x00	; 0
     fcc:	69 f7       	brne	.-38     	; 0xfa8 <Keypad_getNumInReg+0xb2>
     fce:	14 c0       	rjmp	.+40     	; 0xff8 <Keypad_getNumInReg+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fd0:	6f 81       	ldd	r22, Y+7	; 0x07
     fd2:	78 85       	ldd	r23, Y+8	; 0x08
     fd4:	89 85       	ldd	r24, Y+9	; 0x09
     fd6:	9a 85       	ldd	r25, Y+10	; 0x0a
     fd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fdc:	dc 01       	movw	r26, r24
     fde:	cb 01       	movw	r24, r22
     fe0:	9e 83       	std	Y+6, r25	; 0x06
     fe2:	8d 83       	std	Y+5, r24	; 0x05
     fe4:	8d 81       	ldd	r24, Y+5	; 0x05
     fe6:	9e 81       	ldd	r25, Y+6	; 0x06
     fe8:	9a 83       	std	Y+2, r25	; 0x02
     fea:	89 83       	std	Y+1, r24	; 0x01
     fec:	89 81       	ldd	r24, Y+1	; 0x01
     fee:	9a 81       	ldd	r25, Y+2	; 0x02
     ff0:	01 97       	sbiw	r24, 0x01	; 1
     ff2:	f1 f7       	brne	.-4      	; 0xff0 <Keypad_getNumInReg+0xfa>
     ff4:	9a 83       	std	Y+2, r25	; 0x02
     ff6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
	}
	while (key > a_max || key < a_min);
     ff8:	9f 85       	ldd	r25, Y+15	; 0x0f
     ffa:	89 89       	ldd	r24, Y+17	; 0x11
     ffc:	89 17       	cp	r24, r25
     ffe:	08 f4       	brcc	.+2      	; 0x1002 <Keypad_getNumInReg+0x10c>
    1000:	86 cf       	rjmp	.-244    	; 0xf0e <Keypad_getNumInReg+0x18>
    1002:	9f 85       	ldd	r25, Y+15	; 0x0f
    1004:	88 89       	ldd	r24, Y+16	; 0x10
    1006:	98 17       	cp	r25, r24
    1008:	08 f4       	brcc	.+2      	; 0x100c <Keypad_getNumInReg+0x116>
    100a:	81 cf       	rjmp	.-254    	; 0xf0e <Keypad_getNumInReg+0x18>

	return key;
    100c:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    100e:	61 96       	adiw	r28, 0x11	; 17
    1010:	0f b6       	in	r0, 0x3f	; 63
    1012:	f8 94       	cli
    1014:	de bf       	out	0x3e, r29	; 62
    1016:	0f be       	out	0x3f, r0	; 63
    1018:	cd bf       	out	0x3d, r28	; 61
    101a:	cf 91       	pop	r28
    101c:	df 91       	pop	r29
    101e:	08 95       	ret

00001020 <normalMode>:

void normalMode(void){
    1020:	0f 93       	push	r16
    1022:	1f 93       	push	r17
    1024:	df 93       	push	r29
    1026:	cf 93       	push	r28
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62
    102c:	cc 58       	subi	r28, 0x8C	; 140
    102e:	d0 40       	sbci	r29, 0x00	; 0
    1030:	0f b6       	in	r0, 0x3f	; 63
    1032:	f8 94       	cli
    1034:	de bf       	out	0x3e, r29	; 62
    1036:	0f be       	out	0x3f, r0	; 63
    1038:	cd bf       	out	0x3d, r28	; 61
	uint8 key, operaterCounter = 0, operandCounter = 0, numCounter = 0;
    103a:	1d 8e       	std	Y+29, r1	; 0x1d
    103c:	1c 8e       	std	Y+28, r1	; 0x1c
    103e:	1b 8e       	std	Y+27, r1	; 0x1b
	Key_Type type;
	char num[10] = {'\0'};
    1040:	8a e0       	ldi	r24, 0x0A	; 10
    1042:	fe 01       	movw	r30, r28
    1044:	7f 96       	adiw	r30, 0x1f	; 31
    1046:	df 01       	movw	r26, r30
    1048:	98 2f       	mov	r25, r24
    104a:	1d 92       	st	X+, r1
    104c:	9a 95       	dec	r25
    104e:	e9 f7       	brne	.-6      	; 0x104a <normalMode+0x2a>
	long double operands[20];
	uint8 operators[20];
	long double totRes = 0;
    1050:	80 e0       	ldi	r24, 0x00	; 0
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	a0 e0       	ldi	r26, 0x00	; 0
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	8e 8b       	std	Y+22, r24	; 0x16
    105a:	9f 8b       	std	Y+23, r25	; 0x17
    105c:	a8 8f       	std	Y+24, r26	; 0x18
    105e:	b9 8f       	std	Y+25, r27	; 0x19
	long double mulDivRes = 1;
    1060:	80 e0       	ldi	r24, 0x00	; 0
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	a0 e8       	ldi	r26, 0x80	; 128
    1066:	bf e3       	ldi	r27, 0x3F	; 63
    1068:	8a 8b       	std	Y+18, r24	; 0x12
    106a:	9b 8b       	std	Y+19, r25	; 0x13
    106c:	ac 8b       	std	Y+20, r26	; 0x14
    106e:	bd 8b       	std	Y+21, r27	; 0x15
	operands[0] = '+';
    1070:	80 e0       	ldi	r24, 0x00	; 0
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	ac e2       	ldi	r26, 0x2C	; 44
    1076:	b2 e4       	ldi	r27, 0x42	; 66
    1078:	89 a7       	std	Y+41, r24	; 0x29
    107a:	9a a7       	std	Y+42, r25	; 0x2a
    107c:	ab a7       	std	Y+43, r26	; 0x2b
    107e:	bc a7       	std	Y+44, r27	; 0x2c
	uint8 prev = '+';
    1080:	8b e2       	ldi	r24, 0x2B	; 43
    1082:	89 8b       	std	Y+17, r24	; 0x11
	uint8 counter = 0;
    1084:	18 8a       	std	Y+16, r1	; 0x10

	LCD_clearScreen();
    1086:	0e 94 07 20 	call	0x400e	; 0x400e <LCD_clearScreen>
	LCD_displayString("   Normal Mode");
    108a:	8c e9       	ldi	r24, 0x9C	; 156
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <LCD_displayString>
	LCD_moveCursor(1,0);
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	60 e0       	ldi	r22, 0x00	; 0
    1096:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <LCD_moveCursor>


	do {
		key = KEYPAD_getPressedKey();
    109a:	0e 94 ca 19 	call	0x3394	; 0x3394 <KEYPAD_getPressedKey>
    109e:	8e 8f       	std	Y+30, r24	; 0x1e
		type = getKeyType(key);
    10a0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10a2:	0e 94 b6 0b 	call	0x176c	; 0x176c <getKeyType>
    10a6:	8a 8f       	std	Y+26, r24	; 0x1a

		if (counter==16){
    10a8:	88 89       	ldd	r24, Y+16	; 0x10
    10aa:	80 31       	cpi	r24, 0x10	; 16
    10ac:	21 f4       	brne	.+8      	; 0x10b6 <normalMode+0x96>
			LCD_moveCursor(2,0);
    10ae:	82 e0       	ldi	r24, 0x02	; 2
    10b0:	60 e0       	ldi	r22, 0x00	; 0
    10b2:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <LCD_moveCursor>
		}
		if (key == ON_KEY){
    10b6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10b8:	8d 30       	cpi	r24, 0x0D	; 13
    10ba:	09 f4       	brne	.+2      	; 0x10be <normalMode+0x9e>
    10bc:	af c1       	rjmp	.+862    	; 0x141c <normalMode+0x3fc>
			return;
		}

		if (type == NUMBER_KEY){
    10be:	8a 8d       	ldd	r24, Y+26	; 0x1a
    10c0:	88 23       	and	r24, r24
    10c2:	a1 f4       	brne	.+40     	; 0x10ec <normalMode+0xcc>
			LCD_displayCharacter(key+48);
    10c4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10c6:	80 5d       	subi	r24, 0xD0	; 208
    10c8:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <LCD_displayCharacter>
			num[numCounter++] = key + 48;
    10cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10ce:	28 2f       	mov	r18, r24
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10d4:	48 2f       	mov	r20, r24
    10d6:	40 5d       	subi	r20, 0xD0	; 208
    10d8:	ce 01       	movw	r24, r28
    10da:	4f 96       	adiw	r24, 0x1f	; 31
    10dc:	fc 01       	movw	r30, r24
    10de:	e2 0f       	add	r30, r18
    10e0:	f3 1f       	adc	r31, r19
    10e2:	40 83       	st	Z, r20
    10e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10e6:	8f 5f       	subi	r24, 0xFF	; 255
    10e8:	8b 8f       	std	Y+27, r24	; 0x1b
    10ea:	6b c0       	rjmp	.+214    	; 0x11c2 <normalMode+0x1a2>
		}

		else {
			num[numCounter] = '\0';
    10ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10ee:	28 2f       	mov	r18, r24
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	ce 01       	movw	r24, r28
    10f4:	4f 96       	adiw	r24, 0x1f	; 31
    10f6:	fc 01       	movw	r30, r24
    10f8:	e2 0f       	add	r30, r18
    10fa:	f3 1f       	adc	r31, r19
    10fc:	10 82       	st	Z, r1
			numCounter = 0;
    10fe:	1b 8e       	std	Y+27, r1	; 0x1b
			operands[operandCounter] = atol(num);
    1100:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1102:	08 2f       	mov	r16, r24
    1104:	10 e0       	ldi	r17, 0x00	; 0
    1106:	ce 01       	movw	r24, r28
    1108:	4f 96       	adiw	r24, 0x1f	; 31
    110a:	0e 94 6f 20 	call	0x40de	; 0x40de <atol>
    110e:	dc 01       	movw	r26, r24
    1110:	cb 01       	movw	r24, r22
    1112:	bc 01       	movw	r22, r24
    1114:	cd 01       	movw	r24, r26
    1116:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    111a:	ab 01       	movw	r20, r22
    111c:	bc 01       	movw	r22, r24
    111e:	98 01       	movw	r18, r16
    1120:	22 0f       	add	r18, r18
    1122:	33 1f       	adc	r19, r19
    1124:	22 0f       	add	r18, r18
    1126:	33 1f       	adc	r19, r19
    1128:	ce 01       	movw	r24, r28
    112a:	01 96       	adiw	r24, 0x01	; 1
    112c:	82 0f       	add	r24, r18
    112e:	93 1f       	adc	r25, r19
    1130:	fc 01       	movw	r30, r24
    1132:	b8 96       	adiw	r30, 0x28	; 40
    1134:	40 83       	st	Z, r20
    1136:	51 83       	std	Z+1, r21	; 0x01
    1138:	62 83       	std	Z+2, r22	; 0x02
    113a:	73 83       	std	Z+3, r23	; 0x03
			if (prev == 45){
    113c:	89 89       	ldd	r24, Y+17	; 0x11
    113e:	8d 32       	cpi	r24, 0x2D	; 45
    1140:	39 f5       	brne	.+78     	; 0x1190 <normalMode+0x170>
				operands[operandCounter] *= -1;
    1142:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1144:	08 2f       	mov	r16, r24
    1146:	10 e0       	ldi	r17, 0x00	; 0
    1148:	8c 8d       	ldd	r24, Y+28	; 0x1c
    114a:	88 2f       	mov	r24, r24
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	9c 01       	movw	r18, r24
    1150:	22 0f       	add	r18, r18
    1152:	33 1f       	adc	r19, r19
    1154:	22 0f       	add	r18, r18
    1156:	33 1f       	adc	r19, r19
    1158:	ce 01       	movw	r24, r28
    115a:	01 96       	adiw	r24, 0x01	; 1
    115c:	82 0f       	add	r24, r18
    115e:	93 1f       	adc	r25, r19
    1160:	fc 01       	movw	r30, r24
    1162:	b8 96       	adiw	r30, 0x28	; 40
    1164:	80 81       	ld	r24, Z
    1166:	91 81       	ldd	r25, Z+1	; 0x01
    1168:	a2 81       	ldd	r26, Z+2	; 0x02
    116a:	b3 81       	ldd	r27, Z+3	; 0x03
    116c:	ac 01       	movw	r20, r24
    116e:	bd 01       	movw	r22, r26
    1170:	70 58       	subi	r23, 0x80	; 128
    1172:	98 01       	movw	r18, r16
    1174:	22 0f       	add	r18, r18
    1176:	33 1f       	adc	r19, r19
    1178:	22 0f       	add	r18, r18
    117a:	33 1f       	adc	r19, r19
    117c:	ce 01       	movw	r24, r28
    117e:	01 96       	adiw	r24, 0x01	; 1
    1180:	82 0f       	add	r24, r18
    1182:	93 1f       	adc	r25, r19
    1184:	fc 01       	movw	r30, r24
    1186:	b8 96       	adiw	r30, 0x28	; 40
    1188:	40 83       	st	Z, r20
    118a:	51 83       	std	Z+1, r21	; 0x01
    118c:	62 83       	std	Z+2, r22	; 0x02
    118e:	73 83       	std	Z+3, r23	; 0x03
			}
			operandCounter++;
    1190:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1192:	8f 5f       	subi	r24, 0xFF	; 255
    1194:	8c 8f       	std	Y+28, r24	; 0x1c
			prev = key;
    1196:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1198:	89 8b       	std	Y+17, r24	; 0x11

			if (key != '='){
    119a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    119c:	8d 33       	cpi	r24, 0x3D	; 61
    119e:	89 f0       	breq	.+34     	; 0x11c2 <normalMode+0x1a2>
				operators [operaterCounter++] = key;
    11a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11a2:	28 2f       	mov	r18, r24
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	ce 01       	movw	r24, r28
    11a8:	87 58       	subi	r24, 0x87	; 135
    11aa:	9f 4f       	sbci	r25, 0xFF	; 255
    11ac:	fc 01       	movw	r30, r24
    11ae:	e2 0f       	add	r30, r18
    11b0:	f3 1f       	adc	r31, r19
    11b2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11b4:	80 83       	st	Z, r24
    11b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11b8:	8f 5f       	subi	r24, 0xFF	; 255
    11ba:	8d 8f       	std	Y+29, r24	; 0x1d
				LCD_displayCharacter(key);
    11bc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11be:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <LCD_displayCharacter>
    11c2:	80 e0       	ldi	r24, 0x00	; 0
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	aa ef       	ldi	r26, 0xFA	; 250
    11c8:	b3 e4       	ldi	r27, 0x43	; 67
    11ca:	8b 87       	std	Y+11, r24	; 0x0b
    11cc:	9c 87       	std	Y+12, r25	; 0x0c
    11ce:	ad 87       	std	Y+13, r26	; 0x0d
    11d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    11d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    11d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    11d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    11da:	20 e0       	ldi	r18, 0x00	; 0
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	4a e7       	ldi	r20, 0x7A	; 122
    11e0:	53 e4       	ldi	r21, 0x43	; 67
    11e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11e6:	dc 01       	movw	r26, r24
    11e8:	cb 01       	movw	r24, r22
    11ea:	8f 83       	std	Y+7, r24	; 0x07
    11ec:	98 87       	std	Y+8, r25	; 0x08
    11ee:	a9 87       	std	Y+9, r26	; 0x09
    11f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11f2:	6f 81       	ldd	r22, Y+7	; 0x07
    11f4:	78 85       	ldd	r23, Y+8	; 0x08
    11f6:	89 85       	ldd	r24, Y+9	; 0x09
    11f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    11fa:	20 e0       	ldi	r18, 0x00	; 0
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	40 e8       	ldi	r20, 0x80	; 128
    1200:	5f e3       	ldi	r21, 0x3F	; 63
    1202:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1206:	88 23       	and	r24, r24
    1208:	2c f4       	brge	.+10     	; 0x1214 <normalMode+0x1f4>
		__ticks = 1;
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	9e 83       	std	Y+6, r25	; 0x06
    1210:	8d 83       	std	Y+5, r24	; 0x05
    1212:	3f c0       	rjmp	.+126    	; 0x1292 <normalMode+0x272>
	else if (__tmp > 65535)
    1214:	6f 81       	ldd	r22, Y+7	; 0x07
    1216:	78 85       	ldd	r23, Y+8	; 0x08
    1218:	89 85       	ldd	r24, Y+9	; 0x09
    121a:	9a 85       	ldd	r25, Y+10	; 0x0a
    121c:	20 e0       	ldi	r18, 0x00	; 0
    121e:	3f ef       	ldi	r19, 0xFF	; 255
    1220:	4f e7       	ldi	r20, 0x7F	; 127
    1222:	57 e4       	ldi	r21, 0x47	; 71
    1224:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1228:	18 16       	cp	r1, r24
    122a:	4c f5       	brge	.+82     	; 0x127e <normalMode+0x25e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    122c:	6b 85       	ldd	r22, Y+11	; 0x0b
    122e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1230:	8d 85       	ldd	r24, Y+13	; 0x0d
    1232:	9e 85       	ldd	r25, Y+14	; 0x0e
    1234:	20 e0       	ldi	r18, 0x00	; 0
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	40 e2       	ldi	r20, 0x20	; 32
    123a:	51 e4       	ldi	r21, 0x41	; 65
    123c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1240:	dc 01       	movw	r26, r24
    1242:	cb 01       	movw	r24, r22
    1244:	bc 01       	movw	r22, r24
    1246:	cd 01       	movw	r24, r26
    1248:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    124c:	dc 01       	movw	r26, r24
    124e:	cb 01       	movw	r24, r22
    1250:	9e 83       	std	Y+6, r25	; 0x06
    1252:	8d 83       	std	Y+5, r24	; 0x05
    1254:	0f c0       	rjmp	.+30     	; 0x1274 <normalMode+0x254>
    1256:	89 e1       	ldi	r24, 0x19	; 25
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	9c 83       	std	Y+4, r25	; 0x04
    125c:	8b 83       	std	Y+3, r24	; 0x03
    125e:	8b 81       	ldd	r24, Y+3	; 0x03
    1260:	9c 81       	ldd	r25, Y+4	; 0x04
    1262:	01 97       	sbiw	r24, 0x01	; 1
    1264:	f1 f7       	brne	.-4      	; 0x1262 <normalMode+0x242>
    1266:	9c 83       	std	Y+4, r25	; 0x04
    1268:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    126a:	8d 81       	ldd	r24, Y+5	; 0x05
    126c:	9e 81       	ldd	r25, Y+6	; 0x06
    126e:	01 97       	sbiw	r24, 0x01	; 1
    1270:	9e 83       	std	Y+6, r25	; 0x06
    1272:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1274:	8d 81       	ldd	r24, Y+5	; 0x05
    1276:	9e 81       	ldd	r25, Y+6	; 0x06
    1278:	00 97       	sbiw	r24, 0x00	; 0
    127a:	69 f7       	brne	.-38     	; 0x1256 <normalMode+0x236>
    127c:	14 c0       	rjmp	.+40     	; 0x12a6 <normalMode+0x286>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    127e:	6f 81       	ldd	r22, Y+7	; 0x07
    1280:	78 85       	ldd	r23, Y+8	; 0x08
    1282:	89 85       	ldd	r24, Y+9	; 0x09
    1284:	9a 85       	ldd	r25, Y+10	; 0x0a
    1286:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    128a:	dc 01       	movw	r26, r24
    128c:	cb 01       	movw	r24, r22
    128e:	9e 83       	std	Y+6, r25	; 0x06
    1290:	8d 83       	std	Y+5, r24	; 0x05
    1292:	8d 81       	ldd	r24, Y+5	; 0x05
    1294:	9e 81       	ldd	r25, Y+6	; 0x06
    1296:	9a 83       	std	Y+2, r25	; 0x02
    1298:	89 83       	std	Y+1, r24	; 0x01
    129a:	89 81       	ldd	r24, Y+1	; 0x01
    129c:	9a 81       	ldd	r25, Y+2	; 0x02
    129e:	01 97       	sbiw	r24, 0x01	; 1
    12a0:	f1 f7       	brne	.-4      	; 0x129e <normalMode+0x27e>
    12a2:	9a 83       	std	Y+2, r25	; 0x02
    12a4:	89 83       	std	Y+1, r24	; 0x01
			}
		}
		_delay_ms(500);
		counter++;
    12a6:	88 89       	ldd	r24, Y+16	; 0x10
    12a8:	8f 5f       	subi	r24, 0xFF	; 255
    12aa:	88 8b       	std	Y+16, r24	; 0x10
	}
	while (key != '=');
    12ac:	8e 8d       	ldd	r24, Y+30	; 0x1e
    12ae:	8d 33       	cpi	r24, 0x3D	; 61
    12b0:	09 f0       	breq	.+2      	; 0x12b4 <normalMode+0x294>
    12b2:	f3 ce       	rjmp	.-538    	; 0x109a <normalMode+0x7a>

	uint8 i = 0;
    12b4:	1f 86       	std	Y+15, r1	; 0x0f
    12b6:	95 c0       	rjmp	.+298    	; 0x13e2 <normalMode+0x3c2>
	while (i <= operaterCounter){
		mulDivRes = operands[i];
    12b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    12ba:	88 2f       	mov	r24, r24
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	9c 01       	movw	r18, r24
    12c0:	22 0f       	add	r18, r18
    12c2:	33 1f       	adc	r19, r19
    12c4:	22 0f       	add	r18, r18
    12c6:	33 1f       	adc	r19, r19
    12c8:	ce 01       	movw	r24, r28
    12ca:	01 96       	adiw	r24, 0x01	; 1
    12cc:	82 0f       	add	r24, r18
    12ce:	93 1f       	adc	r25, r19
    12d0:	fc 01       	movw	r30, r24
    12d2:	b8 96       	adiw	r30, 0x28	; 40
    12d4:	80 81       	ld	r24, Z
    12d6:	91 81       	ldd	r25, Z+1	; 0x01
    12d8:	a2 81       	ldd	r26, Z+2	; 0x02
    12da:	b3 81       	ldd	r27, Z+3	; 0x03
    12dc:	8a 8b       	std	Y+18, r24	; 0x12
    12de:	9b 8b       	std	Y+19, r25	; 0x13
    12e0:	ac 8b       	std	Y+20, r26	; 0x14
    12e2:	bd 8b       	std	Y+21, r27	; 0x15
		LCD_displayCharacter(' ');
    12e4:	80 e2       	ldi	r24, 0x20	; 32
    12e6:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <LCD_displayCharacter>
    12ea:	4e c0       	rjmp	.+156    	; 0x1388 <normalMode+0x368>
		while(operators[i] == '*' || operators [i] == '%'){
			if (operators[i] == '*'){
    12ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    12ee:	28 2f       	mov	r18, r24
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	ce 01       	movw	r24, r28
    12f4:	87 58       	subi	r24, 0x87	; 135
    12f6:	9f 4f       	sbci	r25, 0xFF	; 255
    12f8:	fc 01       	movw	r30, r24
    12fa:	e2 0f       	add	r30, r18
    12fc:	f3 1f       	adc	r31, r19
    12fe:	80 81       	ld	r24, Z
    1300:	8a 32       	cpi	r24, 0x2A	; 42
    1302:	01 f5       	brne	.+64     	; 0x1344 <normalMode+0x324>
				mulDivRes *= operands[i+1];
    1304:	8f 85       	ldd	r24, Y+15	; 0x0f
    1306:	88 2f       	mov	r24, r24
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	01 96       	adiw	r24, 0x01	; 1
    130c:	9c 01       	movw	r18, r24
    130e:	22 0f       	add	r18, r18
    1310:	33 1f       	adc	r19, r19
    1312:	22 0f       	add	r18, r18
    1314:	33 1f       	adc	r19, r19
    1316:	ce 01       	movw	r24, r28
    1318:	01 96       	adiw	r24, 0x01	; 1
    131a:	82 0f       	add	r24, r18
    131c:	93 1f       	adc	r25, r19
    131e:	fc 01       	movw	r30, r24
    1320:	b8 96       	adiw	r30, 0x28	; 40
    1322:	20 81       	ld	r18, Z
    1324:	31 81       	ldd	r19, Z+1	; 0x01
    1326:	42 81       	ldd	r20, Z+2	; 0x02
    1328:	53 81       	ldd	r21, Z+3	; 0x03
    132a:	6a 89       	ldd	r22, Y+18	; 0x12
    132c:	7b 89       	ldd	r23, Y+19	; 0x13
    132e:	8c 89       	ldd	r24, Y+20	; 0x14
    1330:	9d 89       	ldd	r25, Y+21	; 0x15
    1332:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1336:	dc 01       	movw	r26, r24
    1338:	cb 01       	movw	r24, r22
    133a:	8a 8b       	std	Y+18, r24	; 0x12
    133c:	9b 8b       	std	Y+19, r25	; 0x13
    133e:	ac 8b       	std	Y+20, r26	; 0x14
    1340:	bd 8b       	std	Y+21, r27	; 0x15
    1342:	1f c0       	rjmp	.+62     	; 0x1382 <normalMode+0x362>
			}
			else {
				mulDivRes /= operands[i+1];
    1344:	8f 85       	ldd	r24, Y+15	; 0x0f
    1346:	88 2f       	mov	r24, r24
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	01 96       	adiw	r24, 0x01	; 1
    134c:	9c 01       	movw	r18, r24
    134e:	22 0f       	add	r18, r18
    1350:	33 1f       	adc	r19, r19
    1352:	22 0f       	add	r18, r18
    1354:	33 1f       	adc	r19, r19
    1356:	ce 01       	movw	r24, r28
    1358:	01 96       	adiw	r24, 0x01	; 1
    135a:	82 0f       	add	r24, r18
    135c:	93 1f       	adc	r25, r19
    135e:	fc 01       	movw	r30, r24
    1360:	b8 96       	adiw	r30, 0x28	; 40
    1362:	20 81       	ld	r18, Z
    1364:	31 81       	ldd	r19, Z+1	; 0x01
    1366:	42 81       	ldd	r20, Z+2	; 0x02
    1368:	53 81       	ldd	r21, Z+3	; 0x03
    136a:	6a 89       	ldd	r22, Y+18	; 0x12
    136c:	7b 89       	ldd	r23, Y+19	; 0x13
    136e:	8c 89       	ldd	r24, Y+20	; 0x14
    1370:	9d 89       	ldd	r25, Y+21	; 0x15
    1372:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1376:	dc 01       	movw	r26, r24
    1378:	cb 01       	movw	r24, r22
    137a:	8a 8b       	std	Y+18, r24	; 0x12
    137c:	9b 8b       	std	Y+19, r25	; 0x13
    137e:	ac 8b       	std	Y+20, r26	; 0x14
    1380:	bd 8b       	std	Y+21, r27	; 0x15
			}
			i++;
    1382:	8f 85       	ldd	r24, Y+15	; 0x0f
    1384:	8f 5f       	subi	r24, 0xFF	; 255
    1386:	8f 87       	std	Y+15, r24	; 0x0f

	uint8 i = 0;
	while (i <= operaterCounter){
		mulDivRes = operands[i];
		LCD_displayCharacter(' ');
		while(operators[i] == '*' || operators [i] == '%'){
    1388:	8f 85       	ldd	r24, Y+15	; 0x0f
    138a:	28 2f       	mov	r18, r24
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	ce 01       	movw	r24, r28
    1390:	87 58       	subi	r24, 0x87	; 135
    1392:	9f 4f       	sbci	r25, 0xFF	; 255
    1394:	fc 01       	movw	r30, r24
    1396:	e2 0f       	add	r30, r18
    1398:	f3 1f       	adc	r31, r19
    139a:	80 81       	ld	r24, Z
    139c:	8a 32       	cpi	r24, 0x2A	; 42
    139e:	09 f4       	brne	.+2      	; 0x13a2 <normalMode+0x382>
    13a0:	a5 cf       	rjmp	.-182    	; 0x12ec <normalMode+0x2cc>
    13a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    13a4:	28 2f       	mov	r18, r24
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	ce 01       	movw	r24, r28
    13aa:	87 58       	subi	r24, 0x87	; 135
    13ac:	9f 4f       	sbci	r25, 0xFF	; 255
    13ae:	fc 01       	movw	r30, r24
    13b0:	e2 0f       	add	r30, r18
    13b2:	f3 1f       	adc	r31, r19
    13b4:	80 81       	ld	r24, Z
    13b6:	85 32       	cpi	r24, 0x25	; 37
    13b8:	09 f4       	brne	.+2      	; 0x13bc <normalMode+0x39c>
    13ba:	98 cf       	rjmp	.-208    	; 0x12ec <normalMode+0x2cc>
			else {
				mulDivRes /= operands[i+1];
			}
			i++;
		}
		totRes += mulDivRes;
    13bc:	6e 89       	ldd	r22, Y+22	; 0x16
    13be:	7f 89       	ldd	r23, Y+23	; 0x17
    13c0:	88 8d       	ldd	r24, Y+24	; 0x18
    13c2:	99 8d       	ldd	r25, Y+25	; 0x19
    13c4:	2a 89       	ldd	r18, Y+18	; 0x12
    13c6:	3b 89       	ldd	r19, Y+19	; 0x13
    13c8:	4c 89       	ldd	r20, Y+20	; 0x14
    13ca:	5d 89       	ldd	r21, Y+21	; 0x15
    13cc:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    13d0:	dc 01       	movw	r26, r24
    13d2:	cb 01       	movw	r24, r22
    13d4:	8e 8b       	std	Y+22, r24	; 0x16
    13d6:	9f 8b       	std	Y+23, r25	; 0x17
    13d8:	a8 8f       	std	Y+24, r26	; 0x18
    13da:	b9 8f       	std	Y+25, r27	; 0x19
		i++;
    13dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    13de:	8f 5f       	subi	r24, 0xFF	; 255
    13e0:	8f 87       	std	Y+15, r24	; 0x0f
		counter++;
	}
	while (key != '=');

	uint8 i = 0;
	while (i <= operaterCounter){
    13e2:	9f 85       	ldd	r25, Y+15	; 0x0f
    13e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13e6:	89 17       	cp	r24, r25
    13e8:	08 f0       	brcs	.+2      	; 0x13ec <normalMode+0x3cc>
    13ea:	66 cf       	rjmp	.-308    	; 0x12b8 <normalMode+0x298>
		}
		totRes += mulDivRes;
		i++;
	}

	LCD_moveCursor(3,0);
    13ec:	83 e0       	ldi	r24, 0x03	; 3
    13ee:	60 e0       	ldi	r22, 0x00	; 0
    13f0:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <LCD_moveCursor>
	LCD_displayString("=");
    13f4:	8b ea       	ldi	r24, 0xAB	; 171
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <LCD_displayString>
	LCD_intgerToString(totRes);
    13fc:	6e 89       	ldd	r22, Y+22	; 0x16
    13fe:	7f 89       	ldd	r23, Y+23	; 0x17
    1400:	88 8d       	ldd	r24, Y+24	; 0x18
    1402:	99 8d       	ldd	r25, Y+25	; 0x19
    1404:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    1408:	dc 01       	movw	r26, r24
    140a:	cb 01       	movw	r24, r22
    140c:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <LCD_intgerToString>

	do {
		key = KEYPAD_getPressedKey();
    1410:	0e 94 ca 19 	call	0x3394	; 0x3394 <KEYPAD_getPressedKey>
    1414:	8e 8f       	std	Y+30, r24	; 0x1e
	}
	while (key != ON_KEY);
    1416:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1418:	8d 30       	cpi	r24, 0x0D	; 13
    141a:	d1 f7       	brne	.-12     	; 0x1410 <normalMode+0x3f0>
}
    141c:	c4 57       	subi	r28, 0x74	; 116
    141e:	df 4f       	sbci	r29, 0xFF	; 255
    1420:	0f b6       	in	r0, 0x3f	; 63
    1422:	f8 94       	cli
    1424:	de bf       	out	0x3e, r29	; 62
    1426:	0f be       	out	0x3f, r0	; 63
    1428:	cd bf       	out	0x3d, r28	; 61
    142a:	cf 91       	pop	r28
    142c:	df 91       	pop	r29
    142e:	1f 91       	pop	r17
    1430:	0f 91       	pop	r16
    1432:	08 95       	ret

00001434 <complexMode>:


void complexMode(void){
    1434:	df 93       	push	r29
    1436:	cf 93       	push	r28
    1438:	0f 92       	push	r0
    143a:	cd b7       	in	r28, 0x3d	; 61
    143c:	de b7       	in	r29, 0x3e	; 62
	uint8 key;
	LCD_clearScreen();
    143e:	0e 94 07 20 	call	0x400e	; 0x400e <LCD_clearScreen>
	LCD_displayString("   Complex Mode");
    1442:	8d ea       	ldi	r24, 0xAD	; 173
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <LCD_displayString>
	LCD_moveCursor(1,0);
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	60 e0       	ldi	r22, 0x00	; 0
    144e:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <LCD_moveCursor>
	do {
		key = KEYPAD_getPressedKey();
    1452:	0e 94 ca 19 	call	0x3394	; 0x3394 <KEYPAD_getPressedKey>
    1456:	89 83       	std	Y+1, r24	; 0x01
	}
	while (key != ON_KEY);
    1458:	89 81       	ldd	r24, Y+1	; 0x01
    145a:	8d 30       	cpi	r24, 0x0D	; 13
    145c:	d1 f7       	brne	.-12     	; 0x1452 <complexMode+0x1e>

}
    145e:	0f 90       	pop	r0
    1460:	cf 91       	pop	r28
    1462:	df 91       	pop	r29
    1464:	08 95       	ret

00001466 <equationMode>:


void equationMode(void){
    1466:	df 93       	push	r29
    1468:	cf 93       	push	r28
    146a:	00 d0       	rcall	.+0      	; 0x146c <equationMode+0x6>
    146c:	0f 92       	push	r0
    146e:	cd b7       	in	r28, 0x3d	; 61
    1470:	de b7       	in	r29, 0x3e	; 62
	uint8 eqnType;

	LCD_clearScreen();
    1472:	0e 94 07 20 	call	0x400e	; 0x400e <LCD_clearScreen>
	LCD_displayString("  Equation Mode");
    1476:	8d eb       	ldi	r24, 0xBD	; 189
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <LCD_displayString>
	LCD_moveCursor(1,0);
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	60 e0       	ldi	r22, 0x00	; 0
    1482:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <LCD_moveCursor>
	LCD_displayString("1:anX+bnY=cn");
    1486:	8d ec       	ldi	r24, 0xCD	; 205
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <LCD_displayString>
	LCD_moveCursor(2,0);
    148e:	82 e0       	ldi	r24, 0x02	; 2
    1490:	60 e0       	ldi	r22, 0x00	; 0
    1492:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <LCD_moveCursor>
	LCD_displayString("2:aX^2+bX+c=0");
    1496:	8a ed       	ldi	r24, 0xDA	; 218
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <LCD_displayString>
	LCD_moveCursor(3,0);
    149e:	83 e0       	ldi	r24, 0x03	; 3
    14a0:	60 e0       	ldi	r22, 0x00	; 0
    14a2:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <LCD_moveCursor>
	LCD_displayString("3:anX+bnY+cnZ=dn");
    14a6:	88 ee       	ldi	r24, 0xE8	; 232
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <LCD_displayString>

	/* Taking equation mode from user */
	eqnType = Keypad_getNumInReg(1, 3);
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	63 e0       	ldi	r22, 0x03	; 3
    14b2:	0e 94 7b 07 	call	0xef6	; 0xef6 <Keypad_getNumInReg>
    14b6:	89 83       	std	Y+1, r24	; 0x01

	switch(eqnType){
    14b8:	89 81       	ldd	r24, Y+1	; 0x01
    14ba:	28 2f       	mov	r18, r24
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	3b 83       	std	Y+3, r19	; 0x03
    14c0:	2a 83       	std	Y+2, r18	; 0x02
    14c2:	8a 81       	ldd	r24, Y+2	; 0x02
    14c4:	9b 81       	ldd	r25, Y+3	; 0x03
    14c6:	82 30       	cpi	r24, 0x02	; 2
    14c8:	91 05       	cpc	r25, r1
    14ca:	69 f0       	breq	.+26     	; 0x14e6 <equationMode+0x80>
    14cc:	2a 81       	ldd	r18, Y+2	; 0x02
    14ce:	3b 81       	ldd	r19, Y+3	; 0x03
    14d0:	23 30       	cpi	r18, 0x03	; 3
    14d2:	31 05       	cpc	r19, r1
    14d4:	59 f0       	breq	.+22     	; 0x14ec <equationMode+0x86>
    14d6:	8a 81       	ldd	r24, Y+2	; 0x02
    14d8:	9b 81       	ldd	r25, Y+3	; 0x03
    14da:	81 30       	cpi	r24, 0x01	; 1
    14dc:	91 05       	cpc	r25, r1
    14de:	41 f4       	brne	.+16     	; 0x14f0 <equationMode+0x8a>
	case 1:
		twoInTwoEquation();
    14e0:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <twoInTwoEquation>
    14e4:	05 c0       	rjmp	.+10     	; 0x14f0 <equationMode+0x8a>
		break;
	case 2:
		quadrticEquation();
    14e6:	0e 94 c9 0b 	call	0x1792	; 0x1792 <quadrticEquation>
    14ea:	02 c0       	rjmp	.+4      	; 0x14f0 <equationMode+0x8a>
		break;
	case 3:
		threeInThreeEquation();
    14ec:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <threeInThreeEquation>
		break;
	}

}
    14f0:	0f 90       	pop	r0
    14f2:	0f 90       	pop	r0
    14f4:	0f 90       	pop	r0
    14f6:	cf 91       	pop	r28
    14f8:	df 91       	pop	r29
    14fa:	08 95       	ret

000014fc <matrixMode>:


void matrixMode(void){
    14fc:	df 93       	push	r29
    14fe:	cf 93       	push	r28
    1500:	cd b7       	in	r28, 0x3d	; 61
    1502:	de b7       	in	r29, 0x3e	; 62
    1504:	63 97       	sbiw	r28, 0x13	; 19
    1506:	0f b6       	in	r0, 0x3f	; 63
    1508:	f8 94       	cli
    150a:	de bf       	out	0x3e, r29	; 62
    150c:	0f be       	out	0x3f, r0	; 63
    150e:	cd bf       	out	0x3d, r28	; 61
	uint8 key, matrixMode, i, j, k = 0;
    1510:	1f 86       	std	Y+15, r1	; 0x0f

	do {
		LCD_clearScreen();
    1512:	0e 94 07 20 	call	0x400e	; 0x400e <LCD_clearScreen>
		LCD_displayString("  Matrix Mode");
    1516:	89 ef       	ldi	r24, 0xF9	; 249
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <LCD_displayString>
		LCD_moveCursor(1,0);
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	60 e0       	ldi	r22, 0x00	; 0
    1522:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <LCD_moveCursor>
		LCD_displayString("1:Data");
    1526:	87 e0       	ldi	r24, 0x07	; 7
    1528:	91 e0       	ldi	r25, 0x01	; 1
    152a:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <LCD_displayString>
		LCD_moveCursor(1,10);
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	6a e0       	ldi	r22, 0x0A	; 10
    1532:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <LCD_moveCursor>
		LCD_displayString("2:Sum");
    1536:	8e e0       	ldi	r24, 0x0E	; 14
    1538:	91 e0       	ldi	r25, 0x01	; 1
    153a:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <LCD_displayString>
		LCD_moveCursor(2,0);
    153e:	82 e0       	ldi	r24, 0x02	; 2
    1540:	60 e0       	ldi	r22, 0x00	; 0
    1542:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <LCD_moveCursor>
		LCD_displayString("3:Subt");
    1546:	84 e1       	ldi	r24, 0x14	; 20
    1548:	91 e0       	ldi	r25, 0x01	; 1
    154a:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <LCD_displayString>
		LCD_moveCursor(2,10);
    154e:	82 e0       	ldi	r24, 0x02	; 2
    1550:	6a e0       	ldi	r22, 0x0A	; 10
    1552:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <LCD_moveCursor>
		LCD_displayString("4:Mul");
    1556:	8b e1       	ldi	r24, 0x1B	; 27
    1558:	91 e0       	ldi	r25, 0x01	; 1
    155a:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <LCD_displayString>
		LCD_moveCursor(3,0);
    155e:	83 e0       	ldi	r24, 0x03	; 3
    1560:	60 e0       	ldi	r22, 0x00	; 0
    1562:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <LCD_moveCursor>
		LCD_displayString("5:Trns");
    1566:	81 e2       	ldi	r24, 0x21	; 33
    1568:	91 e0       	ldi	r25, 0x01	; 1
    156a:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <LCD_displayString>
		LCD_moveCursor(3,10);
    156e:	83 e0       	ldi	r24, 0x03	; 3
    1570:	6a e0       	ldi	r22, 0x0A	; 10
    1572:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <LCD_moveCursor>
		LCD_displayString("6:Invs");
    1576:	88 e2       	ldi	r24, 0x28	; 40
    1578:	91 e0       	ldi	r25, 0x01	; 1
    157a:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <LCD_displayString>

		key = KEYPAD_getPressedKey();
    157e:	0e 94 ca 19 	call	0x3394	; 0x3394 <KEYPAD_getPressedKey>
    1582:	8b 8b       	std	Y+19, r24	; 0x13

		switch (key){
    1584:	8b 89       	ldd	r24, Y+19	; 0x13
    1586:	88 2f       	mov	r24, r24
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	81 30       	cpi	r24, 0x01	; 1
    158c:	91 05       	cpc	r25, r1
    158e:	11 f4       	brne	.+4      	; 0x1594 <matrixMode+0x98>
		case 1:
			getMatrixData();
    1590:	0e 94 23 14 	call	0x2846	; 0x2846 <getMatrixData>
			break;

		case 6:
			break;
		}
	} while (key != ON_KEY);
    1594:	8b 89       	ldd	r24, Y+19	; 0x13
    1596:	8d 30       	cpi	r24, 0x0D	; 13
    1598:	09 f0       	breq	.+2      	; 0x159c <matrixMode+0xa0>
    159a:	bb cf       	rjmp	.-138    	; 0x1512 <matrixMode+0x16>

	LCD_clearScreen();
    159c:	0e 94 07 20 	call	0x400e	; 0x400e <LCD_clearScreen>
	for (i = 0; i < 3; i++){
    15a0:	19 8a       	std	Y+17, r1	; 0x11
    15a2:	34 c0       	rjmp	.+104    	; 0x160c <matrixMode+0x110>
		LCD_moveCursor(i, 0);
    15a4:	89 89       	ldd	r24, Y+17	; 0x11
    15a6:	60 e0       	ldi	r22, 0x00	; 0
    15a8:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <LCD_moveCursor>
		for (j = 0; j < 3; j++){
    15ac:	18 8a       	std	Y+16, r1	; 0x10
    15ae:	28 c0       	rjmp	.+80     	; 0x1600 <matrixMode+0x104>
			LCD_moveCursor(i, 5*j);
    15b0:	88 89       	ldd	r24, Y+16	; 0x10
    15b2:	28 2f       	mov	r18, r24
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	c9 01       	movw	r24, r18
    15b8:	88 0f       	add	r24, r24
    15ba:	99 1f       	adc	r25, r25
    15bc:	88 0f       	add	r24, r24
    15be:	99 1f       	adc	r25, r25
    15c0:	82 0f       	add	r24, r18
    15c2:	93 1f       	adc	r25, r19
    15c4:	98 2f       	mov	r25, r24
    15c6:	89 89       	ldd	r24, Y+17	; 0x11
    15c8:	69 2f       	mov	r22, r25
    15ca:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <LCD_moveCursor>
			LCD_intgerToString(matA[k]);
    15ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    15d0:	88 2f       	mov	r24, r24
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	88 0f       	add	r24, r24
    15d6:	99 1f       	adc	r25, r25
    15d8:	88 0f       	add	r24, r24
    15da:	99 1f       	adc	r25, r25
    15dc:	fc 01       	movw	r30, r24
    15de:	ea 54       	subi	r30, 0x4A	; 74
    15e0:	fd 4f       	sbci	r31, 0xFD	; 253
    15e2:	80 81       	ld	r24, Z
    15e4:	91 81       	ldd	r25, Z+1	; 0x01
    15e6:	a2 81       	ldd	r26, Z+2	; 0x02
    15e8:	b3 81       	ldd	r27, Z+3	; 0x03
    15ea:	bc 01       	movw	r22, r24
    15ec:	cd 01       	movw	r24, r26
    15ee:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    15f2:	dc 01       	movw	r26, r24
    15f4:	cb 01       	movw	r24, r22
    15f6:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <LCD_intgerToString>
	} while (key != ON_KEY);

	LCD_clearScreen();
	for (i = 0; i < 3; i++){
		LCD_moveCursor(i, 0);
		for (j = 0; j < 3; j++){
    15fa:	88 89       	ldd	r24, Y+16	; 0x10
    15fc:	8f 5f       	subi	r24, 0xFF	; 255
    15fe:	88 8b       	std	Y+16, r24	; 0x10
    1600:	88 89       	ldd	r24, Y+16	; 0x10
    1602:	83 30       	cpi	r24, 0x03	; 3
    1604:	a8 f2       	brcs	.-86     	; 0x15b0 <matrixMode+0xb4>
			break;
		}
	} while (key != ON_KEY);

	LCD_clearScreen();
	for (i = 0; i < 3; i++){
    1606:	89 89       	ldd	r24, Y+17	; 0x11
    1608:	8f 5f       	subi	r24, 0xFF	; 255
    160a:	89 8b       	std	Y+17, r24	; 0x11
    160c:	89 89       	ldd	r24, Y+17	; 0x11
    160e:	83 30       	cpi	r24, 0x03	; 3
    1610:	48 f2       	brcs	.-110    	; 0x15a4 <matrixMode+0xa8>
    1612:	80 e0       	ldi	r24, 0x00	; 0
    1614:	90 e4       	ldi	r25, 0x40	; 64
    1616:	ac e9       	ldi	r26, 0x9C	; 156
    1618:	b5 e4       	ldi	r27, 0x45	; 69
    161a:	8b 87       	std	Y+11, r24	; 0x0b
    161c:	9c 87       	std	Y+12, r25	; 0x0c
    161e:	ad 87       	std	Y+13, r26	; 0x0d
    1620:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1622:	6b 85       	ldd	r22, Y+11	; 0x0b
    1624:	7c 85       	ldd	r23, Y+12	; 0x0c
    1626:	8d 85       	ldd	r24, Y+13	; 0x0d
    1628:	9e 85       	ldd	r25, Y+14	; 0x0e
    162a:	20 e0       	ldi	r18, 0x00	; 0
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	4a e7       	ldi	r20, 0x7A	; 122
    1630:	53 e4       	ldi	r21, 0x43	; 67
    1632:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1636:	dc 01       	movw	r26, r24
    1638:	cb 01       	movw	r24, r22
    163a:	8f 83       	std	Y+7, r24	; 0x07
    163c:	98 87       	std	Y+8, r25	; 0x08
    163e:	a9 87       	std	Y+9, r26	; 0x09
    1640:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1642:	6f 81       	ldd	r22, Y+7	; 0x07
    1644:	78 85       	ldd	r23, Y+8	; 0x08
    1646:	89 85       	ldd	r24, Y+9	; 0x09
    1648:	9a 85       	ldd	r25, Y+10	; 0x0a
    164a:	20 e0       	ldi	r18, 0x00	; 0
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	40 e8       	ldi	r20, 0x80	; 128
    1650:	5f e3       	ldi	r21, 0x3F	; 63
    1652:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1656:	88 23       	and	r24, r24
    1658:	2c f4       	brge	.+10     	; 0x1664 <matrixMode+0x168>
		__ticks = 1;
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	9e 83       	std	Y+6, r25	; 0x06
    1660:	8d 83       	std	Y+5, r24	; 0x05
    1662:	3f c0       	rjmp	.+126    	; 0x16e2 <matrixMode+0x1e6>
	else if (__tmp > 65535)
    1664:	6f 81       	ldd	r22, Y+7	; 0x07
    1666:	78 85       	ldd	r23, Y+8	; 0x08
    1668:	89 85       	ldd	r24, Y+9	; 0x09
    166a:	9a 85       	ldd	r25, Y+10	; 0x0a
    166c:	20 e0       	ldi	r18, 0x00	; 0
    166e:	3f ef       	ldi	r19, 0xFF	; 255
    1670:	4f e7       	ldi	r20, 0x7F	; 127
    1672:	57 e4       	ldi	r21, 0x47	; 71
    1674:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1678:	18 16       	cp	r1, r24
    167a:	4c f5       	brge	.+82     	; 0x16ce <matrixMode+0x1d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    167c:	6b 85       	ldd	r22, Y+11	; 0x0b
    167e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1680:	8d 85       	ldd	r24, Y+13	; 0x0d
    1682:	9e 85       	ldd	r25, Y+14	; 0x0e
    1684:	20 e0       	ldi	r18, 0x00	; 0
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	40 e2       	ldi	r20, 0x20	; 32
    168a:	51 e4       	ldi	r21, 0x41	; 65
    168c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1690:	dc 01       	movw	r26, r24
    1692:	cb 01       	movw	r24, r22
    1694:	bc 01       	movw	r22, r24
    1696:	cd 01       	movw	r24, r26
    1698:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    169c:	dc 01       	movw	r26, r24
    169e:	cb 01       	movw	r24, r22
    16a0:	9e 83       	std	Y+6, r25	; 0x06
    16a2:	8d 83       	std	Y+5, r24	; 0x05
    16a4:	0f c0       	rjmp	.+30     	; 0x16c4 <matrixMode+0x1c8>
    16a6:	89 e1       	ldi	r24, 0x19	; 25
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	9c 83       	std	Y+4, r25	; 0x04
    16ac:	8b 83       	std	Y+3, r24	; 0x03
    16ae:	8b 81       	ldd	r24, Y+3	; 0x03
    16b0:	9c 81       	ldd	r25, Y+4	; 0x04
    16b2:	01 97       	sbiw	r24, 0x01	; 1
    16b4:	f1 f7       	brne	.-4      	; 0x16b2 <matrixMode+0x1b6>
    16b6:	9c 83       	std	Y+4, r25	; 0x04
    16b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16ba:	8d 81       	ldd	r24, Y+5	; 0x05
    16bc:	9e 81       	ldd	r25, Y+6	; 0x06
    16be:	01 97       	sbiw	r24, 0x01	; 1
    16c0:	9e 83       	std	Y+6, r25	; 0x06
    16c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16c4:	8d 81       	ldd	r24, Y+5	; 0x05
    16c6:	9e 81       	ldd	r25, Y+6	; 0x06
    16c8:	00 97       	sbiw	r24, 0x00	; 0
    16ca:	69 f7       	brne	.-38     	; 0x16a6 <matrixMode+0x1aa>
    16cc:	14 c0       	rjmp	.+40     	; 0x16f6 <matrixMode+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16ce:	6f 81       	ldd	r22, Y+7	; 0x07
    16d0:	78 85       	ldd	r23, Y+8	; 0x08
    16d2:	89 85       	ldd	r24, Y+9	; 0x09
    16d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16da:	dc 01       	movw	r26, r24
    16dc:	cb 01       	movw	r24, r22
    16de:	9e 83       	std	Y+6, r25	; 0x06
    16e0:	8d 83       	std	Y+5, r24	; 0x05
    16e2:	8d 81       	ldd	r24, Y+5	; 0x05
    16e4:	9e 81       	ldd	r25, Y+6	; 0x06
    16e6:	9a 83       	std	Y+2, r25	; 0x02
    16e8:	89 83       	std	Y+1, r24	; 0x01
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
    16ec:	9a 81       	ldd	r25, Y+2	; 0x02
    16ee:	01 97       	sbiw	r24, 0x01	; 1
    16f0:	f1 f7       	brne	.-4      	; 0x16ee <matrixMode+0x1f2>
    16f2:	9a 83       	std	Y+2, r25	; 0x02
    16f4:	89 83       	std	Y+1, r24	; 0x01
			LCD_intgerToString(matA[k]);
		}
	}
	_delay_ms(5000);

}
    16f6:	63 96       	adiw	r28, 0x13	; 19
    16f8:	0f b6       	in	r0, 0x3f	; 63
    16fa:	f8 94       	cli
    16fc:	de bf       	out	0x3e, r29	; 62
    16fe:	0f be       	out	0x3f, r0	; 63
    1700:	cd bf       	out	0x3d, r28	; 61
    1702:	cf 91       	pop	r28
    1704:	df 91       	pop	r29
    1706:	08 95       	ret

00001708 <vectorMode>:



void vectorMode(void){
    1708:	df 93       	push	r29
    170a:	cf 93       	push	r28
    170c:	0f 92       	push	r0
    170e:	cd b7       	in	r28, 0x3d	; 61
    1710:	de b7       	in	r29, 0x3e	; 62
	uint8 key;

	LCD_clearScreen();
    1712:	0e 94 07 20 	call	0x400e	; 0x400e <LCD_clearScreen>
	LCD_displayString("   Vector Mode");
    1716:	8f e2       	ldi	r24, 0x2F	; 47
    1718:	91 e0       	ldi	r25, 0x01	; 1
    171a:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <LCD_displayString>
	LCD_moveCursor(1,0);
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	60 e0       	ldi	r22, 0x00	; 0
    1722:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <LCD_moveCursor>

	do {
		key = KEYPAD_getPressedKey();
    1726:	0e 94 ca 19 	call	0x3394	; 0x3394 <KEYPAD_getPressedKey>
    172a:	89 83       	std	Y+1, r24	; 0x01
	}
	while (key != ON_KEY);
    172c:	89 81       	ldd	r24, Y+1	; 0x01
    172e:	8d 30       	cpi	r24, 0x0D	; 13
    1730:	d1 f7       	brne	.-12     	; 0x1726 <vectorMode+0x1e>
}
    1732:	0f 90       	pop	r0
    1734:	cf 91       	pop	r28
    1736:	df 91       	pop	r29
    1738:	08 95       	ret

0000173a <tableMode>:


void tableMode(void){
    173a:	df 93       	push	r29
    173c:	cf 93       	push	r28
    173e:	0f 92       	push	r0
    1740:	cd b7       	in	r28, 0x3d	; 61
    1742:	de b7       	in	r29, 0x3e	; 62
	uint8 key;

	LCD_clearScreen();
    1744:	0e 94 07 20 	call	0x400e	; 0x400e <LCD_clearScreen>
	LCD_displayString("   Table Mode");
    1748:	8e e3       	ldi	r24, 0x3E	; 62
    174a:	91 e0       	ldi	r25, 0x01	; 1
    174c:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <LCD_displayString>
	LCD_moveCursor(1,0);
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	60 e0       	ldi	r22, 0x00	; 0
    1754:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <LCD_moveCursor>

	do {
		key = KEYPAD_getPressedKey();
    1758:	0e 94 ca 19 	call	0x3394	; 0x3394 <KEYPAD_getPressedKey>
    175c:	89 83       	std	Y+1, r24	; 0x01
	}
	while (key != ON_KEY);
    175e:	89 81       	ldd	r24, Y+1	; 0x01
    1760:	8d 30       	cpi	r24, 0x0D	; 13
    1762:	d1 f7       	brne	.-12     	; 0x1758 <tableMode+0x1e>
}
    1764:	0f 90       	pop	r0
    1766:	cf 91       	pop	r28
    1768:	df 91       	pop	r29
    176a:	08 95       	ret

0000176c <getKeyType>:

Key_Type getKeyType(uint8 a_key){
    176c:	df 93       	push	r29
    176e:	cf 93       	push	r28
    1770:	00 d0       	rcall	.+0      	; 0x1772 <getKeyType+0x6>
    1772:	cd b7       	in	r28, 0x3d	; 61
    1774:	de b7       	in	r29, 0x3e	; 62
    1776:	89 83       	std	Y+1, r24	; 0x01

	if (a_key <= 9){
    1778:	89 81       	ldd	r24, Y+1	; 0x01
    177a:	8a 30       	cpi	r24, 0x0A	; 10
    177c:	10 f4       	brcc	.+4      	; 0x1782 <getKeyType+0x16>
		return NUMBER_KEY;
    177e:	1a 82       	std	Y+2, r1	; 0x02
    1780:	02 c0       	rjmp	.+4      	; 0x1786 <getKeyType+0x1a>
	}
	else {
		return OPERATION_KEY;
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	8a 83       	std	Y+2, r24	; 0x02
    1786:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    1788:	0f 90       	pop	r0
    178a:	0f 90       	pop	r0
    178c:	cf 91       	pop	r28
    178e:	df 91       	pop	r29
    1790:	08 95       	ret

00001792 <quadrticEquation>:

void quadrticEquation(void){
    1792:	ef 92       	push	r14
    1794:	ff 92       	push	r15
    1796:	0f 93       	push	r16
    1798:	1f 93       	push	r17
    179a:	df 93       	push	r29
    179c:	cf 93       	push	r28
    179e:	cd b7       	in	r28, 0x3d	; 61
    17a0:	de b7       	in	r29, 0x3e	; 62
    17a2:	ef 97       	sbiw	r28, 0x3f	; 63
    17a4:	0f b6       	in	r0, 0x3f	; 63
    17a6:	f8 94       	cli
    17a8:	de bf       	out	0x3e, r29	; 62
    17aa:	0f be       	out	0x3f, r0	; 63
    17ac:	cd bf       	out	0x3d, r28	; 61
	long double a, b, c, x1, x2, sqrtPart, realPart, imgPart;
	uint8 i, key, numCounter = 0, sign ='+';
    17ae:	19 8a       	std	Y+17, r1	; 0x11
    17b0:	8b e2       	ldi	r24, 0x2B	; 43
    17b2:	88 8b       	std	Y+16, r24	; 0x10
	Key_Type type;

	char num[10] = {'\0'};
    17b4:	8a e0       	ldi	r24, 0x0A	; 10
    17b6:	fe 01       	movw	r30, r28
    17b8:	f4 96       	adiw	r30, 0x34	; 52
    17ba:	df 01       	movw	r26, r30
    17bc:	28 2f       	mov	r18, r24
    17be:	1d 92       	st	X+, r1
    17c0:	2a 95       	dec	r18
    17c2:	e9 f7       	brne	.-6      	; 0x17be <quadrticEquation+0x2c>

	LCD_clearScreen ();
    17c4:	0e 94 07 20 	call	0x400e	; 0x400e <LCD_clearScreen>
	for (i = 0; i < 3; i++){
    17c8:	1b 8a       	std	Y+19, r1	; 0x13
    17ca:	3a c1       	rjmp	.+628    	; 0x1a40 <quadrticEquation+0x2ae>
		LCD_moveCursor(i,0);
    17cc:	8b 89       	ldd	r24, Y+19	; 0x13
    17ce:	60 e0       	ldi	r22, 0x00	; 0
    17d0:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <LCD_moveCursor>
		LCD_displayCharacter('a' + i);
    17d4:	8b 89       	ldd	r24, Y+19	; 0x13
    17d6:	8f 59       	subi	r24, 0x9F	; 159
    17d8:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <LCD_displayCharacter>
		LCD_displayCharacter(':');
    17dc:	8a e3       	ldi	r24, 0x3A	; 58
    17de:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <LCD_displayCharacter>
		sign = '+';
    17e2:	8b e2       	ldi	r24, 0x2B	; 43
    17e4:	88 8b       	std	Y+16, r24	; 0x10
		do {
			key = KEYPAD_getPressedKey();
    17e6:	0e 94 ca 19 	call	0x3394	; 0x3394 <KEYPAD_getPressedKey>
    17ea:	8a 8b       	std	Y+18, r24	; 0x12
			type = getKeyType(key);
    17ec:	8a 89       	ldd	r24, Y+18	; 0x12
    17ee:	0e 94 b6 0b 	call	0x176c	; 0x176c <getKeyType>
    17f2:	8f 87       	std	Y+15, r24	; 0x0f

			if (key == ON_KEY){
    17f4:	8a 89       	ldd	r24, Y+18	; 0x12
    17f6:	8d 30       	cpi	r24, 0x0D	; 13
    17f8:	09 f4       	brne	.+2      	; 0x17fc <quadrticEquation+0x6a>
    17fa:	65 c2       	rjmp	.+1226   	; 0x1cc6 <quadrticEquation+0x534>
				return;
			}

			if (type == NUMBER_KEY){
    17fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    17fe:	88 23       	and	r24, r24
    1800:	a1 f4       	brne	.+40     	; 0x182a <quadrticEquation+0x98>
				LCD_displayCharacter(key+48);
    1802:	8a 89       	ldd	r24, Y+18	; 0x12
    1804:	80 5d       	subi	r24, 0xD0	; 208
    1806:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <LCD_displayCharacter>
				num[numCounter++] = key + 48;
    180a:	89 89       	ldd	r24, Y+17	; 0x11
    180c:	28 2f       	mov	r18, r24
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	8a 89       	ldd	r24, Y+18	; 0x12
    1812:	48 2f       	mov	r20, r24
    1814:	40 5d       	subi	r20, 0xD0	; 208
    1816:	ce 01       	movw	r24, r28
    1818:	c4 96       	adiw	r24, 0x34	; 52
    181a:	fc 01       	movw	r30, r24
    181c:	e2 0f       	add	r30, r18
    181e:	f3 1f       	adc	r31, r19
    1820:	40 83       	st	Z, r20
    1822:	89 89       	ldd	r24, Y+17	; 0x11
    1824:	8f 5f       	subi	r24, 0xFF	; 255
    1826:	89 8b       	std	Y+17, r24	; 0x11
    1828:	08 c0       	rjmp	.+16     	; 0x183a <quadrticEquation+0xa8>
			}
			else {
				if (key != '='){
    182a:	8a 89       	ldd	r24, Y+18	; 0x12
    182c:	8d 33       	cpi	r24, 0x3D	; 61
    182e:	29 f0       	breq	.+10     	; 0x183a <quadrticEquation+0xa8>
					LCD_displayCharacter(key);
    1830:	8a 89       	ldd	r24, Y+18	; 0x12
    1832:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <LCD_displayCharacter>
					sign = key;
    1836:	8a 89       	ldd	r24, Y+18	; 0x12
    1838:	88 8b       	std	Y+16, r24	; 0x10
    183a:	80 e0       	ldi	r24, 0x00	; 0
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	aa ef       	ldi	r26, 0xFA	; 250
    1840:	b3 e4       	ldi	r27, 0x43	; 67
    1842:	8b 87       	std	Y+11, r24	; 0x0b
    1844:	9c 87       	std	Y+12, r25	; 0x0c
    1846:	ad 87       	std	Y+13, r26	; 0x0d
    1848:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    184a:	6b 85       	ldd	r22, Y+11	; 0x0b
    184c:	7c 85       	ldd	r23, Y+12	; 0x0c
    184e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1850:	9e 85       	ldd	r25, Y+14	; 0x0e
    1852:	20 e0       	ldi	r18, 0x00	; 0
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	4a e7       	ldi	r20, 0x7A	; 122
    1858:	53 e4       	ldi	r21, 0x43	; 67
    185a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    185e:	dc 01       	movw	r26, r24
    1860:	cb 01       	movw	r24, r22
    1862:	8f 83       	std	Y+7, r24	; 0x07
    1864:	98 87       	std	Y+8, r25	; 0x08
    1866:	a9 87       	std	Y+9, r26	; 0x09
    1868:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    186a:	6f 81       	ldd	r22, Y+7	; 0x07
    186c:	78 85       	ldd	r23, Y+8	; 0x08
    186e:	89 85       	ldd	r24, Y+9	; 0x09
    1870:	9a 85       	ldd	r25, Y+10	; 0x0a
    1872:	20 e0       	ldi	r18, 0x00	; 0
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	40 e8       	ldi	r20, 0x80	; 128
    1878:	5f e3       	ldi	r21, 0x3F	; 63
    187a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    187e:	88 23       	and	r24, r24
    1880:	2c f4       	brge	.+10     	; 0x188c <quadrticEquation+0xfa>
		__ticks = 1;
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	9e 83       	std	Y+6, r25	; 0x06
    1888:	8d 83       	std	Y+5, r24	; 0x05
    188a:	3f c0       	rjmp	.+126    	; 0x190a <quadrticEquation+0x178>
	else if (__tmp > 65535)
    188c:	6f 81       	ldd	r22, Y+7	; 0x07
    188e:	78 85       	ldd	r23, Y+8	; 0x08
    1890:	89 85       	ldd	r24, Y+9	; 0x09
    1892:	9a 85       	ldd	r25, Y+10	; 0x0a
    1894:	20 e0       	ldi	r18, 0x00	; 0
    1896:	3f ef       	ldi	r19, 0xFF	; 255
    1898:	4f e7       	ldi	r20, 0x7F	; 127
    189a:	57 e4       	ldi	r21, 0x47	; 71
    189c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18a0:	18 16       	cp	r1, r24
    18a2:	4c f5       	brge	.+82     	; 0x18f6 <quadrticEquation+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    18a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    18a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    18aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    18ac:	20 e0       	ldi	r18, 0x00	; 0
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	40 e2       	ldi	r20, 0x20	; 32
    18b2:	51 e4       	ldi	r21, 0x41	; 65
    18b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18b8:	dc 01       	movw	r26, r24
    18ba:	cb 01       	movw	r24, r22
    18bc:	bc 01       	movw	r22, r24
    18be:	cd 01       	movw	r24, r26
    18c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18c4:	dc 01       	movw	r26, r24
    18c6:	cb 01       	movw	r24, r22
    18c8:	9e 83       	std	Y+6, r25	; 0x06
    18ca:	8d 83       	std	Y+5, r24	; 0x05
    18cc:	0f c0       	rjmp	.+30     	; 0x18ec <quadrticEquation+0x15a>
    18ce:	89 e1       	ldi	r24, 0x19	; 25
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	9c 83       	std	Y+4, r25	; 0x04
    18d4:	8b 83       	std	Y+3, r24	; 0x03
    18d6:	8b 81       	ldd	r24, Y+3	; 0x03
    18d8:	9c 81       	ldd	r25, Y+4	; 0x04
    18da:	01 97       	sbiw	r24, 0x01	; 1
    18dc:	f1 f7       	brne	.-4      	; 0x18da <quadrticEquation+0x148>
    18de:	9c 83       	std	Y+4, r25	; 0x04
    18e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18e2:	8d 81       	ldd	r24, Y+5	; 0x05
    18e4:	9e 81       	ldd	r25, Y+6	; 0x06
    18e6:	01 97       	sbiw	r24, 0x01	; 1
    18e8:	9e 83       	std	Y+6, r25	; 0x06
    18ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ec:	8d 81       	ldd	r24, Y+5	; 0x05
    18ee:	9e 81       	ldd	r25, Y+6	; 0x06
    18f0:	00 97       	sbiw	r24, 0x00	; 0
    18f2:	69 f7       	brne	.-38     	; 0x18ce <quadrticEquation+0x13c>
    18f4:	14 c0       	rjmp	.+40     	; 0x191e <quadrticEquation+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18f6:	6f 81       	ldd	r22, Y+7	; 0x07
    18f8:	78 85       	ldd	r23, Y+8	; 0x08
    18fa:	89 85       	ldd	r24, Y+9	; 0x09
    18fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    18fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1902:	dc 01       	movw	r26, r24
    1904:	cb 01       	movw	r24, r22
    1906:	9e 83       	std	Y+6, r25	; 0x06
    1908:	8d 83       	std	Y+5, r24	; 0x05
    190a:	8d 81       	ldd	r24, Y+5	; 0x05
    190c:	9e 81       	ldd	r25, Y+6	; 0x06
    190e:	9a 83       	std	Y+2, r25	; 0x02
    1910:	89 83       	std	Y+1, r24	; 0x01
    1912:	89 81       	ldd	r24, Y+1	; 0x01
    1914:	9a 81       	ldd	r25, Y+2	; 0x02
    1916:	01 97       	sbiw	r24, 0x01	; 1
    1918:	f1 f7       	brne	.-4      	; 0x1916 <quadrticEquation+0x184>
    191a:	9a 83       	std	Y+2, r25	; 0x02
    191c:	89 83       	std	Y+1, r24	; 0x01
				}
			}
			_delay_ms(500);
		}
		while (key != '=');
    191e:	8a 89       	ldd	r24, Y+18	; 0x12
    1920:	8d 33       	cpi	r24, 0x3D	; 61
    1922:	09 f0       	breq	.+2      	; 0x1926 <quadrticEquation+0x194>
    1924:	60 cf       	rjmp	.-320    	; 0x17e6 <quadrticEquation+0x54>

		switch (i){
    1926:	8b 89       	ldd	r24, Y+19	; 0x13
    1928:	a8 2f       	mov	r26, r24
    192a:	b0 e0       	ldi	r27, 0x00	; 0
    192c:	bf af       	std	Y+63, r27	; 0x3f
    192e:	ae af       	std	Y+62, r26	; 0x3e
    1930:	2e ad       	ldd	r18, Y+62	; 0x3e
    1932:	3f ad       	ldd	r19, Y+63	; 0x3f
    1934:	21 30       	cpi	r18, 0x01	; 1
    1936:	31 05       	cpc	r19, r1
    1938:	99 f1       	breq	.+102    	; 0x19a0 <quadrticEquation+0x20e>
    193a:	8e ad       	ldd	r24, Y+62	; 0x3e
    193c:	9f ad       	ldd	r25, Y+63	; 0x3f
    193e:	82 30       	cpi	r24, 0x02	; 2
    1940:	91 05       	cpc	r25, r1
    1942:	09 f4       	brne	.+2      	; 0x1946 <quadrticEquation+0x1b4>
    1944:	54 c0       	rjmp	.+168    	; 0x19ee <quadrticEquation+0x25c>
    1946:	ae ad       	ldd	r26, Y+62	; 0x3e
    1948:	bf ad       	ldd	r27, Y+63	; 0x3f
    194a:	10 97       	sbiw	r26, 0x00	; 0
    194c:	09 f0       	breq	.+2      	; 0x1950 <quadrticEquation+0x1be>
    194e:	75 c0       	rjmp	.+234    	; 0x1a3a <quadrticEquation+0x2a8>
		case 0:
			num[numCounter] = '\0';
    1950:	89 89       	ldd	r24, Y+17	; 0x11
    1952:	28 2f       	mov	r18, r24
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	ce 01       	movw	r24, r28
    1958:	c4 96       	adiw	r24, 0x34	; 52
    195a:	fc 01       	movw	r30, r24
    195c:	e2 0f       	add	r30, r18
    195e:	f3 1f       	adc	r31, r19
    1960:	10 82       	st	Z, r1
			numCounter = 0;
    1962:	19 8a       	std	Y+17, r1	; 0x11
			a = atol(num);
    1964:	ce 01       	movw	r24, r28
    1966:	c4 96       	adiw	r24, 0x34	; 52
    1968:	0e 94 6f 20 	call	0x40de	; 0x40de <atol>
    196c:	dc 01       	movw	r26, r24
    196e:	cb 01       	movw	r24, r22
    1970:	bc 01       	movw	r22, r24
    1972:	cd 01       	movw	r24, r26
    1974:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    1978:	dc 01       	movw	r26, r24
    197a:	cb 01       	movw	r24, r22
    197c:	88 ab       	std	Y+48, r24	; 0x30
    197e:	99 ab       	std	Y+49, r25	; 0x31
    1980:	aa ab       	std	Y+50, r26	; 0x32
    1982:	bb ab       	std	Y+51, r27	; 0x33
			if (sign == 45){
    1984:	88 89       	ldd	r24, Y+16	; 0x10
    1986:	8d 32       	cpi	r24, 0x2D	; 45
    1988:	09 f0       	breq	.+2      	; 0x198c <quadrticEquation+0x1fa>
    198a:	57 c0       	rjmp	.+174    	; 0x1a3a <quadrticEquation+0x2a8>
				a *= -1;
    198c:	88 a9       	ldd	r24, Y+48	; 0x30
    198e:	99 a9       	ldd	r25, Y+49	; 0x31
    1990:	aa a9       	ldd	r26, Y+50	; 0x32
    1992:	bb a9       	ldd	r27, Y+51	; 0x33
    1994:	b0 58       	subi	r27, 0x80	; 128
    1996:	88 ab       	std	Y+48, r24	; 0x30
    1998:	99 ab       	std	Y+49, r25	; 0x31
    199a:	aa ab       	std	Y+50, r26	; 0x32
    199c:	bb ab       	std	Y+51, r27	; 0x33
    199e:	4d c0       	rjmp	.+154    	; 0x1a3a <quadrticEquation+0x2a8>
			}

			break;
		case 1:
			num[numCounter] = '\0';
    19a0:	89 89       	ldd	r24, Y+17	; 0x11
    19a2:	28 2f       	mov	r18, r24
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	ce 01       	movw	r24, r28
    19a8:	c4 96       	adiw	r24, 0x34	; 52
    19aa:	fc 01       	movw	r30, r24
    19ac:	e2 0f       	add	r30, r18
    19ae:	f3 1f       	adc	r31, r19
    19b0:	10 82       	st	Z, r1
			numCounter = 0;
    19b2:	19 8a       	std	Y+17, r1	; 0x11
			b = atol(num);
    19b4:	ce 01       	movw	r24, r28
    19b6:	c4 96       	adiw	r24, 0x34	; 52
    19b8:	0e 94 6f 20 	call	0x40de	; 0x40de <atol>
    19bc:	dc 01       	movw	r26, r24
    19be:	cb 01       	movw	r24, r22
    19c0:	bc 01       	movw	r22, r24
    19c2:	cd 01       	movw	r24, r26
    19c4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    19c8:	dc 01       	movw	r26, r24
    19ca:	cb 01       	movw	r24, r22
    19cc:	8c a7       	std	Y+44, r24	; 0x2c
    19ce:	9d a7       	std	Y+45, r25	; 0x2d
    19d0:	ae a7       	std	Y+46, r26	; 0x2e
    19d2:	bf a7       	std	Y+47, r27	; 0x2f
			if (sign == 45){
    19d4:	88 89       	ldd	r24, Y+16	; 0x10
    19d6:	8d 32       	cpi	r24, 0x2D	; 45
    19d8:	81 f5       	brne	.+96     	; 0x1a3a <quadrticEquation+0x2a8>
				b *= -1;
    19da:	8c a5       	ldd	r24, Y+44	; 0x2c
    19dc:	9d a5       	ldd	r25, Y+45	; 0x2d
    19de:	ae a5       	ldd	r26, Y+46	; 0x2e
    19e0:	bf a5       	ldd	r27, Y+47	; 0x2f
    19e2:	b0 58       	subi	r27, 0x80	; 128
    19e4:	8c a7       	std	Y+44, r24	; 0x2c
    19e6:	9d a7       	std	Y+45, r25	; 0x2d
    19e8:	ae a7       	std	Y+46, r26	; 0x2e
    19ea:	bf a7       	std	Y+47, r27	; 0x2f
    19ec:	26 c0       	rjmp	.+76     	; 0x1a3a <quadrticEquation+0x2a8>
			}

			break;
		case 2:
			num[numCounter] = '\0';
    19ee:	89 89       	ldd	r24, Y+17	; 0x11
    19f0:	28 2f       	mov	r18, r24
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	ce 01       	movw	r24, r28
    19f6:	c4 96       	adiw	r24, 0x34	; 52
    19f8:	fc 01       	movw	r30, r24
    19fa:	e2 0f       	add	r30, r18
    19fc:	f3 1f       	adc	r31, r19
    19fe:	10 82       	st	Z, r1
			numCounter = 0;
    1a00:	19 8a       	std	Y+17, r1	; 0x11
			c = atol(num);
    1a02:	ce 01       	movw	r24, r28
    1a04:	c4 96       	adiw	r24, 0x34	; 52
    1a06:	0e 94 6f 20 	call	0x40de	; 0x40de <atol>
    1a0a:	dc 01       	movw	r26, r24
    1a0c:	cb 01       	movw	r24, r22
    1a0e:	bc 01       	movw	r22, r24
    1a10:	cd 01       	movw	r24, r26
    1a12:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    1a16:	dc 01       	movw	r26, r24
    1a18:	cb 01       	movw	r24, r22
    1a1a:	88 a7       	std	Y+40, r24	; 0x28
    1a1c:	99 a7       	std	Y+41, r25	; 0x29
    1a1e:	aa a7       	std	Y+42, r26	; 0x2a
    1a20:	bb a7       	std	Y+43, r27	; 0x2b
			if (sign == 45){
    1a22:	88 89       	ldd	r24, Y+16	; 0x10
    1a24:	8d 32       	cpi	r24, 0x2D	; 45
    1a26:	49 f4       	brne	.+18     	; 0x1a3a <quadrticEquation+0x2a8>
				c *= -1;
    1a28:	88 a5       	ldd	r24, Y+40	; 0x28
    1a2a:	99 a5       	ldd	r25, Y+41	; 0x29
    1a2c:	aa a5       	ldd	r26, Y+42	; 0x2a
    1a2e:	bb a5       	ldd	r27, Y+43	; 0x2b
    1a30:	b0 58       	subi	r27, 0x80	; 128
    1a32:	88 a7       	std	Y+40, r24	; 0x28
    1a34:	99 a7       	std	Y+41, r25	; 0x29
    1a36:	aa a7       	std	Y+42, r26	; 0x2a
    1a38:	bb a7       	std	Y+43, r27	; 0x2b
	Key_Type type;

	char num[10] = {'\0'};

	LCD_clearScreen ();
	for (i = 0; i < 3; i++){
    1a3a:	8b 89       	ldd	r24, Y+19	; 0x13
    1a3c:	8f 5f       	subi	r24, 0xFF	; 255
    1a3e:	8b 8b       	std	Y+19, r24	; 0x13
    1a40:	8b 89       	ldd	r24, Y+19	; 0x13
    1a42:	83 30       	cpi	r24, 0x03	; 3
    1a44:	08 f4       	brcc	.+2      	; 0x1a48 <quadrticEquation+0x2b6>
    1a46:	c2 ce       	rjmp	.-636    	; 0x17cc <quadrticEquation+0x3a>
			break;
		}

	}

	sqrtPart = (b*b) - 4 * a * c;
    1a48:	6c a5       	ldd	r22, Y+44	; 0x2c
    1a4a:	7d a5       	ldd	r23, Y+45	; 0x2d
    1a4c:	8e a5       	ldd	r24, Y+46	; 0x2e
    1a4e:	9f a5       	ldd	r25, Y+47	; 0x2f
    1a50:	2c a5       	ldd	r18, Y+44	; 0x2c
    1a52:	3d a5       	ldd	r19, Y+45	; 0x2d
    1a54:	4e a5       	ldd	r20, Y+46	; 0x2e
    1a56:	5f a5       	ldd	r21, Y+47	; 0x2f
    1a58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a5c:	dc 01       	movw	r26, r24
    1a5e:	cb 01       	movw	r24, r22
    1a60:	7c 01       	movw	r14, r24
    1a62:	8d 01       	movw	r16, r26
    1a64:	68 a9       	ldd	r22, Y+48	; 0x30
    1a66:	79 a9       	ldd	r23, Y+49	; 0x31
    1a68:	8a a9       	ldd	r24, Y+50	; 0x32
    1a6a:	9b a9       	ldd	r25, Y+51	; 0x33
    1a6c:	20 e0       	ldi	r18, 0x00	; 0
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	40 e8       	ldi	r20, 0x80	; 128
    1a72:	50 ec       	ldi	r21, 0xC0	; 192
    1a74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a78:	dc 01       	movw	r26, r24
    1a7a:	cb 01       	movw	r24, r22
    1a7c:	bc 01       	movw	r22, r24
    1a7e:	cd 01       	movw	r24, r26
    1a80:	28 a5       	ldd	r18, Y+40	; 0x28
    1a82:	39 a5       	ldd	r19, Y+41	; 0x29
    1a84:	4a a5       	ldd	r20, Y+42	; 0x2a
    1a86:	5b a5       	ldd	r21, Y+43	; 0x2b
    1a88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a8c:	dc 01       	movw	r26, r24
    1a8e:	cb 01       	movw	r24, r22
    1a90:	9c 01       	movw	r18, r24
    1a92:	ad 01       	movw	r20, r26
    1a94:	c8 01       	movw	r24, r16
    1a96:	b7 01       	movw	r22, r14
    1a98:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	cb 01       	movw	r24, r22
    1aa0:	8c 8f       	std	Y+28, r24	; 0x1c
    1aa2:	9d 8f       	std	Y+29, r25	; 0x1d
    1aa4:	ae 8f       	std	Y+30, r26	; 0x1e
    1aa6:	bf 8f       	std	Y+31, r27	; 0x1f
	LCD_clearScreen();
    1aa8:	0e 94 07 20 	call	0x400e	; 0x400e <LCD_clearScreen>
	if (sqrtPart >= 0){
    1aac:	6c 8d       	ldd	r22, Y+28	; 0x1c
    1aae:	7d 8d       	ldd	r23, Y+29	; 0x1d
    1ab0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ab2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1ab4:	20 e0       	ldi	r18, 0x00	; 0
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	40 e0       	ldi	r20, 0x00	; 0
    1aba:	50 e0       	ldi	r21, 0x00	; 0
    1abc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
    1ac0:	88 23       	and	r24, r24
    1ac2:	0c f4       	brge	.+2      	; 0x1ac6 <quadrticEquation+0x334>
    1ac4:	7f c0       	rjmp	.+254    	; 0x1bc4 <quadrticEquation+0x432>
		x1 = (-1 * b + sqrt(sqrtPart))/(2 * a);
    1ac6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1ac8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1aca:	ae 8d       	ldd	r26, Y+30	; 0x1e
    1acc:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1ace:	bc 01       	movw	r22, r24
    1ad0:	cd 01       	movw	r24, r26
    1ad2:	0e 94 d0 20 	call	0x41a0	; 0x41a0 <sqrt>
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	cb 01       	movw	r24, r22
    1ada:	bc 01       	movw	r22, r24
    1adc:	cd 01       	movw	r24, r26
    1ade:	2c a5       	ldd	r18, Y+44	; 0x2c
    1ae0:	3d a5       	ldd	r19, Y+45	; 0x2d
    1ae2:	4e a5       	ldd	r20, Y+46	; 0x2e
    1ae4:	5f a5       	ldd	r21, Y+47	; 0x2f
    1ae6:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1aea:	dc 01       	movw	r26, r24
    1aec:	cb 01       	movw	r24, r22
    1aee:	7c 01       	movw	r14, r24
    1af0:	8d 01       	movw	r16, r26
    1af2:	28 a9       	ldd	r18, Y+48	; 0x30
    1af4:	39 a9       	ldd	r19, Y+49	; 0x31
    1af6:	4a a9       	ldd	r20, Y+50	; 0x32
    1af8:	5b a9       	ldd	r21, Y+51	; 0x33
    1afa:	ca 01       	movw	r24, r20
    1afc:	b9 01       	movw	r22, r18
    1afe:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1b02:	dc 01       	movw	r26, r24
    1b04:	cb 01       	movw	r24, r22
    1b06:	9c 01       	movw	r18, r24
    1b08:	ad 01       	movw	r20, r26
    1b0a:	c8 01       	movw	r24, r16
    1b0c:	b7 01       	movw	r22, r14
    1b0e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b12:	dc 01       	movw	r26, r24
    1b14:	cb 01       	movw	r24, r22
    1b16:	8c a3       	std	Y+36, r24	; 0x24
    1b18:	9d a3       	std	Y+37, r25	; 0x25
    1b1a:	ae a3       	std	Y+38, r26	; 0x26
    1b1c:	bf a3       	std	Y+39, r27	; 0x27
		x2 = (-1 * b - sqrt(sqrtPart))/(2 * a);
    1b1e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b20:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b22:	ae a5       	ldd	r26, Y+46	; 0x2e
    1b24:	bf a5       	ldd	r27, Y+47	; 0x2f
    1b26:	7c 01       	movw	r14, r24
    1b28:	8d 01       	movw	r16, r26
    1b2a:	17 fb       	bst	r17, 7
    1b2c:	10 95       	com	r17
    1b2e:	17 f9       	bld	r17, 7
    1b30:	10 95       	com	r17
    1b32:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b34:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1b36:	ae 8d       	ldd	r26, Y+30	; 0x1e
    1b38:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1b3a:	bc 01       	movw	r22, r24
    1b3c:	cd 01       	movw	r24, r26
    1b3e:	0e 94 d0 20 	call	0x41a0	; 0x41a0 <sqrt>
    1b42:	9b 01       	movw	r18, r22
    1b44:	ac 01       	movw	r20, r24
    1b46:	c8 01       	movw	r24, r16
    1b48:	b7 01       	movw	r22, r14
    1b4a:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1b4e:	dc 01       	movw	r26, r24
    1b50:	cb 01       	movw	r24, r22
    1b52:	7c 01       	movw	r14, r24
    1b54:	8d 01       	movw	r16, r26
    1b56:	28 a9       	ldd	r18, Y+48	; 0x30
    1b58:	39 a9       	ldd	r19, Y+49	; 0x31
    1b5a:	4a a9       	ldd	r20, Y+50	; 0x32
    1b5c:	5b a9       	ldd	r21, Y+51	; 0x33
    1b5e:	ca 01       	movw	r24, r20
    1b60:	b9 01       	movw	r22, r18
    1b62:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1b66:	dc 01       	movw	r26, r24
    1b68:	cb 01       	movw	r24, r22
    1b6a:	9c 01       	movw	r18, r24
    1b6c:	ad 01       	movw	r20, r26
    1b6e:	c8 01       	movw	r24, r16
    1b70:	b7 01       	movw	r22, r14
    1b72:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b76:	dc 01       	movw	r26, r24
    1b78:	cb 01       	movw	r24, r22
    1b7a:	88 a3       	std	Y+32, r24	; 0x20
    1b7c:	99 a3       	std	Y+33, r25	; 0x21
    1b7e:	aa a3       	std	Y+34, r26	; 0x22
    1b80:	bb a3       	std	Y+35, r27	; 0x23

		LCD_displayString("X1=");
    1b82:	8c e4       	ldi	r24, 0x4C	; 76
    1b84:	91 e0       	ldi	r25, 0x01	; 1
    1b86:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <LCD_displayString>
		LCD_intgerToString(x1);
    1b8a:	6c a1       	ldd	r22, Y+36	; 0x24
    1b8c:	7d a1       	ldd	r23, Y+37	; 0x25
    1b8e:	8e a1       	ldd	r24, Y+38	; 0x26
    1b90:	9f a1       	ldd	r25, Y+39	; 0x27
    1b92:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    1b96:	dc 01       	movw	r26, r24
    1b98:	cb 01       	movw	r24, r22
    1b9a:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <LCD_intgerToString>
		LCD_moveCursor(1, 0);
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
    1ba0:	60 e0       	ldi	r22, 0x00	; 0
    1ba2:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <LCD_moveCursor>
		LCD_displayString("X2=");
    1ba6:	80 e5       	ldi	r24, 0x50	; 80
    1ba8:	91 e0       	ldi	r25, 0x01	; 1
    1baa:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <LCD_displayString>
		LCD_intgerToString(x2);
    1bae:	68 a1       	ldd	r22, Y+32	; 0x20
    1bb0:	79 a1       	ldd	r23, Y+33	; 0x21
    1bb2:	8a a1       	ldd	r24, Y+34	; 0x22
    1bb4:	9b a1       	ldd	r25, Y+35	; 0x23
    1bb6:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    1bba:	dc 01       	movw	r26, r24
    1bbc:	cb 01       	movw	r24, r22
    1bbe:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <LCD_intgerToString>
    1bc2:	7b c0       	rjmp	.+246    	; 0x1cba <quadrticEquation+0x528>
	}
	else {
		realPart = (-1 * b) / (2 * a);
    1bc4:	68 a9       	ldd	r22, Y+48	; 0x30
    1bc6:	79 a9       	ldd	r23, Y+49	; 0x31
    1bc8:	8a a9       	ldd	r24, Y+50	; 0x32
    1bca:	9b a9       	ldd	r25, Y+51	; 0x33
    1bcc:	20 e0       	ldi	r18, 0x00	; 0
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	40 e0       	ldi	r20, 0x00	; 0
    1bd2:	50 ec       	ldi	r21, 0xC0	; 192
    1bd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd8:	dc 01       	movw	r26, r24
    1bda:	cb 01       	movw	r24, r22
    1bdc:	9c 01       	movw	r18, r24
    1bde:	ad 01       	movw	r20, r26
    1be0:	6c a5       	ldd	r22, Y+44	; 0x2c
    1be2:	7d a5       	ldd	r23, Y+45	; 0x2d
    1be4:	8e a5       	ldd	r24, Y+46	; 0x2e
    1be6:	9f a5       	ldd	r25, Y+47	; 0x2f
    1be8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1bec:	dc 01       	movw	r26, r24
    1bee:	cb 01       	movw	r24, r22
    1bf0:	88 8f       	std	Y+24, r24	; 0x18
    1bf2:	99 8f       	std	Y+25, r25	; 0x19
    1bf4:	aa 8f       	std	Y+26, r26	; 0x1a
    1bf6:	bb 8f       	std	Y+27, r27	; 0x1b
		imgPart = (sqrt(-1 * sqrtPart)) / (2 * a);
    1bf8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1bfa:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1bfc:	ae 8d       	ldd	r26, Y+30	; 0x1e
    1bfe:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1c00:	b0 58       	subi	r27, 0x80	; 128
    1c02:	bc 01       	movw	r22, r24
    1c04:	cd 01       	movw	r24, r26
    1c06:	0e 94 d0 20 	call	0x41a0	; 0x41a0 <sqrt>
    1c0a:	7b 01       	movw	r14, r22
    1c0c:	8c 01       	movw	r16, r24
    1c0e:	28 a9       	ldd	r18, Y+48	; 0x30
    1c10:	39 a9       	ldd	r19, Y+49	; 0x31
    1c12:	4a a9       	ldd	r20, Y+50	; 0x32
    1c14:	5b a9       	ldd	r21, Y+51	; 0x33
    1c16:	ca 01       	movw	r24, r20
    1c18:	b9 01       	movw	r22, r18
    1c1a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1c1e:	dc 01       	movw	r26, r24
    1c20:	cb 01       	movw	r24, r22
    1c22:	9c 01       	movw	r18, r24
    1c24:	ad 01       	movw	r20, r26
    1c26:	c8 01       	movw	r24, r16
    1c28:	b7 01       	movw	r22, r14
    1c2a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1c2e:	dc 01       	movw	r26, r24
    1c30:	cb 01       	movw	r24, r22
    1c32:	8c 8b       	std	Y+20, r24	; 0x14
    1c34:	9d 8b       	std	Y+21, r25	; 0x15
    1c36:	ae 8b       	std	Y+22, r26	; 0x16
    1c38:	bf 8b       	std	Y+23, r27	; 0x17

		LCD_displayString("X1=");
    1c3a:	8c e4       	ldi	r24, 0x4C	; 76
    1c3c:	91 e0       	ldi	r25, 0x01	; 1
    1c3e:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <LCD_displayString>
		LCD_intgerToString(realPart);
    1c42:	68 8d       	ldd	r22, Y+24	; 0x18
    1c44:	79 8d       	ldd	r23, Y+25	; 0x19
    1c46:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1c48:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1c4a:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    1c4e:	dc 01       	movw	r26, r24
    1c50:	cb 01       	movw	r24, r22
    1c52:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <LCD_intgerToString>
		LCD_displayCharacter('+');
    1c56:	8b e2       	ldi	r24, 0x2B	; 43
    1c58:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <LCD_displayCharacter>
		LCD_intgerToString(imgPart);
    1c5c:	6c 89       	ldd	r22, Y+20	; 0x14
    1c5e:	7d 89       	ldd	r23, Y+21	; 0x15
    1c60:	8e 89       	ldd	r24, Y+22	; 0x16
    1c62:	9f 89       	ldd	r25, Y+23	; 0x17
    1c64:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    1c68:	dc 01       	movw	r26, r24
    1c6a:	cb 01       	movw	r24, r22
    1c6c:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <LCD_intgerToString>
		LCD_displayCharacter('i');
    1c70:	89 e6       	ldi	r24, 0x69	; 105
    1c72:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <LCD_displayCharacter>
		LCD_moveCursor(1, 0);
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	60 e0       	ldi	r22, 0x00	; 0
    1c7a:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <LCD_moveCursor>
		LCD_displayString("X2=");
    1c7e:	80 e5       	ldi	r24, 0x50	; 80
    1c80:	91 e0       	ldi	r25, 0x01	; 1
    1c82:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <LCD_displayString>
		LCD_intgerToString(realPart);
    1c86:	68 8d       	ldd	r22, Y+24	; 0x18
    1c88:	79 8d       	ldd	r23, Y+25	; 0x19
    1c8a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1c8c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1c8e:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    1c92:	dc 01       	movw	r26, r24
    1c94:	cb 01       	movw	r24, r22
    1c96:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <LCD_intgerToString>
		LCD_displayCharacter('-');
    1c9a:	8d e2       	ldi	r24, 0x2D	; 45
    1c9c:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <LCD_displayCharacter>
		LCD_intgerToString(imgPart);
    1ca0:	6c 89       	ldd	r22, Y+20	; 0x14
    1ca2:	7d 89       	ldd	r23, Y+21	; 0x15
    1ca4:	8e 89       	ldd	r24, Y+22	; 0x16
    1ca6:	9f 89       	ldd	r25, Y+23	; 0x17
    1ca8:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    1cac:	dc 01       	movw	r26, r24
    1cae:	cb 01       	movw	r24, r22
    1cb0:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <LCD_intgerToString>
		LCD_displayCharacter('i');
    1cb4:	89 e6       	ldi	r24, 0x69	; 105
    1cb6:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <LCD_displayCharacter>
	}

	do {
		key = KEYPAD_getPressedKey();
    1cba:	0e 94 ca 19 	call	0x3394	; 0x3394 <KEYPAD_getPressedKey>
    1cbe:	8a 8b       	std	Y+18, r24	; 0x12
	}
	while (key != ON_KEY);
    1cc0:	8a 89       	ldd	r24, Y+18	; 0x12
    1cc2:	8d 30       	cpi	r24, 0x0D	; 13
    1cc4:	d1 f7       	brne	.-12     	; 0x1cba <quadrticEquation+0x528>
}
    1cc6:	ef 96       	adiw	r28, 0x3f	; 63
    1cc8:	0f b6       	in	r0, 0x3f	; 63
    1cca:	f8 94       	cli
    1ccc:	de bf       	out	0x3e, r29	; 62
    1cce:	0f be       	out	0x3f, r0	; 63
    1cd0:	cd bf       	out	0x3d, r28	; 61
    1cd2:	cf 91       	pop	r28
    1cd4:	df 91       	pop	r29
    1cd6:	1f 91       	pop	r17
    1cd8:	0f 91       	pop	r16
    1cda:	ff 90       	pop	r15
    1cdc:	ef 90       	pop	r14
    1cde:	08 95       	ret

00001ce0 <twoInTwoEquation>:

void twoInTwoEquation(void){
    1ce0:	df 93       	push	r29
    1ce2:	cf 93       	push	r28
    1ce4:	cd b7       	in	r28, 0x3d	; 61
    1ce6:	de b7       	in	r29, 0x3e	; 62
    1ce8:	a1 97       	sbiw	r28, 0x21	; 33
    1cea:	0f b6       	in	r0, 0x3f	; 63
    1cec:	f8 94       	cli
    1cee:	de bf       	out	0x3e, r29	; 62
    1cf0:	0f be       	out	0x3f, r0	; 63
    1cf2:	cd bf       	out	0x3d, r28	; 61
	long double coeffs[6], ans[2];
	uint8 key;

	getCoeffs(coeffs, 2);
    1cf4:	ce 01       	movw	r24, r28
    1cf6:	02 96       	adiw	r24, 0x02	; 2
    1cf8:	62 e0       	ldi	r22, 0x02	; 2
    1cfa:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <getCoeffs>

	solveTwoInTwoEquation(coeffs, ans);
    1cfe:	ce 01       	movw	r24, r28
    1d00:	02 96       	adiw	r24, 0x02	; 2
    1d02:	9e 01       	movw	r18, r28
    1d04:	26 5e       	subi	r18, 0xE6	; 230
    1d06:	3f 4f       	sbci	r19, 0xFF	; 255
    1d08:	b9 01       	movw	r22, r18
    1d0a:	0e 94 86 10 	call	0x210c	; 0x210c <solveTwoInTwoEquation>

	LCD_clearScreen();
    1d0e:	0e 94 07 20 	call	0x400e	; 0x400e <LCD_clearScreen>
	LCD_displayString("X=");
    1d12:	84 e5       	ldi	r24, 0x54	; 84
    1d14:	91 e0       	ldi	r25, 0x01	; 1
    1d16:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <LCD_displayString>
	LCD_intgerToString(ans[0]);
    1d1a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1d1c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1d1e:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1d20:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1d22:	bc 01       	movw	r22, r24
    1d24:	cd 01       	movw	r24, r26
    1d26:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    1d2a:	dc 01       	movw	r26, r24
    1d2c:	cb 01       	movw	r24, r22
    1d2e:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <LCD_intgerToString>
	LCD_moveCursor(1, 0);
    1d32:	81 e0       	ldi	r24, 0x01	; 1
    1d34:	60 e0       	ldi	r22, 0x00	; 0
    1d36:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <LCD_moveCursor>
	LCD_displayString("Y=");
    1d3a:	87 e5       	ldi	r24, 0x57	; 87
    1d3c:	91 e0       	ldi	r25, 0x01	; 1
    1d3e:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <LCD_displayString>
	LCD_intgerToString(ans[1]);
    1d42:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d44:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1d46:	a8 a1       	ldd	r26, Y+32	; 0x20
    1d48:	b9 a1       	ldd	r27, Y+33	; 0x21
    1d4a:	bc 01       	movw	r22, r24
    1d4c:	cd 01       	movw	r24, r26
    1d4e:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    1d52:	dc 01       	movw	r26, r24
    1d54:	cb 01       	movw	r24, r22
    1d56:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <LCD_intgerToString>

	do {
		key = KEYPAD_getPressedKey();
    1d5a:	0e 94 ca 19 	call	0x3394	; 0x3394 <KEYPAD_getPressedKey>
    1d5e:	89 83       	std	Y+1, r24	; 0x01
	}
	while (key != ON_KEY);
    1d60:	89 81       	ldd	r24, Y+1	; 0x01
    1d62:	8d 30       	cpi	r24, 0x0D	; 13
    1d64:	d1 f7       	brne	.-12     	; 0x1d5a <twoInTwoEquation+0x7a>
}
    1d66:	a1 96       	adiw	r28, 0x21	; 33
    1d68:	0f b6       	in	r0, 0x3f	; 63
    1d6a:	f8 94       	cli
    1d6c:	de bf       	out	0x3e, r29	; 62
    1d6e:	0f be       	out	0x3f, r0	; 63
    1d70:	cd bf       	out	0x3d, r28	; 61
    1d72:	cf 91       	pop	r28
    1d74:	df 91       	pop	r29
    1d76:	08 95       	ret

00001d78 <threeInThreeEquation>:

void threeInThreeEquation(void){
    1d78:	df 93       	push	r29
    1d7a:	cf 93       	push	r28
    1d7c:	cd b7       	in	r28, 0x3d	; 61
    1d7e:	de b7       	in	r29, 0x3e	; 62
    1d80:	ed 97       	sbiw	r28, 0x3d	; 61
    1d82:	0f b6       	in	r0, 0x3f	; 63
    1d84:	f8 94       	cli
    1d86:	de bf       	out	0x3e, r29	; 62
    1d88:	0f be       	out	0x3f, r0	; 63
    1d8a:	cd bf       	out	0x3d, r28	; 61
	long double coeffs[12], ans[3];
	uint8  key;

	getCoeffs(coeffs, 3);
    1d8c:	ce 01       	movw	r24, r28
    1d8e:	02 96       	adiw	r24, 0x02	; 2
    1d90:	63 e0       	ldi	r22, 0x03	; 3
    1d92:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <getCoeffs>

	solveThreeinThreeEquation(coeffs, ans);
    1d96:	ce 01       	movw	r24, r28
    1d98:	02 96       	adiw	r24, 0x02	; 2
    1d9a:	9e 01       	movw	r18, r28
    1d9c:	2e 5c       	subi	r18, 0xCE	; 206
    1d9e:	3f 4f       	sbci	r19, 0xFF	; 255
    1da0:	b9 01       	movw	r22, r18
    1da2:	0e 94 65 11 	call	0x22ca	; 0x22ca <solveThreeinThreeEquation>

	LCD_clearScreen();
    1da6:	0e 94 07 20 	call	0x400e	; 0x400e <LCD_clearScreen>
	LCD_displayString("X=");
    1daa:	84 e5       	ldi	r24, 0x54	; 84
    1dac:	91 e0       	ldi	r25, 0x01	; 1
    1dae:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <LCD_displayString>
	LCD_intgerToString(ans[0]);
    1db2:	8a a9       	ldd	r24, Y+50	; 0x32
    1db4:	9b a9       	ldd	r25, Y+51	; 0x33
    1db6:	ac a9       	ldd	r26, Y+52	; 0x34
    1db8:	bd a9       	ldd	r27, Y+53	; 0x35
    1dba:	bc 01       	movw	r22, r24
    1dbc:	cd 01       	movw	r24, r26
    1dbe:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    1dc2:	dc 01       	movw	r26, r24
    1dc4:	cb 01       	movw	r24, r22
    1dc6:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <LCD_intgerToString>
	LCD_moveCursor(1, 0);
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	60 e0       	ldi	r22, 0x00	; 0
    1dce:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <LCD_moveCursor>
	LCD_displayString("Y=");
    1dd2:	87 e5       	ldi	r24, 0x57	; 87
    1dd4:	91 e0       	ldi	r25, 0x01	; 1
    1dd6:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <LCD_displayString>
	LCD_intgerToString(ans[1]);
    1dda:	8e a9       	ldd	r24, Y+54	; 0x36
    1ddc:	9f a9       	ldd	r25, Y+55	; 0x37
    1dde:	a8 ad       	ldd	r26, Y+56	; 0x38
    1de0:	b9 ad       	ldd	r27, Y+57	; 0x39
    1de2:	bc 01       	movw	r22, r24
    1de4:	cd 01       	movw	r24, r26
    1de6:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    1dea:	dc 01       	movw	r26, r24
    1dec:	cb 01       	movw	r24, r22
    1dee:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <LCD_intgerToString>
	LCD_moveCursor(2, 0);
    1df2:	82 e0       	ldi	r24, 0x02	; 2
    1df4:	60 e0       	ldi	r22, 0x00	; 0
    1df6:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <LCD_moveCursor>
	LCD_displayString("Z=");
    1dfa:	8a e5       	ldi	r24, 0x5A	; 90
    1dfc:	91 e0       	ldi	r25, 0x01	; 1
    1dfe:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <LCD_displayString>
	LCD_intgerToString(ans[2]);
    1e02:	8a ad       	ldd	r24, Y+58	; 0x3a
    1e04:	9b ad       	ldd	r25, Y+59	; 0x3b
    1e06:	ac ad       	ldd	r26, Y+60	; 0x3c
    1e08:	bd ad       	ldd	r27, Y+61	; 0x3d
    1e0a:	bc 01       	movw	r22, r24
    1e0c:	cd 01       	movw	r24, r26
    1e0e:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    1e12:	dc 01       	movw	r26, r24
    1e14:	cb 01       	movw	r24, r22
    1e16:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <LCD_intgerToString>

	do {
		key = KEYPAD_getPressedKey();
    1e1a:	0e 94 ca 19 	call	0x3394	; 0x3394 <KEYPAD_getPressedKey>
    1e1e:	89 83       	std	Y+1, r24	; 0x01
	}
	while (key != ON_KEY);
    1e20:	89 81       	ldd	r24, Y+1	; 0x01
    1e22:	8d 30       	cpi	r24, 0x0D	; 13
    1e24:	d1 f7       	brne	.-12     	; 0x1e1a <threeInThreeEquation+0xa2>
}
    1e26:	ed 96       	adiw	r28, 0x3d	; 61
    1e28:	0f b6       	in	r0, 0x3f	; 63
    1e2a:	f8 94       	cli
    1e2c:	de bf       	out	0x3e, r29	; 62
    1e2e:	0f be       	out	0x3f, r0	; 63
    1e30:	cd bf       	out	0x3d, r28	; 61
    1e32:	cf 91       	pop	r28
    1e34:	df 91       	pop	r29
    1e36:	08 95       	ret

00001e38 <getCoeffs>:

void getCoeffs(long double * ptr_coeffs, uint8 size){
    1e38:	0f 93       	push	r16
    1e3a:	1f 93       	push	r17
    1e3c:	df 93       	push	r29
    1e3e:	cf 93       	push	r28
    1e40:	cd b7       	in	r28, 0x3d	; 61
    1e42:	de b7       	in	r29, 0x3e	; 62
    1e44:	a2 97       	sbiw	r28, 0x22	; 34
    1e46:	0f b6       	in	r0, 0x3f	; 63
    1e48:	f8 94       	cli
    1e4a:	de bf       	out	0x3e, r29	; 62
    1e4c:	0f be       	out	0x3f, r0	; 63
    1e4e:	cd bf       	out	0x3d, r28	; 61
    1e50:	99 a3       	std	Y+33, r25	; 0x21
    1e52:	88 a3       	std	Y+32, r24	; 0x20
    1e54:	6a a3       	std	Y+34, r22	; 0x22

	uint8 i, j = 0, key, numCounter = 0, sign ='+', totSize;
    1e56:	1c 8a       	std	Y+20, r1	; 0x14
    1e58:	1a 8a       	std	Y+18, r1	; 0x12
    1e5a:	8b e2       	ldi	r24, 0x2B	; 43
    1e5c:	89 8b       	std	Y+17, r24	; 0x11
	Key_Type type;
	char num[10] = {'\0'};
    1e5e:	8a e0       	ldi	r24, 0x0A	; 10
    1e60:	fe 01       	movw	r30, r28
    1e62:	76 96       	adiw	r30, 0x16	; 22
    1e64:	df 01       	movw	r26, r30
    1e66:	48 2f       	mov	r20, r24
    1e68:	1d 92       	st	X+, r1
    1e6a:	4a 95       	dec	r20
    1e6c:	e9 f7       	brne	.-6      	; 0x1e68 <getCoeffs+0x30>

	/* Computing the total number of coefficients based on the size of the system*/
	totSize = size * (size + 1);
    1e6e:	8a a1       	ldd	r24, Y+34	; 0x22
    1e70:	28 2f       	mov	r18, r24
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	8a a1       	ldd	r24, Y+34	; 0x22
    1e76:	88 2f       	mov	r24, r24
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	01 96       	adiw	r24, 0x01	; 1
    1e7c:	dc 01       	movw	r26, r24
    1e7e:	2a 9f       	mul	r18, r26
    1e80:	c0 01       	movw	r24, r0
    1e82:	2b 9f       	mul	r18, r27
    1e84:	90 0d       	add	r25, r0
    1e86:	3a 9f       	mul	r19, r26
    1e88:	90 0d       	add	r25, r0
    1e8a:	11 24       	eor	r1, r1
    1e8c:	88 8b       	std	Y+16, r24	; 0x10

	/* Getting the coefficients from user */
	for (i = 0; i < totSize; i++){
    1e8e:	1d 8a       	std	Y+21, r1	; 0x15
    1e90:	2d c1       	rjmp	.+602    	; 0x20ec <getCoeffs+0x2b4>

		if (i % (size + 1) == 0){
    1e92:	8d 89       	ldd	r24, Y+21	; 0x15
    1e94:	48 2f       	mov	r20, r24
    1e96:	50 e0       	ldi	r21, 0x00	; 0
    1e98:	8a a1       	ldd	r24, Y+34	; 0x22
    1e9a:	88 2f       	mov	r24, r24
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	9c 01       	movw	r18, r24
    1ea0:	2f 5f       	subi	r18, 0xFF	; 255
    1ea2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ea4:	ca 01       	movw	r24, r20
    1ea6:	b9 01       	movw	r22, r18
    1ea8:	0e 94 11 20 	call	0x4022	; 0x4022 <__divmodhi4>
    1eac:	00 97       	sbiw	r24, 0x00	; 0
    1eae:	29 f4       	brne	.+10     	; 0x1eba <getCoeffs+0x82>
			LCD_clearScreen();
    1eb0:	0e 94 07 20 	call	0x400e	; 0x400e <LCD_clearScreen>
			j++;
    1eb4:	8c 89       	ldd	r24, Y+20	; 0x14
    1eb6:	8f 5f       	subi	r24, 0xFF	; 255
    1eb8:	8c 8b       	std	Y+20, r24	; 0x14
		}
		LCD_moveCursor(i % (size + 1), 0);
    1eba:	8d 89       	ldd	r24, Y+21	; 0x15
    1ebc:	48 2f       	mov	r20, r24
    1ebe:	50 e0       	ldi	r21, 0x00	; 0
    1ec0:	8a a1       	ldd	r24, Y+34	; 0x22
    1ec2:	88 2f       	mov	r24, r24
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	9c 01       	movw	r18, r24
    1ec8:	2f 5f       	subi	r18, 0xFF	; 255
    1eca:	3f 4f       	sbci	r19, 0xFF	; 255
    1ecc:	ca 01       	movw	r24, r20
    1ece:	b9 01       	movw	r22, r18
    1ed0:	0e 94 11 20 	call	0x4022	; 0x4022 <__divmodhi4>
    1ed4:	60 e0       	ldi	r22, 0x00	; 0
    1ed6:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <LCD_moveCursor>
		LCD_displayCharacter('a' + (i % (size + 1)));
    1eda:	8d 89       	ldd	r24, Y+21	; 0x15
    1edc:	48 2f       	mov	r20, r24
    1ede:	50 e0       	ldi	r21, 0x00	; 0
    1ee0:	8a a1       	ldd	r24, Y+34	; 0x22
    1ee2:	88 2f       	mov	r24, r24
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	9c 01       	movw	r18, r24
    1ee8:	2f 5f       	subi	r18, 0xFF	; 255
    1eea:	3f 4f       	sbci	r19, 0xFF	; 255
    1eec:	ca 01       	movw	r24, r20
    1eee:	b9 01       	movw	r22, r18
    1ef0:	0e 94 11 20 	call	0x4022	; 0x4022 <__divmodhi4>
    1ef4:	8f 59       	subi	r24, 0x9F	; 159
    1ef6:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <LCD_displayCharacter>
		LCD_displayCharacter(j + 48);
    1efa:	8c 89       	ldd	r24, Y+20	; 0x14
    1efc:	80 5d       	subi	r24, 0xD0	; 208
    1efe:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <LCD_displayCharacter>
		LCD_displayCharacter(':');
    1f02:	8a e3       	ldi	r24, 0x3A	; 58
    1f04:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <LCD_displayCharacter>

		do {
			key = KEYPAD_getPressedKey();
    1f08:	0e 94 ca 19 	call	0x3394	; 0x3394 <KEYPAD_getPressedKey>
    1f0c:	8b 8b       	std	Y+19, r24	; 0x13
			type = getKeyType(key);
    1f0e:	8b 89       	ldd	r24, Y+19	; 0x13
    1f10:	0e 94 b6 0b 	call	0x176c	; 0x176c <getKeyType>
    1f14:	8f 87       	std	Y+15, r24	; 0x0f

			if (key == ON_KEY){
    1f16:	8b 89       	ldd	r24, Y+19	; 0x13
    1f18:	8d 30       	cpi	r24, 0x0D	; 13
    1f1a:	09 f4       	brne	.+2      	; 0x1f1e <getCoeffs+0xe6>
    1f1c:	ec c0       	rjmp	.+472    	; 0x20f6 <getCoeffs+0x2be>
				return;
			}

			if (type == NUMBER_KEY){
    1f1e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f20:	88 23       	and	r24, r24
    1f22:	a1 f4       	brne	.+40     	; 0x1f4c <getCoeffs+0x114>
				LCD_displayCharacter(key+48);
    1f24:	8b 89       	ldd	r24, Y+19	; 0x13
    1f26:	80 5d       	subi	r24, 0xD0	; 208
    1f28:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <LCD_displayCharacter>
				num[numCounter++] = key + 48;
    1f2c:	8a 89       	ldd	r24, Y+18	; 0x12
    1f2e:	28 2f       	mov	r18, r24
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	8b 89       	ldd	r24, Y+19	; 0x13
    1f34:	48 2f       	mov	r20, r24
    1f36:	40 5d       	subi	r20, 0xD0	; 208
    1f38:	ce 01       	movw	r24, r28
    1f3a:	46 96       	adiw	r24, 0x16	; 22
    1f3c:	fc 01       	movw	r30, r24
    1f3e:	e2 0f       	add	r30, r18
    1f40:	f3 1f       	adc	r31, r19
    1f42:	40 83       	st	Z, r20
    1f44:	8a 89       	ldd	r24, Y+18	; 0x12
    1f46:	8f 5f       	subi	r24, 0xFF	; 255
    1f48:	8a 8b       	std	Y+18, r24	; 0x12
    1f4a:	08 c0       	rjmp	.+16     	; 0x1f5c <getCoeffs+0x124>
			}
			else {
				if (key != '='){
    1f4c:	8b 89       	ldd	r24, Y+19	; 0x13
    1f4e:	8d 33       	cpi	r24, 0x3D	; 61
    1f50:	29 f0       	breq	.+10     	; 0x1f5c <getCoeffs+0x124>
					LCD_displayCharacter(key);
    1f52:	8b 89       	ldd	r24, Y+19	; 0x13
    1f54:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <LCD_displayCharacter>
					sign = key;
    1f58:	8b 89       	ldd	r24, Y+19	; 0x13
    1f5a:	89 8b       	std	Y+17, r24	; 0x11
    1f5c:	80 e0       	ldi	r24, 0x00	; 0
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	aa ef       	ldi	r26, 0xFA	; 250
    1f62:	b3 e4       	ldi	r27, 0x43	; 67
    1f64:	8b 87       	std	Y+11, r24	; 0x0b
    1f66:	9c 87       	std	Y+12, r25	; 0x0c
    1f68:	ad 87       	std	Y+13, r26	; 0x0d
    1f6a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f70:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f72:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f74:	20 e0       	ldi	r18, 0x00	; 0
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	4a e7       	ldi	r20, 0x7A	; 122
    1f7a:	53 e4       	ldi	r21, 0x43	; 67
    1f7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f80:	dc 01       	movw	r26, r24
    1f82:	cb 01       	movw	r24, r22
    1f84:	8f 83       	std	Y+7, r24	; 0x07
    1f86:	98 87       	std	Y+8, r25	; 0x08
    1f88:	a9 87       	std	Y+9, r26	; 0x09
    1f8a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f8e:	78 85       	ldd	r23, Y+8	; 0x08
    1f90:	89 85       	ldd	r24, Y+9	; 0x09
    1f92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f94:	20 e0       	ldi	r18, 0x00	; 0
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	40 e8       	ldi	r20, 0x80	; 128
    1f9a:	5f e3       	ldi	r21, 0x3F	; 63
    1f9c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fa0:	88 23       	and	r24, r24
    1fa2:	2c f4       	brge	.+10     	; 0x1fae <getCoeffs+0x176>
		__ticks = 1;
    1fa4:	81 e0       	ldi	r24, 0x01	; 1
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	9e 83       	std	Y+6, r25	; 0x06
    1faa:	8d 83       	std	Y+5, r24	; 0x05
    1fac:	3f c0       	rjmp	.+126    	; 0x202c <getCoeffs+0x1f4>
	else if (__tmp > 65535)
    1fae:	6f 81       	ldd	r22, Y+7	; 0x07
    1fb0:	78 85       	ldd	r23, Y+8	; 0x08
    1fb2:	89 85       	ldd	r24, Y+9	; 0x09
    1fb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fb6:	20 e0       	ldi	r18, 0x00	; 0
    1fb8:	3f ef       	ldi	r19, 0xFF	; 255
    1fba:	4f e7       	ldi	r20, 0x7F	; 127
    1fbc:	57 e4       	ldi	r21, 0x47	; 71
    1fbe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fc2:	18 16       	cp	r1, r24
    1fc4:	4c f5       	brge	.+82     	; 0x2018 <getCoeffs+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fc6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fc8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fca:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fcc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	40 e2       	ldi	r20, 0x20	; 32
    1fd4:	51 e4       	ldi	r21, 0x41	; 65
    1fd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fda:	dc 01       	movw	r26, r24
    1fdc:	cb 01       	movw	r24, r22
    1fde:	bc 01       	movw	r22, r24
    1fe0:	cd 01       	movw	r24, r26
    1fe2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe6:	dc 01       	movw	r26, r24
    1fe8:	cb 01       	movw	r24, r22
    1fea:	9e 83       	std	Y+6, r25	; 0x06
    1fec:	8d 83       	std	Y+5, r24	; 0x05
    1fee:	0f c0       	rjmp	.+30     	; 0x200e <getCoeffs+0x1d6>
    1ff0:	89 e1       	ldi	r24, 0x19	; 25
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	9c 83       	std	Y+4, r25	; 0x04
    1ff6:	8b 83       	std	Y+3, r24	; 0x03
    1ff8:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffa:	9c 81       	ldd	r25, Y+4	; 0x04
    1ffc:	01 97       	sbiw	r24, 0x01	; 1
    1ffe:	f1 f7       	brne	.-4      	; 0x1ffc <getCoeffs+0x1c4>
    2000:	9c 83       	std	Y+4, r25	; 0x04
    2002:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2004:	8d 81       	ldd	r24, Y+5	; 0x05
    2006:	9e 81       	ldd	r25, Y+6	; 0x06
    2008:	01 97       	sbiw	r24, 0x01	; 1
    200a:	9e 83       	std	Y+6, r25	; 0x06
    200c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    200e:	8d 81       	ldd	r24, Y+5	; 0x05
    2010:	9e 81       	ldd	r25, Y+6	; 0x06
    2012:	00 97       	sbiw	r24, 0x00	; 0
    2014:	69 f7       	brne	.-38     	; 0x1ff0 <getCoeffs+0x1b8>
    2016:	14 c0       	rjmp	.+40     	; 0x2040 <getCoeffs+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2018:	6f 81       	ldd	r22, Y+7	; 0x07
    201a:	78 85       	ldd	r23, Y+8	; 0x08
    201c:	89 85       	ldd	r24, Y+9	; 0x09
    201e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2020:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2024:	dc 01       	movw	r26, r24
    2026:	cb 01       	movw	r24, r22
    2028:	9e 83       	std	Y+6, r25	; 0x06
    202a:	8d 83       	std	Y+5, r24	; 0x05
    202c:	8d 81       	ldd	r24, Y+5	; 0x05
    202e:	9e 81       	ldd	r25, Y+6	; 0x06
    2030:	9a 83       	std	Y+2, r25	; 0x02
    2032:	89 83       	std	Y+1, r24	; 0x01
    2034:	89 81       	ldd	r24, Y+1	; 0x01
    2036:	9a 81       	ldd	r25, Y+2	; 0x02
    2038:	01 97       	sbiw	r24, 0x01	; 1
    203a:	f1 f7       	brne	.-4      	; 0x2038 <getCoeffs+0x200>
    203c:	9a 83       	std	Y+2, r25	; 0x02
    203e:	89 83       	std	Y+1, r24	; 0x01
				}
			}
			_delay_ms(500);
		}
		while (key != '=');
    2040:	8b 89       	ldd	r24, Y+19	; 0x13
    2042:	8d 33       	cpi	r24, 0x3D	; 61
    2044:	09 f0       	breq	.+2      	; 0x2048 <getCoeffs+0x210>
    2046:	60 cf       	rjmp	.-320    	; 0x1f08 <getCoeffs+0xd0>

		/* Converting the string number to long */
		num[numCounter] = '\0';
    2048:	8a 89       	ldd	r24, Y+18	; 0x12
    204a:	28 2f       	mov	r18, r24
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	ce 01       	movw	r24, r28
    2050:	46 96       	adiw	r24, 0x16	; 22
    2052:	fc 01       	movw	r30, r24
    2054:	e2 0f       	add	r30, r18
    2056:	f3 1f       	adc	r31, r19
    2058:	10 82       	st	Z, r1
		numCounter = 0;
    205a:	1a 8a       	std	Y+18, r1	; 0x12
		ptr_coeffs[i] = atol(num);
    205c:	8d 89       	ldd	r24, Y+21	; 0x15
    205e:	88 2f       	mov	r24, r24
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	9c 01       	movw	r18, r24
    2064:	22 0f       	add	r18, r18
    2066:	33 1f       	adc	r19, r19
    2068:	22 0f       	add	r18, r18
    206a:	33 1f       	adc	r19, r19
    206c:	88 a1       	ldd	r24, Y+32	; 0x20
    206e:	99 a1       	ldd	r25, Y+33	; 0x21
    2070:	8c 01       	movw	r16, r24
    2072:	02 0f       	add	r16, r18
    2074:	13 1f       	adc	r17, r19
    2076:	ce 01       	movw	r24, r28
    2078:	46 96       	adiw	r24, 0x16	; 22
    207a:	0e 94 6f 20 	call	0x40de	; 0x40de <atol>
    207e:	dc 01       	movw	r26, r24
    2080:	cb 01       	movw	r24, r22
    2082:	bc 01       	movw	r22, r24
    2084:	cd 01       	movw	r24, r26
    2086:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    208a:	dc 01       	movw	r26, r24
    208c:	cb 01       	movw	r24, r22
    208e:	f8 01       	movw	r30, r16
    2090:	80 83       	st	Z, r24
    2092:	91 83       	std	Z+1, r25	; 0x01
    2094:	a2 83       	std	Z+2, r26	; 0x02
    2096:	b3 83       	std	Z+3, r27	; 0x03
		if (sign == 45){
    2098:	89 89       	ldd	r24, Y+17	; 0x11
    209a:	8d 32       	cpi	r24, 0x2D	; 45
    209c:	21 f5       	brne	.+72     	; 0x20e6 <getCoeffs+0x2ae>
			ptr_coeffs[i] *= -1;
    209e:	8d 89       	ldd	r24, Y+21	; 0x15
    20a0:	88 2f       	mov	r24, r24
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	9c 01       	movw	r18, r24
    20a6:	22 0f       	add	r18, r18
    20a8:	33 1f       	adc	r19, r19
    20aa:	22 0f       	add	r18, r18
    20ac:	33 1f       	adc	r19, r19
    20ae:	88 a1       	ldd	r24, Y+32	; 0x20
    20b0:	99 a1       	ldd	r25, Y+33	; 0x21
    20b2:	ac 01       	movw	r20, r24
    20b4:	42 0f       	add	r20, r18
    20b6:	53 1f       	adc	r21, r19
    20b8:	8d 89       	ldd	r24, Y+21	; 0x15
    20ba:	88 2f       	mov	r24, r24
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	9c 01       	movw	r18, r24
    20c0:	22 0f       	add	r18, r18
    20c2:	33 1f       	adc	r19, r19
    20c4:	22 0f       	add	r18, r18
    20c6:	33 1f       	adc	r19, r19
    20c8:	88 a1       	ldd	r24, Y+32	; 0x20
    20ca:	99 a1       	ldd	r25, Y+33	; 0x21
    20cc:	fc 01       	movw	r30, r24
    20ce:	e2 0f       	add	r30, r18
    20d0:	f3 1f       	adc	r31, r19
    20d2:	80 81       	ld	r24, Z
    20d4:	91 81       	ldd	r25, Z+1	; 0x01
    20d6:	a2 81       	ldd	r26, Z+2	; 0x02
    20d8:	b3 81       	ldd	r27, Z+3	; 0x03
    20da:	b0 58       	subi	r27, 0x80	; 128
    20dc:	fa 01       	movw	r30, r20
    20de:	80 83       	st	Z, r24
    20e0:	91 83       	std	Z+1, r25	; 0x01
    20e2:	a2 83       	std	Z+2, r26	; 0x02
    20e4:	b3 83       	std	Z+3, r27	; 0x03

	/* Computing the total number of coefficients based on the size of the system*/
	totSize = size * (size + 1);

	/* Getting the coefficients from user */
	for (i = 0; i < totSize; i++){
    20e6:	8d 89       	ldd	r24, Y+21	; 0x15
    20e8:	8f 5f       	subi	r24, 0xFF	; 255
    20ea:	8d 8b       	std	Y+21, r24	; 0x15
    20ec:	9d 89       	ldd	r25, Y+21	; 0x15
    20ee:	88 89       	ldd	r24, Y+16	; 0x10
    20f0:	98 17       	cp	r25, r24
    20f2:	08 f4       	brcc	.+2      	; 0x20f6 <getCoeffs+0x2be>
    20f4:	ce ce       	rjmp	.-612    	; 0x1e92 <getCoeffs+0x5a>
		ptr_coeffs[i] = atol(num);
		if (sign == 45){
			ptr_coeffs[i] *= -1;
		}
	}
}
    20f6:	a2 96       	adiw	r28, 0x22	; 34
    20f8:	0f b6       	in	r0, 0x3f	; 63
    20fa:	f8 94       	cli
    20fc:	de bf       	out	0x3e, r29	; 62
    20fe:	0f be       	out	0x3f, r0	; 63
    2100:	cd bf       	out	0x3d, r28	; 61
    2102:	cf 91       	pop	r28
    2104:	df 91       	pop	r29
    2106:	1f 91       	pop	r17
    2108:	0f 91       	pop	r16
    210a:	08 95       	ret

0000210c <solveTwoInTwoEquation>:

void solveTwoInTwoEquation(long double * ptr_coeffs, long double * ptr_ans){
    210c:	ef 92       	push	r14
    210e:	ff 92       	push	r15
    2110:	0f 93       	push	r16
    2112:	1f 93       	push	r17
    2114:	df 93       	push	r29
    2116:	cf 93       	push	r28
    2118:	cd b7       	in	r28, 0x3d	; 61
    211a:	de b7       	in	r29, 0x3e	; 62
    211c:	a0 97       	sbiw	r28, 0x20	; 32
    211e:	0f b6       	in	r0, 0x3f	; 63
    2120:	f8 94       	cli
    2122:	de bf       	out	0x3e, r29	; 62
    2124:	0f be       	out	0x3f, r0	; 63
    2126:	cd bf       	out	0x3d, r28	; 61
    2128:	9e 8f       	std	Y+30, r25	; 0x1e
    212a:	8d 8f       	std	Y+29, r24	; 0x1d
    212c:	78 a3       	std	Y+32, r23	; 0x20
    212e:	6f 8f       	std	Y+31, r22	; 0x1f
	long double a1, b1, c1, a2, b2, c2, x_r;

	a1 = ptr_coeffs[0];
    2130:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2132:	fe 8d       	ldd	r31, Y+30	; 0x1e
    2134:	80 81       	ld	r24, Z
    2136:	91 81       	ldd	r25, Z+1	; 0x01
    2138:	a2 81       	ldd	r26, Z+2	; 0x02
    213a:	b3 81       	ldd	r27, Z+3	; 0x03
    213c:	89 8f       	std	Y+25, r24	; 0x19
    213e:	9a 8f       	std	Y+26, r25	; 0x1a
    2140:	ab 8f       	std	Y+27, r26	; 0x1b
    2142:	bc 8f       	std	Y+28, r27	; 0x1c
	b1 = ptr_coeffs[1];
    2144:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2146:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2148:	fc 01       	movw	r30, r24
    214a:	34 96       	adiw	r30, 0x04	; 4
    214c:	80 81       	ld	r24, Z
    214e:	91 81       	ldd	r25, Z+1	; 0x01
    2150:	a2 81       	ldd	r26, Z+2	; 0x02
    2152:	b3 81       	ldd	r27, Z+3	; 0x03
    2154:	8d 8b       	std	Y+21, r24	; 0x15
    2156:	9e 8b       	std	Y+22, r25	; 0x16
    2158:	af 8b       	std	Y+23, r26	; 0x17
    215a:	b8 8f       	std	Y+24, r27	; 0x18
	c1 = ptr_coeffs[2];
    215c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    215e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2160:	fc 01       	movw	r30, r24
    2162:	38 96       	adiw	r30, 0x08	; 8
    2164:	80 81       	ld	r24, Z
    2166:	91 81       	ldd	r25, Z+1	; 0x01
    2168:	a2 81       	ldd	r26, Z+2	; 0x02
    216a:	b3 81       	ldd	r27, Z+3	; 0x03
    216c:	89 8b       	std	Y+17, r24	; 0x11
    216e:	9a 8b       	std	Y+18, r25	; 0x12
    2170:	ab 8b       	std	Y+19, r26	; 0x13
    2172:	bc 8b       	std	Y+20, r27	; 0x14
	a2 = ptr_coeffs[3];
    2174:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2176:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2178:	fc 01       	movw	r30, r24
    217a:	3c 96       	adiw	r30, 0x0c	; 12
    217c:	80 81       	ld	r24, Z
    217e:	91 81       	ldd	r25, Z+1	; 0x01
    2180:	a2 81       	ldd	r26, Z+2	; 0x02
    2182:	b3 81       	ldd	r27, Z+3	; 0x03
    2184:	8d 87       	std	Y+13, r24	; 0x0d
    2186:	9e 87       	std	Y+14, r25	; 0x0e
    2188:	af 87       	std	Y+15, r26	; 0x0f
    218a:	b8 8b       	std	Y+16, r27	; 0x10
	b2 = ptr_coeffs[4];
    218c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    218e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2190:	fc 01       	movw	r30, r24
    2192:	70 96       	adiw	r30, 0x10	; 16
    2194:	80 81       	ld	r24, Z
    2196:	91 81       	ldd	r25, Z+1	; 0x01
    2198:	a2 81       	ldd	r26, Z+2	; 0x02
    219a:	b3 81       	ldd	r27, Z+3	; 0x03
    219c:	89 87       	std	Y+9, r24	; 0x09
    219e:	9a 87       	std	Y+10, r25	; 0x0a
    21a0:	ab 87       	std	Y+11, r26	; 0x0b
    21a2:	bc 87       	std	Y+12, r27	; 0x0c
	c2 = ptr_coeffs[5];
    21a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21a6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21a8:	fc 01       	movw	r30, r24
    21aa:	74 96       	adiw	r30, 0x14	; 20
    21ac:	80 81       	ld	r24, Z
    21ae:	91 81       	ldd	r25, Z+1	; 0x01
    21b0:	a2 81       	ldd	r26, Z+2	; 0x02
    21b2:	b3 81       	ldd	r27, Z+3	; 0x03
    21b4:	8d 83       	std	Y+5, r24	; 0x05
    21b6:	9e 83       	std	Y+6, r25	; 0x06
    21b8:	af 83       	std	Y+7, r26	; 0x07
    21ba:	b8 87       	std	Y+8, r27	; 0x08

	x_r = (float)(a1 / a2);
    21bc:	69 8d       	ldd	r22, Y+25	; 0x19
    21be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21c4:	2d 85       	ldd	r18, Y+13	; 0x0d
    21c6:	3e 85       	ldd	r19, Y+14	; 0x0e
    21c8:	4f 85       	ldd	r20, Y+15	; 0x0f
    21ca:	58 89       	ldd	r21, Y+16	; 0x10
    21cc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    21d0:	dc 01       	movw	r26, r24
    21d2:	cb 01       	movw	r24, r22
    21d4:	89 83       	std	Y+1, r24	; 0x01
    21d6:	9a 83       	std	Y+2, r25	; 0x02
    21d8:	ab 83       	std	Y+3, r26	; 0x03
    21da:	bc 83       	std	Y+4, r27	; 0x04
	ptr_ans[0] = (float)(c1 - x_r * c2) / (b1 - x_r * b2);
    21dc:	69 81       	ldd	r22, Y+1	; 0x01
    21de:	7a 81       	ldd	r23, Y+2	; 0x02
    21e0:	8b 81       	ldd	r24, Y+3	; 0x03
    21e2:	9c 81       	ldd	r25, Y+4	; 0x04
    21e4:	2d 81       	ldd	r18, Y+5	; 0x05
    21e6:	3e 81       	ldd	r19, Y+6	; 0x06
    21e8:	4f 81       	ldd	r20, Y+7	; 0x07
    21ea:	58 85       	ldd	r21, Y+8	; 0x08
    21ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f0:	dc 01       	movw	r26, r24
    21f2:	cb 01       	movw	r24, r22
    21f4:	9c 01       	movw	r18, r24
    21f6:	ad 01       	movw	r20, r26
    21f8:	69 89       	ldd	r22, Y+17	; 0x11
    21fa:	7a 89       	ldd	r23, Y+18	; 0x12
    21fc:	8b 89       	ldd	r24, Y+19	; 0x13
    21fe:	9c 89       	ldd	r25, Y+20	; 0x14
    2200:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2204:	dc 01       	movw	r26, r24
    2206:	cb 01       	movw	r24, r22
    2208:	7c 01       	movw	r14, r24
    220a:	8d 01       	movw	r16, r26
    220c:	69 81       	ldd	r22, Y+1	; 0x01
    220e:	7a 81       	ldd	r23, Y+2	; 0x02
    2210:	8b 81       	ldd	r24, Y+3	; 0x03
    2212:	9c 81       	ldd	r25, Y+4	; 0x04
    2214:	29 85       	ldd	r18, Y+9	; 0x09
    2216:	3a 85       	ldd	r19, Y+10	; 0x0a
    2218:	4b 85       	ldd	r20, Y+11	; 0x0b
    221a:	5c 85       	ldd	r21, Y+12	; 0x0c
    221c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2220:	dc 01       	movw	r26, r24
    2222:	cb 01       	movw	r24, r22
    2224:	9c 01       	movw	r18, r24
    2226:	ad 01       	movw	r20, r26
    2228:	6d 89       	ldd	r22, Y+21	; 0x15
    222a:	7e 89       	ldd	r23, Y+22	; 0x16
    222c:	8f 89       	ldd	r24, Y+23	; 0x17
    222e:	98 8d       	ldd	r25, Y+24	; 0x18
    2230:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2234:	dc 01       	movw	r26, r24
    2236:	cb 01       	movw	r24, r22
    2238:	9c 01       	movw	r18, r24
    223a:	ad 01       	movw	r20, r26
    223c:	c8 01       	movw	r24, r16
    223e:	b7 01       	movw	r22, r14
    2240:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2244:	dc 01       	movw	r26, r24
    2246:	cb 01       	movw	r24, r22
    2248:	ef 8d       	ldd	r30, Y+31	; 0x1f
    224a:	f8 a1       	ldd	r31, Y+32	; 0x20
    224c:	80 83       	st	Z, r24
    224e:	91 83       	std	Z+1, r25	; 0x01
    2250:	a2 83       	std	Z+2, r26	; 0x02
    2252:	b3 83       	std	Z+3, r27	; 0x03
	ptr_ans[1] = (float)(c1 - b1 * ptr_ans[0]) / a1;
    2254:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2256:	98 a1       	ldd	r25, Y+32	; 0x20
    2258:	8c 01       	movw	r16, r24
    225a:	0c 5f       	subi	r16, 0xFC	; 252
    225c:	1f 4f       	sbci	r17, 0xFF	; 255
    225e:	ef 8d       	ldd	r30, Y+31	; 0x1f
    2260:	f8 a1       	ldd	r31, Y+32	; 0x20
    2262:	80 81       	ld	r24, Z
    2264:	91 81       	ldd	r25, Z+1	; 0x01
    2266:	a2 81       	ldd	r26, Z+2	; 0x02
    2268:	b3 81       	ldd	r27, Z+3	; 0x03
    226a:	bc 01       	movw	r22, r24
    226c:	cd 01       	movw	r24, r26
    226e:	2d 89       	ldd	r18, Y+21	; 0x15
    2270:	3e 89       	ldd	r19, Y+22	; 0x16
    2272:	4f 89       	ldd	r20, Y+23	; 0x17
    2274:	58 8d       	ldd	r21, Y+24	; 0x18
    2276:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    227a:	dc 01       	movw	r26, r24
    227c:	cb 01       	movw	r24, r22
    227e:	9c 01       	movw	r18, r24
    2280:	ad 01       	movw	r20, r26
    2282:	69 89       	ldd	r22, Y+17	; 0x11
    2284:	7a 89       	ldd	r23, Y+18	; 0x12
    2286:	8b 89       	ldd	r24, Y+19	; 0x13
    2288:	9c 89       	ldd	r25, Y+20	; 0x14
    228a:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    228e:	dc 01       	movw	r26, r24
    2290:	cb 01       	movw	r24, r22
    2292:	bc 01       	movw	r22, r24
    2294:	cd 01       	movw	r24, r26
    2296:	29 8d       	ldd	r18, Y+25	; 0x19
    2298:	3a 8d       	ldd	r19, Y+26	; 0x1a
    229a:	4b 8d       	ldd	r20, Y+27	; 0x1b
    229c:	5c 8d       	ldd	r21, Y+28	; 0x1c
    229e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    22a2:	dc 01       	movw	r26, r24
    22a4:	cb 01       	movw	r24, r22
    22a6:	f8 01       	movw	r30, r16
    22a8:	80 83       	st	Z, r24
    22aa:	91 83       	std	Z+1, r25	; 0x01
    22ac:	a2 83       	std	Z+2, r26	; 0x02
    22ae:	b3 83       	std	Z+3, r27	; 0x03
}
    22b0:	a0 96       	adiw	r28, 0x20	; 32
    22b2:	0f b6       	in	r0, 0x3f	; 63
    22b4:	f8 94       	cli
    22b6:	de bf       	out	0x3e, r29	; 62
    22b8:	0f be       	out	0x3f, r0	; 63
    22ba:	cd bf       	out	0x3d, r28	; 61
    22bc:	cf 91       	pop	r28
    22be:	df 91       	pop	r29
    22c0:	1f 91       	pop	r17
    22c2:	0f 91       	pop	r16
    22c4:	ff 90       	pop	r15
    22c6:	ef 90       	pop	r14
    22c8:	08 95       	ret

000022ca <solveThreeinThreeEquation>:

void solveThreeinThreeEquation(long double * ptr_coeffs, long double * ptr_ans){
    22ca:	cf 92       	push	r12
    22cc:	df 92       	push	r13
    22ce:	ef 92       	push	r14
    22d0:	ff 92       	push	r15
    22d2:	0f 93       	push	r16
    22d4:	1f 93       	push	r17
    22d6:	df 93       	push	r29
    22d8:	cf 93       	push	r28
    22da:	cd b7       	in	r28, 0x3d	; 61
    22dc:	de b7       	in	r29, 0x3e	; 62
    22de:	c0 55       	subi	r28, 0x50	; 80
    22e0:	d0 40       	sbci	r29, 0x00	; 0
    22e2:	0f b6       	in	r0, 0x3f	; 63
    22e4:	f8 94       	cli
    22e6:	de bf       	out	0x3e, r29	; 62
    22e8:	0f be       	out	0x3f, r0	; 63
    22ea:	cd bf       	out	0x3d, r28	; 61
    22ec:	fe 01       	movw	r30, r28
    22ee:	e3 5b       	subi	r30, 0xB3	; 179
    22f0:	ff 4f       	sbci	r31, 0xFF	; 255
    22f2:	91 83       	std	Z+1, r25	; 0x01
    22f4:	80 83       	st	Z, r24
    22f6:	fe 01       	movw	r30, r28
    22f8:	e1 5b       	subi	r30, 0xB1	; 177
    22fa:	ff 4f       	sbci	r31, 0xFF	; 255
    22fc:	71 83       	std	Z+1, r23	; 0x01
    22fe:	60 83       	st	Z, r22
	long double a1, b1, c1, d1, a2, b2, c2, d2, a3, b3, c3, d3, A1, B1, C1, A2, B2, C2, x_r;
	a1 =  ptr_coeffs[0];
    2300:	9e 01       	movw	r18, r28
    2302:	27 5b       	subi	r18, 0xB7	; 183
    2304:	3f 4f       	sbci	r19, 0xFF	; 255
    2306:	fe 01       	movw	r30, r28
    2308:	e3 5b       	subi	r30, 0xB3	; 179
    230a:	ff 4f       	sbci	r31, 0xFF	; 255
    230c:	01 90       	ld	r0, Z+
    230e:	f0 81       	ld	r31, Z
    2310:	e0 2d       	mov	r30, r0
    2312:	80 81       	ld	r24, Z
    2314:	91 81       	ldd	r25, Z+1	; 0x01
    2316:	a2 81       	ldd	r26, Z+2	; 0x02
    2318:	b3 81       	ldd	r27, Z+3	; 0x03
    231a:	f9 01       	movw	r30, r18
    231c:	80 83       	st	Z, r24
    231e:	91 83       	std	Z+1, r25	; 0x01
    2320:	a2 83       	std	Z+2, r26	; 0x02
    2322:	b3 83       	std	Z+3, r27	; 0x03
	b1 =  ptr_coeffs[1];
    2324:	fe 01       	movw	r30, r28
    2326:	e3 5b       	subi	r30, 0xB3	; 179
    2328:	ff 4f       	sbci	r31, 0xFF	; 255
    232a:	80 81       	ld	r24, Z
    232c:	91 81       	ldd	r25, Z+1	; 0x01
    232e:	fc 01       	movw	r30, r24
    2330:	34 96       	adiw	r30, 0x04	; 4
    2332:	9e 01       	movw	r18, r28
    2334:	2b 5b       	subi	r18, 0xBB	; 187
    2336:	3f 4f       	sbci	r19, 0xFF	; 255
    2338:	80 81       	ld	r24, Z
    233a:	91 81       	ldd	r25, Z+1	; 0x01
    233c:	a2 81       	ldd	r26, Z+2	; 0x02
    233e:	b3 81       	ldd	r27, Z+3	; 0x03
    2340:	f9 01       	movw	r30, r18
    2342:	80 83       	st	Z, r24
    2344:	91 83       	std	Z+1, r25	; 0x01
    2346:	a2 83       	std	Z+2, r26	; 0x02
    2348:	b3 83       	std	Z+3, r27	; 0x03
	c1 =  ptr_coeffs[2];
    234a:	fe 01       	movw	r30, r28
    234c:	e3 5b       	subi	r30, 0xB3	; 179
    234e:	ff 4f       	sbci	r31, 0xFF	; 255
    2350:	80 81       	ld	r24, Z
    2352:	91 81       	ldd	r25, Z+1	; 0x01
    2354:	fc 01       	movw	r30, r24
    2356:	38 96       	adiw	r30, 0x08	; 8
    2358:	9e 01       	movw	r18, r28
    235a:	2f 5b       	subi	r18, 0xBF	; 191
    235c:	3f 4f       	sbci	r19, 0xFF	; 255
    235e:	80 81       	ld	r24, Z
    2360:	91 81       	ldd	r25, Z+1	; 0x01
    2362:	a2 81       	ldd	r26, Z+2	; 0x02
    2364:	b3 81       	ldd	r27, Z+3	; 0x03
    2366:	f9 01       	movw	r30, r18
    2368:	80 83       	st	Z, r24
    236a:	91 83       	std	Z+1, r25	; 0x01
    236c:	a2 83       	std	Z+2, r26	; 0x02
    236e:	b3 83       	std	Z+3, r27	; 0x03
	d1 =  ptr_coeffs[3];
    2370:	fe 01       	movw	r30, r28
    2372:	e3 5b       	subi	r30, 0xB3	; 179
    2374:	ff 4f       	sbci	r31, 0xFF	; 255
    2376:	80 81       	ld	r24, Z
    2378:	91 81       	ldd	r25, Z+1	; 0x01
    237a:	fc 01       	movw	r30, r24
    237c:	3c 96       	adiw	r30, 0x0c	; 12
    237e:	80 81       	ld	r24, Z
    2380:	91 81       	ldd	r25, Z+1	; 0x01
    2382:	a2 81       	ldd	r26, Z+2	; 0x02
    2384:	b3 81       	ldd	r27, Z+3	; 0x03
    2386:	fe 01       	movw	r30, r28
    2388:	fd 96       	adiw	r30, 0x3d	; 61
    238a:	80 83       	st	Z, r24
    238c:	91 83       	std	Z+1, r25	; 0x01
    238e:	a2 83       	std	Z+2, r26	; 0x02
    2390:	b3 83       	std	Z+3, r27	; 0x03
	a2 =  ptr_coeffs[4];
    2392:	fe 01       	movw	r30, r28
    2394:	e3 5b       	subi	r30, 0xB3	; 179
    2396:	ff 4f       	sbci	r31, 0xFF	; 255
    2398:	80 81       	ld	r24, Z
    239a:	91 81       	ldd	r25, Z+1	; 0x01
    239c:	fc 01       	movw	r30, r24
    239e:	70 96       	adiw	r30, 0x10	; 16
    23a0:	80 81       	ld	r24, Z
    23a2:	91 81       	ldd	r25, Z+1	; 0x01
    23a4:	a2 81       	ldd	r26, Z+2	; 0x02
    23a6:	b3 81       	ldd	r27, Z+3	; 0x03
    23a8:	89 af       	std	Y+57, r24	; 0x39
    23aa:	9a af       	std	Y+58, r25	; 0x3a
    23ac:	ab af       	std	Y+59, r26	; 0x3b
    23ae:	bc af       	std	Y+60, r27	; 0x3c
	b2 =  ptr_coeffs[5];
    23b0:	fe 01       	movw	r30, r28
    23b2:	e3 5b       	subi	r30, 0xB3	; 179
    23b4:	ff 4f       	sbci	r31, 0xFF	; 255
    23b6:	80 81       	ld	r24, Z
    23b8:	91 81       	ldd	r25, Z+1	; 0x01
    23ba:	fc 01       	movw	r30, r24
    23bc:	74 96       	adiw	r30, 0x14	; 20
    23be:	80 81       	ld	r24, Z
    23c0:	91 81       	ldd	r25, Z+1	; 0x01
    23c2:	a2 81       	ldd	r26, Z+2	; 0x02
    23c4:	b3 81       	ldd	r27, Z+3	; 0x03
    23c6:	8d ab       	std	Y+53, r24	; 0x35
    23c8:	9e ab       	std	Y+54, r25	; 0x36
    23ca:	af ab       	std	Y+55, r26	; 0x37
    23cc:	b8 af       	std	Y+56, r27	; 0x38
	c2 =  ptr_coeffs[6];
    23ce:	fe 01       	movw	r30, r28
    23d0:	e3 5b       	subi	r30, 0xB3	; 179
    23d2:	ff 4f       	sbci	r31, 0xFF	; 255
    23d4:	80 81       	ld	r24, Z
    23d6:	91 81       	ldd	r25, Z+1	; 0x01
    23d8:	fc 01       	movw	r30, r24
    23da:	78 96       	adiw	r30, 0x18	; 24
    23dc:	80 81       	ld	r24, Z
    23de:	91 81       	ldd	r25, Z+1	; 0x01
    23e0:	a2 81       	ldd	r26, Z+2	; 0x02
    23e2:	b3 81       	ldd	r27, Z+3	; 0x03
    23e4:	89 ab       	std	Y+49, r24	; 0x31
    23e6:	9a ab       	std	Y+50, r25	; 0x32
    23e8:	ab ab       	std	Y+51, r26	; 0x33
    23ea:	bc ab       	std	Y+52, r27	; 0x34
	d2 =  ptr_coeffs[7];
    23ec:	fe 01       	movw	r30, r28
    23ee:	e3 5b       	subi	r30, 0xB3	; 179
    23f0:	ff 4f       	sbci	r31, 0xFF	; 255
    23f2:	80 81       	ld	r24, Z
    23f4:	91 81       	ldd	r25, Z+1	; 0x01
    23f6:	fc 01       	movw	r30, r24
    23f8:	7c 96       	adiw	r30, 0x1c	; 28
    23fa:	80 81       	ld	r24, Z
    23fc:	91 81       	ldd	r25, Z+1	; 0x01
    23fe:	a2 81       	ldd	r26, Z+2	; 0x02
    2400:	b3 81       	ldd	r27, Z+3	; 0x03
    2402:	8d a7       	std	Y+45, r24	; 0x2d
    2404:	9e a7       	std	Y+46, r25	; 0x2e
    2406:	af a7       	std	Y+47, r26	; 0x2f
    2408:	b8 ab       	std	Y+48, r27	; 0x30
	a3 =  ptr_coeffs[8];
    240a:	fe 01       	movw	r30, r28
    240c:	e3 5b       	subi	r30, 0xB3	; 179
    240e:	ff 4f       	sbci	r31, 0xFF	; 255
    2410:	80 81       	ld	r24, Z
    2412:	91 81       	ldd	r25, Z+1	; 0x01
    2414:	fc 01       	movw	r30, r24
    2416:	b0 96       	adiw	r30, 0x20	; 32
    2418:	80 81       	ld	r24, Z
    241a:	91 81       	ldd	r25, Z+1	; 0x01
    241c:	a2 81       	ldd	r26, Z+2	; 0x02
    241e:	b3 81       	ldd	r27, Z+3	; 0x03
    2420:	89 a7       	std	Y+41, r24	; 0x29
    2422:	9a a7       	std	Y+42, r25	; 0x2a
    2424:	ab a7       	std	Y+43, r26	; 0x2b
    2426:	bc a7       	std	Y+44, r27	; 0x2c
	b3 =  ptr_coeffs[9];
    2428:	fe 01       	movw	r30, r28
    242a:	e3 5b       	subi	r30, 0xB3	; 179
    242c:	ff 4f       	sbci	r31, 0xFF	; 255
    242e:	80 81       	ld	r24, Z
    2430:	91 81       	ldd	r25, Z+1	; 0x01
    2432:	fc 01       	movw	r30, r24
    2434:	b4 96       	adiw	r30, 0x24	; 36
    2436:	80 81       	ld	r24, Z
    2438:	91 81       	ldd	r25, Z+1	; 0x01
    243a:	a2 81       	ldd	r26, Z+2	; 0x02
    243c:	b3 81       	ldd	r27, Z+3	; 0x03
    243e:	8d a3       	std	Y+37, r24	; 0x25
    2440:	9e a3       	std	Y+38, r25	; 0x26
    2442:	af a3       	std	Y+39, r26	; 0x27
    2444:	b8 a7       	std	Y+40, r27	; 0x28
	c3 =  ptr_coeffs[10];
    2446:	fe 01       	movw	r30, r28
    2448:	e3 5b       	subi	r30, 0xB3	; 179
    244a:	ff 4f       	sbci	r31, 0xFF	; 255
    244c:	80 81       	ld	r24, Z
    244e:	91 81       	ldd	r25, Z+1	; 0x01
    2450:	fc 01       	movw	r30, r24
    2452:	b8 96       	adiw	r30, 0x28	; 40
    2454:	80 81       	ld	r24, Z
    2456:	91 81       	ldd	r25, Z+1	; 0x01
    2458:	a2 81       	ldd	r26, Z+2	; 0x02
    245a:	b3 81       	ldd	r27, Z+3	; 0x03
    245c:	89 a3       	std	Y+33, r24	; 0x21
    245e:	9a a3       	std	Y+34, r25	; 0x22
    2460:	ab a3       	std	Y+35, r26	; 0x23
    2462:	bc a3       	std	Y+36, r27	; 0x24
	d3 =  ptr_coeffs[11];
    2464:	fe 01       	movw	r30, r28
    2466:	e3 5b       	subi	r30, 0xB3	; 179
    2468:	ff 4f       	sbci	r31, 0xFF	; 255
    246a:	80 81       	ld	r24, Z
    246c:	91 81       	ldd	r25, Z+1	; 0x01
    246e:	fc 01       	movw	r30, r24
    2470:	bc 96       	adiw	r30, 0x2c	; 44
    2472:	80 81       	ld	r24, Z
    2474:	91 81       	ldd	r25, Z+1	; 0x01
    2476:	a2 81       	ldd	r26, Z+2	; 0x02
    2478:	b3 81       	ldd	r27, Z+3	; 0x03
    247a:	8d 8f       	std	Y+29, r24	; 0x1d
    247c:	9e 8f       	std	Y+30, r25	; 0x1e
    247e:	af 8f       	std	Y+31, r26	; 0x1f
    2480:	b8 a3       	std	Y+32, r27	; 0x20

	A1 = b1 - b2 * (a1 / a2);
    2482:	fe 01       	movw	r30, r28
    2484:	e7 5b       	subi	r30, 0xB7	; 183
    2486:	ff 4f       	sbci	r31, 0xFF	; 255
    2488:	60 81       	ld	r22, Z
    248a:	71 81       	ldd	r23, Z+1	; 0x01
    248c:	82 81       	ldd	r24, Z+2	; 0x02
    248e:	93 81       	ldd	r25, Z+3	; 0x03
    2490:	29 ad       	ldd	r18, Y+57	; 0x39
    2492:	3a ad       	ldd	r19, Y+58	; 0x3a
    2494:	4b ad       	ldd	r20, Y+59	; 0x3b
    2496:	5c ad       	ldd	r21, Y+60	; 0x3c
    2498:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    249c:	dc 01       	movw	r26, r24
    249e:	cb 01       	movw	r24, r22
    24a0:	bc 01       	movw	r22, r24
    24a2:	cd 01       	movw	r24, r26
    24a4:	2d a9       	ldd	r18, Y+53	; 0x35
    24a6:	3e a9       	ldd	r19, Y+54	; 0x36
    24a8:	4f a9       	ldd	r20, Y+55	; 0x37
    24aa:	58 ad       	ldd	r21, Y+56	; 0x38
    24ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b0:	dc 01       	movw	r26, r24
    24b2:	cb 01       	movw	r24, r22
    24b4:	9c 01       	movw	r18, r24
    24b6:	ad 01       	movw	r20, r26
    24b8:	fe 01       	movw	r30, r28
    24ba:	eb 5b       	subi	r30, 0xBB	; 187
    24bc:	ff 4f       	sbci	r31, 0xFF	; 255
    24be:	60 81       	ld	r22, Z
    24c0:	71 81       	ldd	r23, Z+1	; 0x01
    24c2:	82 81       	ldd	r24, Z+2	; 0x02
    24c4:	93 81       	ldd	r25, Z+3	; 0x03
    24c6:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    24ca:	dc 01       	movw	r26, r24
    24cc:	cb 01       	movw	r24, r22
    24ce:	89 8f       	std	Y+25, r24	; 0x19
    24d0:	9a 8f       	std	Y+26, r25	; 0x1a
    24d2:	ab 8f       	std	Y+27, r26	; 0x1b
    24d4:	bc 8f       	std	Y+28, r27	; 0x1c
	B1 = c1 - c2 * (a1 / a2);
    24d6:	fe 01       	movw	r30, r28
    24d8:	e7 5b       	subi	r30, 0xB7	; 183
    24da:	ff 4f       	sbci	r31, 0xFF	; 255
    24dc:	60 81       	ld	r22, Z
    24de:	71 81       	ldd	r23, Z+1	; 0x01
    24e0:	82 81       	ldd	r24, Z+2	; 0x02
    24e2:	93 81       	ldd	r25, Z+3	; 0x03
    24e4:	29 ad       	ldd	r18, Y+57	; 0x39
    24e6:	3a ad       	ldd	r19, Y+58	; 0x3a
    24e8:	4b ad       	ldd	r20, Y+59	; 0x3b
    24ea:	5c ad       	ldd	r21, Y+60	; 0x3c
    24ec:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    24f0:	dc 01       	movw	r26, r24
    24f2:	cb 01       	movw	r24, r22
    24f4:	bc 01       	movw	r22, r24
    24f6:	cd 01       	movw	r24, r26
    24f8:	29 a9       	ldd	r18, Y+49	; 0x31
    24fa:	3a a9       	ldd	r19, Y+50	; 0x32
    24fc:	4b a9       	ldd	r20, Y+51	; 0x33
    24fe:	5c a9       	ldd	r21, Y+52	; 0x34
    2500:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2504:	dc 01       	movw	r26, r24
    2506:	cb 01       	movw	r24, r22
    2508:	9c 01       	movw	r18, r24
    250a:	ad 01       	movw	r20, r26
    250c:	fe 01       	movw	r30, r28
    250e:	ef 5b       	subi	r30, 0xBF	; 191
    2510:	ff 4f       	sbci	r31, 0xFF	; 255
    2512:	60 81       	ld	r22, Z
    2514:	71 81       	ldd	r23, Z+1	; 0x01
    2516:	82 81       	ldd	r24, Z+2	; 0x02
    2518:	93 81       	ldd	r25, Z+3	; 0x03
    251a:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    251e:	dc 01       	movw	r26, r24
    2520:	cb 01       	movw	r24, r22
    2522:	8d 8b       	std	Y+21, r24	; 0x15
    2524:	9e 8b       	std	Y+22, r25	; 0x16
    2526:	af 8b       	std	Y+23, r26	; 0x17
    2528:	b8 8f       	std	Y+24, r27	; 0x18
	C1 = d1 - d2 * (a1 / a2);
    252a:	fe 01       	movw	r30, r28
    252c:	e7 5b       	subi	r30, 0xB7	; 183
    252e:	ff 4f       	sbci	r31, 0xFF	; 255
    2530:	60 81       	ld	r22, Z
    2532:	71 81       	ldd	r23, Z+1	; 0x01
    2534:	82 81       	ldd	r24, Z+2	; 0x02
    2536:	93 81       	ldd	r25, Z+3	; 0x03
    2538:	29 ad       	ldd	r18, Y+57	; 0x39
    253a:	3a ad       	ldd	r19, Y+58	; 0x3a
    253c:	4b ad       	ldd	r20, Y+59	; 0x3b
    253e:	5c ad       	ldd	r21, Y+60	; 0x3c
    2540:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2544:	dc 01       	movw	r26, r24
    2546:	cb 01       	movw	r24, r22
    2548:	bc 01       	movw	r22, r24
    254a:	cd 01       	movw	r24, r26
    254c:	2d a5       	ldd	r18, Y+45	; 0x2d
    254e:	3e a5       	ldd	r19, Y+46	; 0x2e
    2550:	4f a5       	ldd	r20, Y+47	; 0x2f
    2552:	58 a9       	ldd	r21, Y+48	; 0x30
    2554:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2558:	dc 01       	movw	r26, r24
    255a:	cb 01       	movw	r24, r22
    255c:	9c 01       	movw	r18, r24
    255e:	ad 01       	movw	r20, r26
    2560:	fe 01       	movw	r30, r28
    2562:	fd 96       	adiw	r30, 0x3d	; 61
    2564:	60 81       	ld	r22, Z
    2566:	71 81       	ldd	r23, Z+1	; 0x01
    2568:	82 81       	ldd	r24, Z+2	; 0x02
    256a:	93 81       	ldd	r25, Z+3	; 0x03
    256c:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2570:	dc 01       	movw	r26, r24
    2572:	cb 01       	movw	r24, r22
    2574:	89 8b       	std	Y+17, r24	; 0x11
    2576:	9a 8b       	std	Y+18, r25	; 0x12
    2578:	ab 8b       	std	Y+19, r26	; 0x13
    257a:	bc 8b       	std	Y+20, r27	; 0x14

	A2 = b2 - b3 * (a2 / a3);
    257c:	69 ad       	ldd	r22, Y+57	; 0x39
    257e:	7a ad       	ldd	r23, Y+58	; 0x3a
    2580:	8b ad       	ldd	r24, Y+59	; 0x3b
    2582:	9c ad       	ldd	r25, Y+60	; 0x3c
    2584:	29 a5       	ldd	r18, Y+41	; 0x29
    2586:	3a a5       	ldd	r19, Y+42	; 0x2a
    2588:	4b a5       	ldd	r20, Y+43	; 0x2b
    258a:	5c a5       	ldd	r21, Y+44	; 0x2c
    258c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2590:	dc 01       	movw	r26, r24
    2592:	cb 01       	movw	r24, r22
    2594:	bc 01       	movw	r22, r24
    2596:	cd 01       	movw	r24, r26
    2598:	2d a1       	ldd	r18, Y+37	; 0x25
    259a:	3e a1       	ldd	r19, Y+38	; 0x26
    259c:	4f a1       	ldd	r20, Y+39	; 0x27
    259e:	58 a5       	ldd	r21, Y+40	; 0x28
    25a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a4:	dc 01       	movw	r26, r24
    25a6:	cb 01       	movw	r24, r22
    25a8:	9c 01       	movw	r18, r24
    25aa:	ad 01       	movw	r20, r26
    25ac:	6d a9       	ldd	r22, Y+53	; 0x35
    25ae:	7e a9       	ldd	r23, Y+54	; 0x36
    25b0:	8f a9       	ldd	r24, Y+55	; 0x37
    25b2:	98 ad       	ldd	r25, Y+56	; 0x38
    25b4:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    25b8:	dc 01       	movw	r26, r24
    25ba:	cb 01       	movw	r24, r22
    25bc:	8d 87       	std	Y+13, r24	; 0x0d
    25be:	9e 87       	std	Y+14, r25	; 0x0e
    25c0:	af 87       	std	Y+15, r26	; 0x0f
    25c2:	b8 8b       	std	Y+16, r27	; 0x10
	B2 = c2 - c3 * (a2 / a3);
    25c4:	69 ad       	ldd	r22, Y+57	; 0x39
    25c6:	7a ad       	ldd	r23, Y+58	; 0x3a
    25c8:	8b ad       	ldd	r24, Y+59	; 0x3b
    25ca:	9c ad       	ldd	r25, Y+60	; 0x3c
    25cc:	29 a5       	ldd	r18, Y+41	; 0x29
    25ce:	3a a5       	ldd	r19, Y+42	; 0x2a
    25d0:	4b a5       	ldd	r20, Y+43	; 0x2b
    25d2:	5c a5       	ldd	r21, Y+44	; 0x2c
    25d4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    25d8:	dc 01       	movw	r26, r24
    25da:	cb 01       	movw	r24, r22
    25dc:	bc 01       	movw	r22, r24
    25de:	cd 01       	movw	r24, r26
    25e0:	29 a1       	ldd	r18, Y+33	; 0x21
    25e2:	3a a1       	ldd	r19, Y+34	; 0x22
    25e4:	4b a1       	ldd	r20, Y+35	; 0x23
    25e6:	5c a1       	ldd	r21, Y+36	; 0x24
    25e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ec:	dc 01       	movw	r26, r24
    25ee:	cb 01       	movw	r24, r22
    25f0:	9c 01       	movw	r18, r24
    25f2:	ad 01       	movw	r20, r26
    25f4:	69 a9       	ldd	r22, Y+49	; 0x31
    25f6:	7a a9       	ldd	r23, Y+50	; 0x32
    25f8:	8b a9       	ldd	r24, Y+51	; 0x33
    25fa:	9c a9       	ldd	r25, Y+52	; 0x34
    25fc:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2600:	dc 01       	movw	r26, r24
    2602:	cb 01       	movw	r24, r22
    2604:	89 87       	std	Y+9, r24	; 0x09
    2606:	9a 87       	std	Y+10, r25	; 0x0a
    2608:	ab 87       	std	Y+11, r26	; 0x0b
    260a:	bc 87       	std	Y+12, r27	; 0x0c
	C2 = d2 - d3 * (a2 / a3);
    260c:	69 ad       	ldd	r22, Y+57	; 0x39
    260e:	7a ad       	ldd	r23, Y+58	; 0x3a
    2610:	8b ad       	ldd	r24, Y+59	; 0x3b
    2612:	9c ad       	ldd	r25, Y+60	; 0x3c
    2614:	29 a5       	ldd	r18, Y+41	; 0x29
    2616:	3a a5       	ldd	r19, Y+42	; 0x2a
    2618:	4b a5       	ldd	r20, Y+43	; 0x2b
    261a:	5c a5       	ldd	r21, Y+44	; 0x2c
    261c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2620:	dc 01       	movw	r26, r24
    2622:	cb 01       	movw	r24, r22
    2624:	bc 01       	movw	r22, r24
    2626:	cd 01       	movw	r24, r26
    2628:	2d 8d       	ldd	r18, Y+29	; 0x1d
    262a:	3e 8d       	ldd	r19, Y+30	; 0x1e
    262c:	4f 8d       	ldd	r20, Y+31	; 0x1f
    262e:	58 a1       	ldd	r21, Y+32	; 0x20
    2630:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2634:	dc 01       	movw	r26, r24
    2636:	cb 01       	movw	r24, r22
    2638:	9c 01       	movw	r18, r24
    263a:	ad 01       	movw	r20, r26
    263c:	6d a5       	ldd	r22, Y+45	; 0x2d
    263e:	7e a5       	ldd	r23, Y+46	; 0x2e
    2640:	8f a5       	ldd	r24, Y+47	; 0x2f
    2642:	98 a9       	ldd	r25, Y+48	; 0x30
    2644:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2648:	dc 01       	movw	r26, r24
    264a:	cb 01       	movw	r24, r22
    264c:	8d 83       	std	Y+5, r24	; 0x05
    264e:	9e 83       	std	Y+6, r25	; 0x06
    2650:	af 83       	std	Y+7, r26	; 0x07
    2652:	b8 87       	std	Y+8, r27	; 0x08

	x_r = A1 / A2;
    2654:	69 8d       	ldd	r22, Y+25	; 0x19
    2656:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2658:	8b 8d       	ldd	r24, Y+27	; 0x1b
    265a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    265c:	2d 85       	ldd	r18, Y+13	; 0x0d
    265e:	3e 85       	ldd	r19, Y+14	; 0x0e
    2660:	4f 85       	ldd	r20, Y+15	; 0x0f
    2662:	58 89       	ldd	r21, Y+16	; 0x10
    2664:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2668:	dc 01       	movw	r26, r24
    266a:	cb 01       	movw	r24, r22
    266c:	89 83       	std	Y+1, r24	; 0x01
    266e:	9a 83       	std	Y+2, r25	; 0x02
    2670:	ab 83       	std	Y+3, r26	; 0x03
    2672:	bc 83       	std	Y+4, r27	; 0x04

	ptr_ans[2] = (C1 - x_r * C2) / (B1 - x_r * B2);
    2674:	fe 01       	movw	r30, r28
    2676:	e1 5b       	subi	r30, 0xB1	; 177
    2678:	ff 4f       	sbci	r31, 0xFF	; 255
    267a:	80 81       	ld	r24, Z
    267c:	91 81       	ldd	r25, Z+1	; 0x01
    267e:	cc 24       	eor	r12, r12
    2680:	dd 24       	eor	r13, r13
    2682:	68 94       	set
    2684:	c3 f8       	bld	r12, 3
    2686:	c8 0e       	add	r12, r24
    2688:	d9 1e       	adc	r13, r25
    268a:	69 81       	ldd	r22, Y+1	; 0x01
    268c:	7a 81       	ldd	r23, Y+2	; 0x02
    268e:	8b 81       	ldd	r24, Y+3	; 0x03
    2690:	9c 81       	ldd	r25, Y+4	; 0x04
    2692:	2d 81       	ldd	r18, Y+5	; 0x05
    2694:	3e 81       	ldd	r19, Y+6	; 0x06
    2696:	4f 81       	ldd	r20, Y+7	; 0x07
    2698:	58 85       	ldd	r21, Y+8	; 0x08
    269a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    269e:	dc 01       	movw	r26, r24
    26a0:	cb 01       	movw	r24, r22
    26a2:	9c 01       	movw	r18, r24
    26a4:	ad 01       	movw	r20, r26
    26a6:	69 89       	ldd	r22, Y+17	; 0x11
    26a8:	7a 89       	ldd	r23, Y+18	; 0x12
    26aa:	8b 89       	ldd	r24, Y+19	; 0x13
    26ac:	9c 89       	ldd	r25, Y+20	; 0x14
    26ae:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    26b2:	dc 01       	movw	r26, r24
    26b4:	cb 01       	movw	r24, r22
    26b6:	7c 01       	movw	r14, r24
    26b8:	8d 01       	movw	r16, r26
    26ba:	69 81       	ldd	r22, Y+1	; 0x01
    26bc:	7a 81       	ldd	r23, Y+2	; 0x02
    26be:	8b 81       	ldd	r24, Y+3	; 0x03
    26c0:	9c 81       	ldd	r25, Y+4	; 0x04
    26c2:	29 85       	ldd	r18, Y+9	; 0x09
    26c4:	3a 85       	ldd	r19, Y+10	; 0x0a
    26c6:	4b 85       	ldd	r20, Y+11	; 0x0b
    26c8:	5c 85       	ldd	r21, Y+12	; 0x0c
    26ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ce:	dc 01       	movw	r26, r24
    26d0:	cb 01       	movw	r24, r22
    26d2:	9c 01       	movw	r18, r24
    26d4:	ad 01       	movw	r20, r26
    26d6:	6d 89       	ldd	r22, Y+21	; 0x15
    26d8:	7e 89       	ldd	r23, Y+22	; 0x16
    26da:	8f 89       	ldd	r24, Y+23	; 0x17
    26dc:	98 8d       	ldd	r25, Y+24	; 0x18
    26de:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    26e2:	dc 01       	movw	r26, r24
    26e4:	cb 01       	movw	r24, r22
    26e6:	9c 01       	movw	r18, r24
    26e8:	ad 01       	movw	r20, r26
    26ea:	c8 01       	movw	r24, r16
    26ec:	b7 01       	movw	r22, r14
    26ee:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    26f2:	dc 01       	movw	r26, r24
    26f4:	cb 01       	movw	r24, r22
    26f6:	f6 01       	movw	r30, r12
    26f8:	80 83       	st	Z, r24
    26fa:	91 83       	std	Z+1, r25	; 0x01
    26fc:	a2 83       	std	Z+2, r26	; 0x02
    26fe:	b3 83       	std	Z+3, r27	; 0x03
	ptr_ans[1] = (C1 - B1 * ptr_ans[2]) / A1;
    2700:	fe 01       	movw	r30, r28
    2702:	e1 5b       	subi	r30, 0xB1	; 177
    2704:	ff 4f       	sbci	r31, 0xFF	; 255
    2706:	80 81       	ld	r24, Z
    2708:	91 81       	ldd	r25, Z+1	; 0x01
    270a:	8c 01       	movw	r16, r24
    270c:	0c 5f       	subi	r16, 0xFC	; 252
    270e:	1f 4f       	sbci	r17, 0xFF	; 255
    2710:	fe 01       	movw	r30, r28
    2712:	e1 5b       	subi	r30, 0xB1	; 177
    2714:	ff 4f       	sbci	r31, 0xFF	; 255
    2716:	80 81       	ld	r24, Z
    2718:	91 81       	ldd	r25, Z+1	; 0x01
    271a:	fc 01       	movw	r30, r24
    271c:	38 96       	adiw	r30, 0x08	; 8
    271e:	80 81       	ld	r24, Z
    2720:	91 81       	ldd	r25, Z+1	; 0x01
    2722:	a2 81       	ldd	r26, Z+2	; 0x02
    2724:	b3 81       	ldd	r27, Z+3	; 0x03
    2726:	bc 01       	movw	r22, r24
    2728:	cd 01       	movw	r24, r26
    272a:	2d 89       	ldd	r18, Y+21	; 0x15
    272c:	3e 89       	ldd	r19, Y+22	; 0x16
    272e:	4f 89       	ldd	r20, Y+23	; 0x17
    2730:	58 8d       	ldd	r21, Y+24	; 0x18
    2732:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2736:	dc 01       	movw	r26, r24
    2738:	cb 01       	movw	r24, r22
    273a:	9c 01       	movw	r18, r24
    273c:	ad 01       	movw	r20, r26
    273e:	69 89       	ldd	r22, Y+17	; 0x11
    2740:	7a 89       	ldd	r23, Y+18	; 0x12
    2742:	8b 89       	ldd	r24, Y+19	; 0x13
    2744:	9c 89       	ldd	r25, Y+20	; 0x14
    2746:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    274a:	dc 01       	movw	r26, r24
    274c:	cb 01       	movw	r24, r22
    274e:	bc 01       	movw	r22, r24
    2750:	cd 01       	movw	r24, r26
    2752:	29 8d       	ldd	r18, Y+25	; 0x19
    2754:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2756:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2758:	5c 8d       	ldd	r21, Y+28	; 0x1c
    275a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    275e:	dc 01       	movw	r26, r24
    2760:	cb 01       	movw	r24, r22
    2762:	f8 01       	movw	r30, r16
    2764:	80 83       	st	Z, r24
    2766:	91 83       	std	Z+1, r25	; 0x01
    2768:	a2 83       	std	Z+2, r26	; 0x02
    276a:	b3 83       	std	Z+3, r27	; 0x03
	ptr_ans[0] = (d1 - b1 * ptr_ans[1] - c1 * ptr_ans[2]) / a1;
    276c:	fe 01       	movw	r30, r28
    276e:	e1 5b       	subi	r30, 0xB1	; 177
    2770:	ff 4f       	sbci	r31, 0xFF	; 255
    2772:	80 81       	ld	r24, Z
    2774:	91 81       	ldd	r25, Z+1	; 0x01
    2776:	fc 01       	movw	r30, r24
    2778:	34 96       	adiw	r30, 0x04	; 4
    277a:	80 81       	ld	r24, Z
    277c:	91 81       	ldd	r25, Z+1	; 0x01
    277e:	a2 81       	ldd	r26, Z+2	; 0x02
    2780:	b3 81       	ldd	r27, Z+3	; 0x03
    2782:	fe 01       	movw	r30, r28
    2784:	eb 5b       	subi	r30, 0xBB	; 187
    2786:	ff 4f       	sbci	r31, 0xFF	; 255
    2788:	bc 01       	movw	r22, r24
    278a:	cd 01       	movw	r24, r26
    278c:	20 81       	ld	r18, Z
    278e:	31 81       	ldd	r19, Z+1	; 0x01
    2790:	42 81       	ldd	r20, Z+2	; 0x02
    2792:	53 81       	ldd	r21, Z+3	; 0x03
    2794:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2798:	dc 01       	movw	r26, r24
    279a:	cb 01       	movw	r24, r22
    279c:	9c 01       	movw	r18, r24
    279e:	ad 01       	movw	r20, r26
    27a0:	fe 01       	movw	r30, r28
    27a2:	fd 96       	adiw	r30, 0x3d	; 61
    27a4:	60 81       	ld	r22, Z
    27a6:	71 81       	ldd	r23, Z+1	; 0x01
    27a8:	82 81       	ldd	r24, Z+2	; 0x02
    27aa:	93 81       	ldd	r25, Z+3	; 0x03
    27ac:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    27b0:	dc 01       	movw	r26, r24
    27b2:	cb 01       	movw	r24, r22
    27b4:	7c 01       	movw	r14, r24
    27b6:	8d 01       	movw	r16, r26
    27b8:	fe 01       	movw	r30, r28
    27ba:	e1 5b       	subi	r30, 0xB1	; 177
    27bc:	ff 4f       	sbci	r31, 0xFF	; 255
    27be:	80 81       	ld	r24, Z
    27c0:	91 81       	ldd	r25, Z+1	; 0x01
    27c2:	fc 01       	movw	r30, r24
    27c4:	38 96       	adiw	r30, 0x08	; 8
    27c6:	80 81       	ld	r24, Z
    27c8:	91 81       	ldd	r25, Z+1	; 0x01
    27ca:	a2 81       	ldd	r26, Z+2	; 0x02
    27cc:	b3 81       	ldd	r27, Z+3	; 0x03
    27ce:	fe 01       	movw	r30, r28
    27d0:	ef 5b       	subi	r30, 0xBF	; 191
    27d2:	ff 4f       	sbci	r31, 0xFF	; 255
    27d4:	bc 01       	movw	r22, r24
    27d6:	cd 01       	movw	r24, r26
    27d8:	20 81       	ld	r18, Z
    27da:	31 81       	ldd	r19, Z+1	; 0x01
    27dc:	42 81       	ldd	r20, Z+2	; 0x02
    27de:	53 81       	ldd	r21, Z+3	; 0x03
    27e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e4:	dc 01       	movw	r26, r24
    27e6:	cb 01       	movw	r24, r22
    27e8:	9c 01       	movw	r18, r24
    27ea:	ad 01       	movw	r20, r26
    27ec:	c8 01       	movw	r24, r16
    27ee:	b7 01       	movw	r22, r14
    27f0:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    27f4:	dc 01       	movw	r26, r24
    27f6:	cb 01       	movw	r24, r22
    27f8:	fe 01       	movw	r30, r28
    27fa:	e7 5b       	subi	r30, 0xB7	; 183
    27fc:	ff 4f       	sbci	r31, 0xFF	; 255
    27fe:	bc 01       	movw	r22, r24
    2800:	cd 01       	movw	r24, r26
    2802:	20 81       	ld	r18, Z
    2804:	31 81       	ldd	r19, Z+1	; 0x01
    2806:	42 81       	ldd	r20, Z+2	; 0x02
    2808:	53 81       	ldd	r21, Z+3	; 0x03
    280a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    280e:	dc 01       	movw	r26, r24
    2810:	cb 01       	movw	r24, r22
    2812:	fe 01       	movw	r30, r28
    2814:	e1 5b       	subi	r30, 0xB1	; 177
    2816:	ff 4f       	sbci	r31, 0xFF	; 255
    2818:	01 90       	ld	r0, Z+
    281a:	f0 81       	ld	r31, Z
    281c:	e0 2d       	mov	r30, r0
    281e:	80 83       	st	Z, r24
    2820:	91 83       	std	Z+1, r25	; 0x01
    2822:	a2 83       	std	Z+2, r26	; 0x02
    2824:	b3 83       	std	Z+3, r27	; 0x03
}
    2826:	c0 5b       	subi	r28, 0xB0	; 176
    2828:	df 4f       	sbci	r29, 0xFF	; 255
    282a:	0f b6       	in	r0, 0x3f	; 63
    282c:	f8 94       	cli
    282e:	de bf       	out	0x3e, r29	; 62
    2830:	0f be       	out	0x3f, r0	; 63
    2832:	cd bf       	out	0x3d, r28	; 61
    2834:	cf 91       	pop	r28
    2836:	df 91       	pop	r29
    2838:	1f 91       	pop	r17
    283a:	0f 91       	pop	r16
    283c:	ff 90       	pop	r15
    283e:	ef 90       	pop	r14
    2840:	df 90       	pop	r13
    2842:	cf 90       	pop	r12
    2844:	08 95       	ret

00002846 <getMatrixData>:

void getMatrixData(){
    2846:	df 93       	push	r29
    2848:	cf 93       	push	r28
    284a:	cd b7       	in	r28, 0x3d	; 61
    284c:	de b7       	in	r29, 0x3e	; 62
    284e:	63 97       	sbiw	r28, 0x13	; 19
    2850:	0f b6       	in	r0, 0x3f	; 63
    2852:	f8 94       	cli
    2854:	de bf       	out	0x3e, r29	; 62
    2856:	0f be       	out	0x3f, r0	; 63
    2858:	cd bf       	out	0x3d, r28	; 61
	uint8 key, rows, cols;

	LCD_clearScreen();
    285a:	0e 94 07 20 	call	0x400e	; 0x400e <LCD_clearScreen>
	LCD_displayString("1:MatrixA");
    285e:	8d e5       	ldi	r24, 0x5D	; 93
    2860:	91 e0       	ldi	r25, 0x01	; 1
    2862:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <LCD_displayString>
	LCD_moveCursor(1,0);
    2866:	81 e0       	ldi	r24, 0x01	; 1
    2868:	60 e0       	ldi	r22, 0x00	; 0
    286a:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <LCD_moveCursor>
	LCD_displayString("2:MatrixB");
    286e:	87 e6       	ldi	r24, 0x67	; 103
    2870:	91 e0       	ldi	r25, 0x01	; 1
    2872:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <LCD_displayString>
	LCD_moveCursor(2,0);
    2876:	82 e0       	ldi	r24, 0x02	; 2
    2878:	60 e0       	ldi	r22, 0x00	; 0
    287a:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <LCD_moveCursor>
	LCD_displayString("3:MatrixC");
    287e:	81 e7       	ldi	r24, 0x71	; 113
    2880:	91 e0       	ldi	r25, 0x01	; 1
    2882:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <LCD_displayString>
	LCD_moveCursor(3,0);
    2886:	83 e0       	ldi	r24, 0x03	; 3
    2888:	60 e0       	ldi	r22, 0x00	; 0
    288a:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <LCD_moveCursor>
	LCD_displayString("4:MatrixD");
    288e:	8b e7       	ldi	r24, 0x7B	; 123
    2890:	91 e0       	ldi	r25, 0x01	; 1
    2892:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <LCD_displayString>
	key = Keypad_getNumInReg(1, 4);
    2896:	81 e0       	ldi	r24, 0x01	; 1
    2898:	64 e0       	ldi	r22, 0x04	; 4
    289a:	0e 94 7b 07 	call	0xef6	; 0xef6 <Keypad_getNumInReg>
    289e:	89 8b       	std	Y+17, r24	; 0x11

	LCD_clearScreen();
    28a0:	0e 94 07 20 	call	0x400e	; 0x400e <LCD_clearScreen>
	LCD_displayString("Enter Size !");
    28a4:	85 e8       	ldi	r24, 0x85	; 133
    28a6:	91 e0       	ldi	r25, 0x01	; 1
    28a8:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <LCD_displayString>
	LCD_moveCursor(1, 0);
    28ac:	81 e0       	ldi	r24, 0x01	; 1
    28ae:	60 e0       	ldi	r22, 0x00	; 0
    28b0:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <LCD_moveCursor>
	LCD_displayString("Rows:");
    28b4:	82 e9       	ldi	r24, 0x92	; 146
    28b6:	91 e0       	ldi	r25, 0x01	; 1
    28b8:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <LCD_displayString>
	rows = Keypad_getNumInReg(1, 3);
    28bc:	81 e0       	ldi	r24, 0x01	; 1
    28be:	63 e0       	ldi	r22, 0x03	; 3
    28c0:	0e 94 7b 07 	call	0xef6	; 0xef6 <Keypad_getNumInReg>
    28c4:	88 8b       	std	Y+16, r24	; 0x10
	LCD_intgerToString(rows);
    28c6:	88 89       	ldd	r24, Y+16	; 0x10
    28c8:	88 2f       	mov	r24, r24
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <LCD_intgerToString>
	LCD_moveCursor(2, 0);
    28d0:	82 e0       	ldi	r24, 0x02	; 2
    28d2:	60 e0       	ldi	r22, 0x00	; 0
    28d4:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <LCD_moveCursor>
	LCD_displayString("Columns:");
    28d8:	88 e9       	ldi	r24, 0x98	; 152
    28da:	91 e0       	ldi	r25, 0x01	; 1
    28dc:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <LCD_displayString>
	cols = Keypad_getNumInReg(1, 3);
    28e0:	81 e0       	ldi	r24, 0x01	; 1
    28e2:	63 e0       	ldi	r22, 0x03	; 3
    28e4:	0e 94 7b 07 	call	0xef6	; 0xef6 <Keypad_getNumInReg>
    28e8:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_intgerToString(cols);
    28ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    28ec:	88 2f       	mov	r24, r24
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <LCD_intgerToString>
    28f4:	80 e0       	ldi	r24, 0x00	; 0
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	a8 ec       	ldi	r26, 0xC8	; 200
    28fa:	b2 e4       	ldi	r27, 0x42	; 66
    28fc:	8b 87       	std	Y+11, r24	; 0x0b
    28fe:	9c 87       	std	Y+12, r25	; 0x0c
    2900:	ad 87       	std	Y+13, r26	; 0x0d
    2902:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2904:	6b 85       	ldd	r22, Y+11	; 0x0b
    2906:	7c 85       	ldd	r23, Y+12	; 0x0c
    2908:	8d 85       	ldd	r24, Y+13	; 0x0d
    290a:	9e 85       	ldd	r25, Y+14	; 0x0e
    290c:	20 e0       	ldi	r18, 0x00	; 0
    290e:	30 e0       	ldi	r19, 0x00	; 0
    2910:	4a e7       	ldi	r20, 0x7A	; 122
    2912:	53 e4       	ldi	r21, 0x43	; 67
    2914:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2918:	dc 01       	movw	r26, r24
    291a:	cb 01       	movw	r24, r22
    291c:	8f 83       	std	Y+7, r24	; 0x07
    291e:	98 87       	std	Y+8, r25	; 0x08
    2920:	a9 87       	std	Y+9, r26	; 0x09
    2922:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2924:	6f 81       	ldd	r22, Y+7	; 0x07
    2926:	78 85       	ldd	r23, Y+8	; 0x08
    2928:	89 85       	ldd	r24, Y+9	; 0x09
    292a:	9a 85       	ldd	r25, Y+10	; 0x0a
    292c:	20 e0       	ldi	r18, 0x00	; 0
    292e:	30 e0       	ldi	r19, 0x00	; 0
    2930:	40 e8       	ldi	r20, 0x80	; 128
    2932:	5f e3       	ldi	r21, 0x3F	; 63
    2934:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2938:	88 23       	and	r24, r24
    293a:	2c f4       	brge	.+10     	; 0x2946 <getMatrixData+0x100>
		__ticks = 1;
    293c:	81 e0       	ldi	r24, 0x01	; 1
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	9e 83       	std	Y+6, r25	; 0x06
    2942:	8d 83       	std	Y+5, r24	; 0x05
    2944:	3f c0       	rjmp	.+126    	; 0x29c4 <getMatrixData+0x17e>
	else if (__tmp > 65535)
    2946:	6f 81       	ldd	r22, Y+7	; 0x07
    2948:	78 85       	ldd	r23, Y+8	; 0x08
    294a:	89 85       	ldd	r24, Y+9	; 0x09
    294c:	9a 85       	ldd	r25, Y+10	; 0x0a
    294e:	20 e0       	ldi	r18, 0x00	; 0
    2950:	3f ef       	ldi	r19, 0xFF	; 255
    2952:	4f e7       	ldi	r20, 0x7F	; 127
    2954:	57 e4       	ldi	r21, 0x47	; 71
    2956:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    295a:	18 16       	cp	r1, r24
    295c:	4c f5       	brge	.+82     	; 0x29b0 <getMatrixData+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    295e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2960:	7c 85       	ldd	r23, Y+12	; 0x0c
    2962:	8d 85       	ldd	r24, Y+13	; 0x0d
    2964:	9e 85       	ldd	r25, Y+14	; 0x0e
    2966:	20 e0       	ldi	r18, 0x00	; 0
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	40 e2       	ldi	r20, 0x20	; 32
    296c:	51 e4       	ldi	r21, 0x41	; 65
    296e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2972:	dc 01       	movw	r26, r24
    2974:	cb 01       	movw	r24, r22
    2976:	bc 01       	movw	r22, r24
    2978:	cd 01       	movw	r24, r26
    297a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    297e:	dc 01       	movw	r26, r24
    2980:	cb 01       	movw	r24, r22
    2982:	9e 83       	std	Y+6, r25	; 0x06
    2984:	8d 83       	std	Y+5, r24	; 0x05
    2986:	0f c0       	rjmp	.+30     	; 0x29a6 <getMatrixData+0x160>
    2988:	89 e1       	ldi	r24, 0x19	; 25
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	9c 83       	std	Y+4, r25	; 0x04
    298e:	8b 83       	std	Y+3, r24	; 0x03
    2990:	8b 81       	ldd	r24, Y+3	; 0x03
    2992:	9c 81       	ldd	r25, Y+4	; 0x04
    2994:	01 97       	sbiw	r24, 0x01	; 1
    2996:	f1 f7       	brne	.-4      	; 0x2994 <getMatrixData+0x14e>
    2998:	9c 83       	std	Y+4, r25	; 0x04
    299a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    299c:	8d 81       	ldd	r24, Y+5	; 0x05
    299e:	9e 81       	ldd	r25, Y+6	; 0x06
    29a0:	01 97       	sbiw	r24, 0x01	; 1
    29a2:	9e 83       	std	Y+6, r25	; 0x06
    29a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29a6:	8d 81       	ldd	r24, Y+5	; 0x05
    29a8:	9e 81       	ldd	r25, Y+6	; 0x06
    29aa:	00 97       	sbiw	r24, 0x00	; 0
    29ac:	69 f7       	brne	.-38     	; 0x2988 <getMatrixData+0x142>
    29ae:	14 c0       	rjmp	.+40     	; 0x29d8 <getMatrixData+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29b0:	6f 81       	ldd	r22, Y+7	; 0x07
    29b2:	78 85       	ldd	r23, Y+8	; 0x08
    29b4:	89 85       	ldd	r24, Y+9	; 0x09
    29b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    29b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29bc:	dc 01       	movw	r26, r24
    29be:	cb 01       	movw	r24, r22
    29c0:	9e 83       	std	Y+6, r25	; 0x06
    29c2:	8d 83       	std	Y+5, r24	; 0x05
    29c4:	8d 81       	ldd	r24, Y+5	; 0x05
    29c6:	9e 81       	ldd	r25, Y+6	; 0x06
    29c8:	9a 83       	std	Y+2, r25	; 0x02
    29ca:	89 83       	std	Y+1, r24	; 0x01
    29cc:	89 81       	ldd	r24, Y+1	; 0x01
    29ce:	9a 81       	ldd	r25, Y+2	; 0x02
    29d0:	01 97       	sbiw	r24, 0x01	; 1
    29d2:	f1 f7       	brne	.-4      	; 0x29d0 <getMatrixData+0x18a>
    29d4:	9a 83       	std	Y+2, r25	; 0x02
    29d6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);


	switch(key){
    29d8:	89 89       	ldd	r24, Y+17	; 0x11
    29da:	28 2f       	mov	r18, r24
    29dc:	30 e0       	ldi	r19, 0x00	; 0
    29de:	3b 8b       	std	Y+19, r19	; 0x13
    29e0:	2a 8b       	std	Y+18, r18	; 0x12
    29e2:	8a 89       	ldd	r24, Y+18	; 0x12
    29e4:	9b 89       	ldd	r25, Y+19	; 0x13
    29e6:	82 30       	cpi	r24, 0x02	; 2
    29e8:	91 05       	cpc	r25, r1
    29ea:	19 f1       	breq	.+70     	; 0x2a32 <getMatrixData+0x1ec>
    29ec:	2a 89       	ldd	r18, Y+18	; 0x12
    29ee:	3b 89       	ldd	r19, Y+19	; 0x13
    29f0:	23 30       	cpi	r18, 0x03	; 3
    29f2:	31 05       	cpc	r19, r1
    29f4:	34 f4       	brge	.+12     	; 0x2a02 <getMatrixData+0x1bc>
    29f6:	8a 89       	ldd	r24, Y+18	; 0x12
    29f8:	9b 89       	ldd	r25, Y+19	; 0x13
    29fa:	81 30       	cpi	r24, 0x01	; 1
    29fc:	91 05       	cpc	r25, r1
    29fe:	61 f0       	breq	.+24     	; 0x2a18 <getMatrixData+0x1d2>
    2a00:	3e c0       	rjmp	.+124    	; 0x2a7e <getMatrixData+0x238>
    2a02:	2a 89       	ldd	r18, Y+18	; 0x12
    2a04:	3b 89       	ldd	r19, Y+19	; 0x13
    2a06:	23 30       	cpi	r18, 0x03	; 3
    2a08:	31 05       	cpc	r19, r1
    2a0a:	01 f1       	breq	.+64     	; 0x2a4c <getMatrixData+0x206>
    2a0c:	8a 89       	ldd	r24, Y+18	; 0x12
    2a0e:	9b 89       	ldd	r25, Y+19	; 0x13
    2a10:	84 30       	cpi	r24, 0x04	; 4
    2a12:	91 05       	cpc	r25, r1
    2a14:	41 f1       	breq	.+80     	; 0x2a66 <getMatrixData+0x220>
    2a16:	33 c0       	rjmp	.+102    	; 0x2a7e <getMatrixData+0x238>
	case 1:
		fillMatrixData(&matA, rows, cols);
    2a18:	86 eb       	ldi	r24, 0xB6	; 182
    2a1a:	92 e0       	ldi	r25, 0x02	; 2
    2a1c:	68 89       	ldd	r22, Y+16	; 0x10
    2a1e:	4f 85       	ldd	r20, Y+15	; 0x0f
    2a20:	0e 94 48 15 	call	0x2a90	; 0x2a90 <fillMatrixData>
		Asize[0] = rows;
    2a24:	88 89       	ldd	r24, Y+16	; 0x10
    2a26:	80 93 4c 03 	sts	0x034C, r24
		Asize[1] = cols;
    2a2a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a2c:	80 93 4d 03 	sts	0x034D, r24
    2a30:	26 c0       	rjmp	.+76     	; 0x2a7e <getMatrixData+0x238>
		break;
	case 2:
		fillMatrixData(&matB, rows, cols);
    2a32:	8a ed       	ldi	r24, 0xDA	; 218
    2a34:	92 e0       	ldi	r25, 0x02	; 2
    2a36:	68 89       	ldd	r22, Y+16	; 0x10
    2a38:	4f 85       	ldd	r20, Y+15	; 0x0f
    2a3a:	0e 94 48 15 	call	0x2a90	; 0x2a90 <fillMatrixData>
		Bsize[0] = rows;
    2a3e:	88 89       	ldd	r24, Y+16	; 0x10
    2a40:	80 93 48 03 	sts	0x0348, r24
		Bsize[1] = cols;
    2a44:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a46:	80 93 49 03 	sts	0x0349, r24
    2a4a:	19 c0       	rjmp	.+50     	; 0x2a7e <getMatrixData+0x238>
		break;
	case 3:
		fillMatrixData(&matC, rows, cols);
    2a4c:	8e ef       	ldi	r24, 0xFE	; 254
    2a4e:	92 e0       	ldi	r25, 0x02	; 2
    2a50:	68 89       	ldd	r22, Y+16	; 0x10
    2a52:	4f 85       	ldd	r20, Y+15	; 0x0f
    2a54:	0e 94 48 15 	call	0x2a90	; 0x2a90 <fillMatrixData>
		Csize[0] = rows;
    2a58:	88 89       	ldd	r24, Y+16	; 0x10
    2a5a:	80 93 46 03 	sts	0x0346, r24
		Csize[1] = cols;
    2a5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a60:	80 93 47 03 	sts	0x0347, r24
    2a64:	0c c0       	rjmp	.+24     	; 0x2a7e <getMatrixData+0x238>
		break;
	case 4:
		fillMatrixData(&matD, rows, cols);
    2a66:	82 e2       	ldi	r24, 0x22	; 34
    2a68:	93 e0       	ldi	r25, 0x03	; 3
    2a6a:	68 89       	ldd	r22, Y+16	; 0x10
    2a6c:	4f 85       	ldd	r20, Y+15	; 0x0f
    2a6e:	0e 94 48 15 	call	0x2a90	; 0x2a90 <fillMatrixData>
		Dsize[0] = rows;
    2a72:	88 89       	ldd	r24, Y+16	; 0x10
    2a74:	80 93 4a 03 	sts	0x034A, r24
		Dsize[1] = cols;
    2a78:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a7a:	80 93 4b 03 	sts	0x034B, r24
		break;
	}
}
    2a7e:	63 96       	adiw	r28, 0x13	; 19
    2a80:	0f b6       	in	r0, 0x3f	; 63
    2a82:	f8 94       	cli
    2a84:	de bf       	out	0x3e, r29	; 62
    2a86:	0f be       	out	0x3f, r0	; 63
    2a88:	cd bf       	out	0x3d, r28	; 61
    2a8a:	cf 91       	pop	r28
    2a8c:	df 91       	pop	r29
    2a8e:	08 95       	ret

00002a90 <fillMatrixData>:

void fillMatrixData(long double * ptr_mat, uint8 a_rows, uint8 a_cols){
    2a90:	0f 93       	push	r16
    2a92:	1f 93       	push	r17
    2a94:	df 93       	push	r29
    2a96:	cf 93       	push	r28
    2a98:	cd b7       	in	r28, 0x3d	; 61
    2a9a:	de b7       	in	r29, 0x3e	; 62
    2a9c:	a3 97       	sbiw	r28, 0x23	; 35
    2a9e:	0f b6       	in	r0, 0x3f	; 63
    2aa0:	f8 94       	cli
    2aa2:	de bf       	out	0x3e, r29	; 62
    2aa4:	0f be       	out	0x3f, r0	; 63
    2aa6:	cd bf       	out	0x3d, r28	; 61
    2aa8:	99 a3       	std	Y+33, r25	; 0x21
    2aaa:	88 a3       	std	Y+32, r24	; 0x20
    2aac:	6a a3       	std	Y+34, r22	; 0x22
    2aae:	4b a3       	std	Y+35, r20	; 0x23
	uint8 i, j, k = 0, key, numCounter = 0, sign ='+';
    2ab0:	1b 8a       	std	Y+19, r1	; 0x13
    2ab2:	19 8a       	std	Y+17, r1	; 0x11
    2ab4:	8b e2       	ldi	r24, 0x2B	; 43
    2ab6:	88 8b       	std	Y+16, r24	; 0x10
	Key_Type type;
	char num[10] = {'\0'};
    2ab8:	8a e0       	ldi	r24, 0x0A	; 10
    2aba:	fe 01       	movw	r30, r28
    2abc:	76 96       	adiw	r30, 0x16	; 22
    2abe:	df 01       	movw	r26, r30
    2ac0:	98 2f       	mov	r25, r24
    2ac2:	1d 92       	st	X+, r1
    2ac4:	9a 95       	dec	r25
    2ac6:	e9 f7       	brne	.-6      	; 0x2ac2 <fillMatrixData+0x32>

	LCD_clearScreen();
    2ac8:	0e 94 07 20 	call	0x400e	; 0x400e <LCD_clearScreen>
	for (i = 0; i < a_rows; i++){
    2acc:	1d 8a       	std	Y+21, r1	; 0x15
    2ace:	14 c1       	rjmp	.+552    	; 0x2cf8 <fillMatrixData+0x268>
		LCD_moveCursor(i, 0);
    2ad0:	8d 89       	ldd	r24, Y+21	; 0x15
    2ad2:	60 e0       	ldi	r22, 0x00	; 0
    2ad4:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <LCD_moveCursor>
		for (j = 0; j < a_cols; j++){
    2ad8:	1c 8a       	std	Y+20, r1	; 0x14
    2ada:	06 c1       	rjmp	.+524    	; 0x2ce8 <fillMatrixData+0x258>
			sign = '+';
    2adc:	8b e2       	ldi	r24, 0x2B	; 43
    2ade:	88 8b       	std	Y+16, r24	; 0x10
			LCD_moveCursor(i, 5*j);
    2ae0:	8c 89       	ldd	r24, Y+20	; 0x14
    2ae2:	28 2f       	mov	r18, r24
    2ae4:	30 e0       	ldi	r19, 0x00	; 0
    2ae6:	c9 01       	movw	r24, r18
    2ae8:	88 0f       	add	r24, r24
    2aea:	99 1f       	adc	r25, r25
    2aec:	88 0f       	add	r24, r24
    2aee:	99 1f       	adc	r25, r25
    2af0:	82 0f       	add	r24, r18
    2af2:	93 1f       	adc	r25, r19
    2af4:	98 2f       	mov	r25, r24
    2af6:	8d 89       	ldd	r24, Y+21	; 0x15
    2af8:	69 2f       	mov	r22, r25
    2afa:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <LCD_moveCursor>
			do {
				key = KEYPAD_getPressedKey();
    2afe:	0e 94 ca 19 	call	0x3394	; 0x3394 <KEYPAD_getPressedKey>
    2b02:	8a 8b       	std	Y+18, r24	; 0x12
				type = getKeyType(key);
    2b04:	8a 89       	ldd	r24, Y+18	; 0x12
    2b06:	0e 94 b6 0b 	call	0x176c	; 0x176c <getKeyType>
    2b0a:	8f 87       	std	Y+15, r24	; 0x0f

				if (key == ON_KEY){
    2b0c:	8a 89       	ldd	r24, Y+18	; 0x12
    2b0e:	8d 30       	cpi	r24, 0x0D	; 13
    2b10:	09 f4       	brne	.+2      	; 0x2b14 <fillMatrixData+0x84>
    2b12:	f7 c0       	rjmp	.+494    	; 0x2d02 <fillMatrixData+0x272>
					return;
				}

				if (type == NUMBER_KEY){
    2b14:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b16:	88 23       	and	r24, r24
    2b18:	a1 f4       	brne	.+40     	; 0x2b42 <fillMatrixData+0xb2>
					LCD_displayCharacter(key+48);
    2b1a:	8a 89       	ldd	r24, Y+18	; 0x12
    2b1c:	80 5d       	subi	r24, 0xD0	; 208
    2b1e:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <LCD_displayCharacter>
					num[numCounter++] = key + 48;
    2b22:	89 89       	ldd	r24, Y+17	; 0x11
    2b24:	28 2f       	mov	r18, r24
    2b26:	30 e0       	ldi	r19, 0x00	; 0
    2b28:	8a 89       	ldd	r24, Y+18	; 0x12
    2b2a:	48 2f       	mov	r20, r24
    2b2c:	40 5d       	subi	r20, 0xD0	; 208
    2b2e:	ce 01       	movw	r24, r28
    2b30:	46 96       	adiw	r24, 0x16	; 22
    2b32:	fc 01       	movw	r30, r24
    2b34:	e2 0f       	add	r30, r18
    2b36:	f3 1f       	adc	r31, r19
    2b38:	40 83       	st	Z, r20
    2b3a:	89 89       	ldd	r24, Y+17	; 0x11
    2b3c:	8f 5f       	subi	r24, 0xFF	; 255
    2b3e:	89 8b       	std	Y+17, r24	; 0x11
    2b40:	08 c0       	rjmp	.+16     	; 0x2b52 <fillMatrixData+0xc2>
				}
				else {
					if (key != '='){
    2b42:	8a 89       	ldd	r24, Y+18	; 0x12
    2b44:	8d 33       	cpi	r24, 0x3D	; 61
    2b46:	29 f0       	breq	.+10     	; 0x2b52 <fillMatrixData+0xc2>
						LCD_displayCharacter(key);
    2b48:	8a 89       	ldd	r24, Y+18	; 0x12
    2b4a:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <LCD_displayCharacter>
						sign = key;
    2b4e:	8a 89       	ldd	r24, Y+18	; 0x12
    2b50:	88 8b       	std	Y+16, r24	; 0x10
    2b52:	80 e0       	ldi	r24, 0x00	; 0
    2b54:	90 e0       	ldi	r25, 0x00	; 0
    2b56:	aa ef       	ldi	r26, 0xFA	; 250
    2b58:	b3 e4       	ldi	r27, 0x43	; 67
    2b5a:	8b 87       	std	Y+11, r24	; 0x0b
    2b5c:	9c 87       	std	Y+12, r25	; 0x0c
    2b5e:	ad 87       	std	Y+13, r26	; 0x0d
    2b60:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b62:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b64:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b66:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b68:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b6a:	20 e0       	ldi	r18, 0x00	; 0
    2b6c:	30 e0       	ldi	r19, 0x00	; 0
    2b6e:	4a e7       	ldi	r20, 0x7A	; 122
    2b70:	53 e4       	ldi	r21, 0x43	; 67
    2b72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b76:	dc 01       	movw	r26, r24
    2b78:	cb 01       	movw	r24, r22
    2b7a:	8f 83       	std	Y+7, r24	; 0x07
    2b7c:	98 87       	std	Y+8, r25	; 0x08
    2b7e:	a9 87       	std	Y+9, r26	; 0x09
    2b80:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b82:	6f 81       	ldd	r22, Y+7	; 0x07
    2b84:	78 85       	ldd	r23, Y+8	; 0x08
    2b86:	89 85       	ldd	r24, Y+9	; 0x09
    2b88:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b8a:	20 e0       	ldi	r18, 0x00	; 0
    2b8c:	30 e0       	ldi	r19, 0x00	; 0
    2b8e:	40 e8       	ldi	r20, 0x80	; 128
    2b90:	5f e3       	ldi	r21, 0x3F	; 63
    2b92:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b96:	88 23       	and	r24, r24
    2b98:	2c f4       	brge	.+10     	; 0x2ba4 <fillMatrixData+0x114>
		__ticks = 1;
    2b9a:	81 e0       	ldi	r24, 0x01	; 1
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	9e 83       	std	Y+6, r25	; 0x06
    2ba0:	8d 83       	std	Y+5, r24	; 0x05
    2ba2:	3f c0       	rjmp	.+126    	; 0x2c22 <fillMatrixData+0x192>
	else if (__tmp > 65535)
    2ba4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ba6:	78 85       	ldd	r23, Y+8	; 0x08
    2ba8:	89 85       	ldd	r24, Y+9	; 0x09
    2baa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bac:	20 e0       	ldi	r18, 0x00	; 0
    2bae:	3f ef       	ldi	r19, 0xFF	; 255
    2bb0:	4f e7       	ldi	r20, 0x7F	; 127
    2bb2:	57 e4       	ldi	r21, 0x47	; 71
    2bb4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bb8:	18 16       	cp	r1, r24
    2bba:	4c f5       	brge	.+82     	; 0x2c0e <fillMatrixData+0x17e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bc4:	20 e0       	ldi	r18, 0x00	; 0
    2bc6:	30 e0       	ldi	r19, 0x00	; 0
    2bc8:	40 e2       	ldi	r20, 0x20	; 32
    2bca:	51 e4       	ldi	r21, 0x41	; 65
    2bcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd0:	dc 01       	movw	r26, r24
    2bd2:	cb 01       	movw	r24, r22
    2bd4:	bc 01       	movw	r22, r24
    2bd6:	cd 01       	movw	r24, r26
    2bd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bdc:	dc 01       	movw	r26, r24
    2bde:	cb 01       	movw	r24, r22
    2be0:	9e 83       	std	Y+6, r25	; 0x06
    2be2:	8d 83       	std	Y+5, r24	; 0x05
    2be4:	0f c0       	rjmp	.+30     	; 0x2c04 <fillMatrixData+0x174>
    2be6:	89 e1       	ldi	r24, 0x19	; 25
    2be8:	90 e0       	ldi	r25, 0x00	; 0
    2bea:	9c 83       	std	Y+4, r25	; 0x04
    2bec:	8b 83       	std	Y+3, r24	; 0x03
    2bee:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf0:	9c 81       	ldd	r25, Y+4	; 0x04
    2bf2:	01 97       	sbiw	r24, 0x01	; 1
    2bf4:	f1 f7       	brne	.-4      	; 0x2bf2 <fillMatrixData+0x162>
    2bf6:	9c 83       	std	Y+4, r25	; 0x04
    2bf8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bfa:	8d 81       	ldd	r24, Y+5	; 0x05
    2bfc:	9e 81       	ldd	r25, Y+6	; 0x06
    2bfe:	01 97       	sbiw	r24, 0x01	; 1
    2c00:	9e 83       	std	Y+6, r25	; 0x06
    2c02:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c04:	8d 81       	ldd	r24, Y+5	; 0x05
    2c06:	9e 81       	ldd	r25, Y+6	; 0x06
    2c08:	00 97       	sbiw	r24, 0x00	; 0
    2c0a:	69 f7       	brne	.-38     	; 0x2be6 <fillMatrixData+0x156>
    2c0c:	14 c0       	rjmp	.+40     	; 0x2c36 <fillMatrixData+0x1a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c0e:	6f 81       	ldd	r22, Y+7	; 0x07
    2c10:	78 85       	ldd	r23, Y+8	; 0x08
    2c12:	89 85       	ldd	r24, Y+9	; 0x09
    2c14:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c1a:	dc 01       	movw	r26, r24
    2c1c:	cb 01       	movw	r24, r22
    2c1e:	9e 83       	std	Y+6, r25	; 0x06
    2c20:	8d 83       	std	Y+5, r24	; 0x05
    2c22:	8d 81       	ldd	r24, Y+5	; 0x05
    2c24:	9e 81       	ldd	r25, Y+6	; 0x06
    2c26:	9a 83       	std	Y+2, r25	; 0x02
    2c28:	89 83       	std	Y+1, r24	; 0x01
    2c2a:	89 81       	ldd	r24, Y+1	; 0x01
    2c2c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c2e:	01 97       	sbiw	r24, 0x01	; 1
    2c30:	f1 f7       	brne	.-4      	; 0x2c2e <fillMatrixData+0x19e>
    2c32:	9a 83       	std	Y+2, r25	; 0x02
    2c34:	89 83       	std	Y+1, r24	; 0x01
					}
				}
				_delay_ms(500);
			}
			while (key != '=');
    2c36:	8a 89       	ldd	r24, Y+18	; 0x12
    2c38:	8d 33       	cpi	r24, 0x3D	; 61
    2c3a:	09 f0       	breq	.+2      	; 0x2c3e <fillMatrixData+0x1ae>
    2c3c:	60 cf       	rjmp	.-320    	; 0x2afe <fillMatrixData+0x6e>

			/* Converting the string number to long */
			num[numCounter] = '\0';
    2c3e:	89 89       	ldd	r24, Y+17	; 0x11
    2c40:	28 2f       	mov	r18, r24
    2c42:	30 e0       	ldi	r19, 0x00	; 0
    2c44:	ce 01       	movw	r24, r28
    2c46:	46 96       	adiw	r24, 0x16	; 22
    2c48:	fc 01       	movw	r30, r24
    2c4a:	e2 0f       	add	r30, r18
    2c4c:	f3 1f       	adc	r31, r19
    2c4e:	10 82       	st	Z, r1
			numCounter = 0;
    2c50:	19 8a       	std	Y+17, r1	; 0x11
			ptr_mat[k] = atol(num);
    2c52:	8b 89       	ldd	r24, Y+19	; 0x13
    2c54:	88 2f       	mov	r24, r24
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	9c 01       	movw	r18, r24
    2c5a:	22 0f       	add	r18, r18
    2c5c:	33 1f       	adc	r19, r19
    2c5e:	22 0f       	add	r18, r18
    2c60:	33 1f       	adc	r19, r19
    2c62:	88 a1       	ldd	r24, Y+32	; 0x20
    2c64:	99 a1       	ldd	r25, Y+33	; 0x21
    2c66:	8c 01       	movw	r16, r24
    2c68:	02 0f       	add	r16, r18
    2c6a:	13 1f       	adc	r17, r19
    2c6c:	ce 01       	movw	r24, r28
    2c6e:	46 96       	adiw	r24, 0x16	; 22
    2c70:	0e 94 6f 20 	call	0x40de	; 0x40de <atol>
    2c74:	dc 01       	movw	r26, r24
    2c76:	cb 01       	movw	r24, r22
    2c78:	bc 01       	movw	r22, r24
    2c7a:	cd 01       	movw	r24, r26
    2c7c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2c80:	dc 01       	movw	r26, r24
    2c82:	cb 01       	movw	r24, r22
    2c84:	f8 01       	movw	r30, r16
    2c86:	80 83       	st	Z, r24
    2c88:	91 83       	std	Z+1, r25	; 0x01
    2c8a:	a2 83       	std	Z+2, r26	; 0x02
    2c8c:	b3 83       	std	Z+3, r27	; 0x03
			if (sign == 45){
    2c8e:	88 89       	ldd	r24, Y+16	; 0x10
    2c90:	8d 32       	cpi	r24, 0x2D	; 45
    2c92:	21 f5       	brne	.+72     	; 0x2cdc <fillMatrixData+0x24c>
				ptr_mat[k] *= -1;
    2c94:	8b 89       	ldd	r24, Y+19	; 0x13
    2c96:	88 2f       	mov	r24, r24
    2c98:	90 e0       	ldi	r25, 0x00	; 0
    2c9a:	9c 01       	movw	r18, r24
    2c9c:	22 0f       	add	r18, r18
    2c9e:	33 1f       	adc	r19, r19
    2ca0:	22 0f       	add	r18, r18
    2ca2:	33 1f       	adc	r19, r19
    2ca4:	88 a1       	ldd	r24, Y+32	; 0x20
    2ca6:	99 a1       	ldd	r25, Y+33	; 0x21
    2ca8:	ac 01       	movw	r20, r24
    2caa:	42 0f       	add	r20, r18
    2cac:	53 1f       	adc	r21, r19
    2cae:	8b 89       	ldd	r24, Y+19	; 0x13
    2cb0:	88 2f       	mov	r24, r24
    2cb2:	90 e0       	ldi	r25, 0x00	; 0
    2cb4:	9c 01       	movw	r18, r24
    2cb6:	22 0f       	add	r18, r18
    2cb8:	33 1f       	adc	r19, r19
    2cba:	22 0f       	add	r18, r18
    2cbc:	33 1f       	adc	r19, r19
    2cbe:	88 a1       	ldd	r24, Y+32	; 0x20
    2cc0:	99 a1       	ldd	r25, Y+33	; 0x21
    2cc2:	fc 01       	movw	r30, r24
    2cc4:	e2 0f       	add	r30, r18
    2cc6:	f3 1f       	adc	r31, r19
    2cc8:	80 81       	ld	r24, Z
    2cca:	91 81       	ldd	r25, Z+1	; 0x01
    2ccc:	a2 81       	ldd	r26, Z+2	; 0x02
    2cce:	b3 81       	ldd	r27, Z+3	; 0x03
    2cd0:	b0 58       	subi	r27, 0x80	; 128
    2cd2:	fa 01       	movw	r30, r20
    2cd4:	80 83       	st	Z, r24
    2cd6:	91 83       	std	Z+1, r25	; 0x01
    2cd8:	a2 83       	std	Z+2, r26	; 0x02
    2cda:	b3 83       	std	Z+3, r27	; 0x03
			}
			k++;
    2cdc:	8b 89       	ldd	r24, Y+19	; 0x13
    2cde:	8f 5f       	subi	r24, 0xFF	; 255
    2ce0:	8b 8b       	std	Y+19, r24	; 0x13
	char num[10] = {'\0'};

	LCD_clearScreen();
	for (i = 0; i < a_rows; i++){
		LCD_moveCursor(i, 0);
		for (j = 0; j < a_cols; j++){
    2ce2:	8c 89       	ldd	r24, Y+20	; 0x14
    2ce4:	8f 5f       	subi	r24, 0xFF	; 255
    2ce6:	8c 8b       	std	Y+20, r24	; 0x14
    2ce8:	9c 89       	ldd	r25, Y+20	; 0x14
    2cea:	8b a1       	ldd	r24, Y+35	; 0x23
    2cec:	98 17       	cp	r25, r24
    2cee:	08 f4       	brcc	.+2      	; 0x2cf2 <fillMatrixData+0x262>
    2cf0:	f5 ce       	rjmp	.-534    	; 0x2adc <fillMatrixData+0x4c>
	uint8 i, j, k = 0, key, numCounter = 0, sign ='+';
	Key_Type type;
	char num[10] = {'\0'};

	LCD_clearScreen();
	for (i = 0; i < a_rows; i++){
    2cf2:	8d 89       	ldd	r24, Y+21	; 0x15
    2cf4:	8f 5f       	subi	r24, 0xFF	; 255
    2cf6:	8d 8b       	std	Y+21, r24	; 0x15
    2cf8:	9d 89       	ldd	r25, Y+21	; 0x15
    2cfa:	8a a1       	ldd	r24, Y+34	; 0x22
    2cfc:	98 17       	cp	r25, r24
    2cfe:	08 f4       	brcc	.+2      	; 0x2d02 <fillMatrixData+0x272>
    2d00:	e7 ce       	rjmp	.-562    	; 0x2ad0 <fillMatrixData+0x40>
			k++;
		}

	}

}
    2d02:	a3 96       	adiw	r28, 0x23	; 35
    2d04:	0f b6       	in	r0, 0x3f	; 63
    2d06:	f8 94       	cli
    2d08:	de bf       	out	0x3e, r29	; 62
    2d0a:	0f be       	out	0x3f, r0	; 63
    2d0c:	cd bf       	out	0x3d, r28	; 61
    2d0e:	cf 91       	pop	r28
    2d10:	df 91       	pop	r29
    2d12:	1f 91       	pop	r17
    2d14:	0f 91       	pop	r16
    2d16:	08 95       	ret

00002d18 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    2d18:	df 93       	push	r29
    2d1a:	cf 93       	push	r28
    2d1c:	00 d0       	rcall	.+0      	; 0x2d1e <GPIO_setupPinDirection+0x6>
    2d1e:	00 d0       	rcall	.+0      	; 0x2d20 <GPIO_setupPinDirection+0x8>
    2d20:	0f 92       	push	r0
    2d22:	cd b7       	in	r28, 0x3d	; 61
    2d24:	de b7       	in	r29, 0x3e	; 62
    2d26:	89 83       	std	Y+1, r24	; 0x01
    2d28:	6a 83       	std	Y+2, r22	; 0x02
    2d2a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2d2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d2e:	88 30       	cpi	r24, 0x08	; 8
    2d30:	08 f0       	brcs	.+2      	; 0x2d34 <GPIO_setupPinDirection+0x1c>
    2d32:	d5 c0       	rjmp	.+426    	; 0x2ede <GPIO_setupPinDirection+0x1c6>
    2d34:	89 81       	ldd	r24, Y+1	; 0x01
    2d36:	84 30       	cpi	r24, 0x04	; 4
    2d38:	08 f0       	brcs	.+2      	; 0x2d3c <GPIO_setupPinDirection+0x24>
    2d3a:	d1 c0       	rjmp	.+418    	; 0x2ede <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    2d3c:	89 81       	ldd	r24, Y+1	; 0x01
    2d3e:	28 2f       	mov	r18, r24
    2d40:	30 e0       	ldi	r19, 0x00	; 0
    2d42:	3d 83       	std	Y+5, r19	; 0x05
    2d44:	2c 83       	std	Y+4, r18	; 0x04
    2d46:	8c 81       	ldd	r24, Y+4	; 0x04
    2d48:	9d 81       	ldd	r25, Y+5	; 0x05
    2d4a:	81 30       	cpi	r24, 0x01	; 1
    2d4c:	91 05       	cpc	r25, r1
    2d4e:	09 f4       	brne	.+2      	; 0x2d52 <GPIO_setupPinDirection+0x3a>
    2d50:	43 c0       	rjmp	.+134    	; 0x2dd8 <GPIO_setupPinDirection+0xc0>
    2d52:	2c 81       	ldd	r18, Y+4	; 0x04
    2d54:	3d 81       	ldd	r19, Y+5	; 0x05
    2d56:	22 30       	cpi	r18, 0x02	; 2
    2d58:	31 05       	cpc	r19, r1
    2d5a:	2c f4       	brge	.+10     	; 0x2d66 <GPIO_setupPinDirection+0x4e>
    2d5c:	8c 81       	ldd	r24, Y+4	; 0x04
    2d5e:	9d 81       	ldd	r25, Y+5	; 0x05
    2d60:	00 97       	sbiw	r24, 0x00	; 0
    2d62:	71 f0       	breq	.+28     	; 0x2d80 <GPIO_setupPinDirection+0x68>
    2d64:	bc c0       	rjmp	.+376    	; 0x2ede <GPIO_setupPinDirection+0x1c6>
    2d66:	2c 81       	ldd	r18, Y+4	; 0x04
    2d68:	3d 81       	ldd	r19, Y+5	; 0x05
    2d6a:	22 30       	cpi	r18, 0x02	; 2
    2d6c:	31 05       	cpc	r19, r1
    2d6e:	09 f4       	brne	.+2      	; 0x2d72 <GPIO_setupPinDirection+0x5a>
    2d70:	5f c0       	rjmp	.+190    	; 0x2e30 <GPIO_setupPinDirection+0x118>
    2d72:	8c 81       	ldd	r24, Y+4	; 0x04
    2d74:	9d 81       	ldd	r25, Y+5	; 0x05
    2d76:	83 30       	cpi	r24, 0x03	; 3
    2d78:	91 05       	cpc	r25, r1
    2d7a:	09 f4       	brne	.+2      	; 0x2d7e <GPIO_setupPinDirection+0x66>
    2d7c:	85 c0       	rjmp	.+266    	; 0x2e88 <GPIO_setupPinDirection+0x170>
    2d7e:	af c0       	rjmp	.+350    	; 0x2ede <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    2d80:	8b 81       	ldd	r24, Y+3	; 0x03
    2d82:	81 30       	cpi	r24, 0x01	; 1
    2d84:	a1 f4       	brne	.+40     	; 0x2dae <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    2d86:	aa e3       	ldi	r26, 0x3A	; 58
    2d88:	b0 e0       	ldi	r27, 0x00	; 0
    2d8a:	ea e3       	ldi	r30, 0x3A	; 58
    2d8c:	f0 e0       	ldi	r31, 0x00	; 0
    2d8e:	80 81       	ld	r24, Z
    2d90:	48 2f       	mov	r20, r24
    2d92:	8a 81       	ldd	r24, Y+2	; 0x02
    2d94:	28 2f       	mov	r18, r24
    2d96:	30 e0       	ldi	r19, 0x00	; 0
    2d98:	81 e0       	ldi	r24, 0x01	; 1
    2d9a:	90 e0       	ldi	r25, 0x00	; 0
    2d9c:	02 2e       	mov	r0, r18
    2d9e:	02 c0       	rjmp	.+4      	; 0x2da4 <GPIO_setupPinDirection+0x8c>
    2da0:	88 0f       	add	r24, r24
    2da2:	99 1f       	adc	r25, r25
    2da4:	0a 94       	dec	r0
    2da6:	e2 f7       	brpl	.-8      	; 0x2da0 <GPIO_setupPinDirection+0x88>
    2da8:	84 2b       	or	r24, r20
    2daa:	8c 93       	st	X, r24
    2dac:	98 c0       	rjmp	.+304    	; 0x2ede <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    2dae:	aa e3       	ldi	r26, 0x3A	; 58
    2db0:	b0 e0       	ldi	r27, 0x00	; 0
    2db2:	ea e3       	ldi	r30, 0x3A	; 58
    2db4:	f0 e0       	ldi	r31, 0x00	; 0
    2db6:	80 81       	ld	r24, Z
    2db8:	48 2f       	mov	r20, r24
    2dba:	8a 81       	ldd	r24, Y+2	; 0x02
    2dbc:	28 2f       	mov	r18, r24
    2dbe:	30 e0       	ldi	r19, 0x00	; 0
    2dc0:	81 e0       	ldi	r24, 0x01	; 1
    2dc2:	90 e0       	ldi	r25, 0x00	; 0
    2dc4:	02 2e       	mov	r0, r18
    2dc6:	02 c0       	rjmp	.+4      	; 0x2dcc <GPIO_setupPinDirection+0xb4>
    2dc8:	88 0f       	add	r24, r24
    2dca:	99 1f       	adc	r25, r25
    2dcc:	0a 94       	dec	r0
    2dce:	e2 f7       	brpl	.-8      	; 0x2dc8 <GPIO_setupPinDirection+0xb0>
    2dd0:	80 95       	com	r24
    2dd2:	84 23       	and	r24, r20
    2dd4:	8c 93       	st	X, r24
    2dd6:	83 c0       	rjmp	.+262    	; 0x2ede <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    2dd8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dda:	81 30       	cpi	r24, 0x01	; 1
    2ddc:	a1 f4       	brne	.+40     	; 0x2e06 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    2dde:	a7 e3       	ldi	r26, 0x37	; 55
    2de0:	b0 e0       	ldi	r27, 0x00	; 0
    2de2:	e7 e3       	ldi	r30, 0x37	; 55
    2de4:	f0 e0       	ldi	r31, 0x00	; 0
    2de6:	80 81       	ld	r24, Z
    2de8:	48 2f       	mov	r20, r24
    2dea:	8a 81       	ldd	r24, Y+2	; 0x02
    2dec:	28 2f       	mov	r18, r24
    2dee:	30 e0       	ldi	r19, 0x00	; 0
    2df0:	81 e0       	ldi	r24, 0x01	; 1
    2df2:	90 e0       	ldi	r25, 0x00	; 0
    2df4:	02 2e       	mov	r0, r18
    2df6:	02 c0       	rjmp	.+4      	; 0x2dfc <GPIO_setupPinDirection+0xe4>
    2df8:	88 0f       	add	r24, r24
    2dfa:	99 1f       	adc	r25, r25
    2dfc:	0a 94       	dec	r0
    2dfe:	e2 f7       	brpl	.-8      	; 0x2df8 <GPIO_setupPinDirection+0xe0>
    2e00:	84 2b       	or	r24, r20
    2e02:	8c 93       	st	X, r24
    2e04:	6c c0       	rjmp	.+216    	; 0x2ede <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    2e06:	a7 e3       	ldi	r26, 0x37	; 55
    2e08:	b0 e0       	ldi	r27, 0x00	; 0
    2e0a:	e7 e3       	ldi	r30, 0x37	; 55
    2e0c:	f0 e0       	ldi	r31, 0x00	; 0
    2e0e:	80 81       	ld	r24, Z
    2e10:	48 2f       	mov	r20, r24
    2e12:	8a 81       	ldd	r24, Y+2	; 0x02
    2e14:	28 2f       	mov	r18, r24
    2e16:	30 e0       	ldi	r19, 0x00	; 0
    2e18:	81 e0       	ldi	r24, 0x01	; 1
    2e1a:	90 e0       	ldi	r25, 0x00	; 0
    2e1c:	02 2e       	mov	r0, r18
    2e1e:	02 c0       	rjmp	.+4      	; 0x2e24 <GPIO_setupPinDirection+0x10c>
    2e20:	88 0f       	add	r24, r24
    2e22:	99 1f       	adc	r25, r25
    2e24:	0a 94       	dec	r0
    2e26:	e2 f7       	brpl	.-8      	; 0x2e20 <GPIO_setupPinDirection+0x108>
    2e28:	80 95       	com	r24
    2e2a:	84 23       	and	r24, r20
    2e2c:	8c 93       	st	X, r24
    2e2e:	57 c0       	rjmp	.+174    	; 0x2ede <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    2e30:	8b 81       	ldd	r24, Y+3	; 0x03
    2e32:	81 30       	cpi	r24, 0x01	; 1
    2e34:	a1 f4       	brne	.+40     	; 0x2e5e <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    2e36:	a4 e3       	ldi	r26, 0x34	; 52
    2e38:	b0 e0       	ldi	r27, 0x00	; 0
    2e3a:	e4 e3       	ldi	r30, 0x34	; 52
    2e3c:	f0 e0       	ldi	r31, 0x00	; 0
    2e3e:	80 81       	ld	r24, Z
    2e40:	48 2f       	mov	r20, r24
    2e42:	8a 81       	ldd	r24, Y+2	; 0x02
    2e44:	28 2f       	mov	r18, r24
    2e46:	30 e0       	ldi	r19, 0x00	; 0
    2e48:	81 e0       	ldi	r24, 0x01	; 1
    2e4a:	90 e0       	ldi	r25, 0x00	; 0
    2e4c:	02 2e       	mov	r0, r18
    2e4e:	02 c0       	rjmp	.+4      	; 0x2e54 <GPIO_setupPinDirection+0x13c>
    2e50:	88 0f       	add	r24, r24
    2e52:	99 1f       	adc	r25, r25
    2e54:	0a 94       	dec	r0
    2e56:	e2 f7       	brpl	.-8      	; 0x2e50 <GPIO_setupPinDirection+0x138>
    2e58:	84 2b       	or	r24, r20
    2e5a:	8c 93       	st	X, r24
    2e5c:	40 c0       	rjmp	.+128    	; 0x2ede <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    2e5e:	a4 e3       	ldi	r26, 0x34	; 52
    2e60:	b0 e0       	ldi	r27, 0x00	; 0
    2e62:	e4 e3       	ldi	r30, 0x34	; 52
    2e64:	f0 e0       	ldi	r31, 0x00	; 0
    2e66:	80 81       	ld	r24, Z
    2e68:	48 2f       	mov	r20, r24
    2e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e6c:	28 2f       	mov	r18, r24
    2e6e:	30 e0       	ldi	r19, 0x00	; 0
    2e70:	81 e0       	ldi	r24, 0x01	; 1
    2e72:	90 e0       	ldi	r25, 0x00	; 0
    2e74:	02 2e       	mov	r0, r18
    2e76:	02 c0       	rjmp	.+4      	; 0x2e7c <GPIO_setupPinDirection+0x164>
    2e78:	88 0f       	add	r24, r24
    2e7a:	99 1f       	adc	r25, r25
    2e7c:	0a 94       	dec	r0
    2e7e:	e2 f7       	brpl	.-8      	; 0x2e78 <GPIO_setupPinDirection+0x160>
    2e80:	80 95       	com	r24
    2e82:	84 23       	and	r24, r20
    2e84:	8c 93       	st	X, r24
    2e86:	2b c0       	rjmp	.+86     	; 0x2ede <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    2e88:	8b 81       	ldd	r24, Y+3	; 0x03
    2e8a:	81 30       	cpi	r24, 0x01	; 1
    2e8c:	a1 f4       	brne	.+40     	; 0x2eb6 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    2e8e:	a1 e3       	ldi	r26, 0x31	; 49
    2e90:	b0 e0       	ldi	r27, 0x00	; 0
    2e92:	e1 e3       	ldi	r30, 0x31	; 49
    2e94:	f0 e0       	ldi	r31, 0x00	; 0
    2e96:	80 81       	ld	r24, Z
    2e98:	48 2f       	mov	r20, r24
    2e9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e9c:	28 2f       	mov	r18, r24
    2e9e:	30 e0       	ldi	r19, 0x00	; 0
    2ea0:	81 e0       	ldi	r24, 0x01	; 1
    2ea2:	90 e0       	ldi	r25, 0x00	; 0
    2ea4:	02 2e       	mov	r0, r18
    2ea6:	02 c0       	rjmp	.+4      	; 0x2eac <GPIO_setupPinDirection+0x194>
    2ea8:	88 0f       	add	r24, r24
    2eaa:	99 1f       	adc	r25, r25
    2eac:	0a 94       	dec	r0
    2eae:	e2 f7       	brpl	.-8      	; 0x2ea8 <GPIO_setupPinDirection+0x190>
    2eb0:	84 2b       	or	r24, r20
    2eb2:	8c 93       	st	X, r24
    2eb4:	14 c0       	rjmp	.+40     	; 0x2ede <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    2eb6:	a1 e3       	ldi	r26, 0x31	; 49
    2eb8:	b0 e0       	ldi	r27, 0x00	; 0
    2eba:	e1 e3       	ldi	r30, 0x31	; 49
    2ebc:	f0 e0       	ldi	r31, 0x00	; 0
    2ebe:	80 81       	ld	r24, Z
    2ec0:	48 2f       	mov	r20, r24
    2ec2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ec4:	28 2f       	mov	r18, r24
    2ec6:	30 e0       	ldi	r19, 0x00	; 0
    2ec8:	81 e0       	ldi	r24, 0x01	; 1
    2eca:	90 e0       	ldi	r25, 0x00	; 0
    2ecc:	02 2e       	mov	r0, r18
    2ece:	02 c0       	rjmp	.+4      	; 0x2ed4 <GPIO_setupPinDirection+0x1bc>
    2ed0:	88 0f       	add	r24, r24
    2ed2:	99 1f       	adc	r25, r25
    2ed4:	0a 94       	dec	r0
    2ed6:	e2 f7       	brpl	.-8      	; 0x2ed0 <GPIO_setupPinDirection+0x1b8>
    2ed8:	80 95       	com	r24
    2eda:	84 23       	and	r24, r20
    2edc:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2ede:	0f 90       	pop	r0
    2ee0:	0f 90       	pop	r0
    2ee2:	0f 90       	pop	r0
    2ee4:	0f 90       	pop	r0
    2ee6:	0f 90       	pop	r0
    2ee8:	cf 91       	pop	r28
    2eea:	df 91       	pop	r29
    2eec:	08 95       	ret

00002eee <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    2eee:	df 93       	push	r29
    2ef0:	cf 93       	push	r28
    2ef2:	00 d0       	rcall	.+0      	; 0x2ef4 <GPIO_writePin+0x6>
    2ef4:	00 d0       	rcall	.+0      	; 0x2ef6 <GPIO_writePin+0x8>
    2ef6:	0f 92       	push	r0
    2ef8:	cd b7       	in	r28, 0x3d	; 61
    2efa:	de b7       	in	r29, 0x3e	; 62
    2efc:	89 83       	std	Y+1, r24	; 0x01
    2efe:	6a 83       	std	Y+2, r22	; 0x02
    2f00:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2f02:	8a 81       	ldd	r24, Y+2	; 0x02
    2f04:	88 30       	cpi	r24, 0x08	; 8
    2f06:	08 f0       	brcs	.+2      	; 0x2f0a <GPIO_writePin+0x1c>
    2f08:	d5 c0       	rjmp	.+426    	; 0x30b4 <GPIO_writePin+0x1c6>
    2f0a:	89 81       	ldd	r24, Y+1	; 0x01
    2f0c:	84 30       	cpi	r24, 0x04	; 4
    2f0e:	08 f0       	brcs	.+2      	; 0x2f12 <GPIO_writePin+0x24>
    2f10:	d1 c0       	rjmp	.+418    	; 0x30b4 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    2f12:	89 81       	ldd	r24, Y+1	; 0x01
    2f14:	28 2f       	mov	r18, r24
    2f16:	30 e0       	ldi	r19, 0x00	; 0
    2f18:	3d 83       	std	Y+5, r19	; 0x05
    2f1a:	2c 83       	std	Y+4, r18	; 0x04
    2f1c:	8c 81       	ldd	r24, Y+4	; 0x04
    2f1e:	9d 81       	ldd	r25, Y+5	; 0x05
    2f20:	81 30       	cpi	r24, 0x01	; 1
    2f22:	91 05       	cpc	r25, r1
    2f24:	09 f4       	brne	.+2      	; 0x2f28 <GPIO_writePin+0x3a>
    2f26:	43 c0       	rjmp	.+134    	; 0x2fae <GPIO_writePin+0xc0>
    2f28:	2c 81       	ldd	r18, Y+4	; 0x04
    2f2a:	3d 81       	ldd	r19, Y+5	; 0x05
    2f2c:	22 30       	cpi	r18, 0x02	; 2
    2f2e:	31 05       	cpc	r19, r1
    2f30:	2c f4       	brge	.+10     	; 0x2f3c <GPIO_writePin+0x4e>
    2f32:	8c 81       	ldd	r24, Y+4	; 0x04
    2f34:	9d 81       	ldd	r25, Y+5	; 0x05
    2f36:	00 97       	sbiw	r24, 0x00	; 0
    2f38:	71 f0       	breq	.+28     	; 0x2f56 <GPIO_writePin+0x68>
    2f3a:	bc c0       	rjmp	.+376    	; 0x30b4 <GPIO_writePin+0x1c6>
    2f3c:	2c 81       	ldd	r18, Y+4	; 0x04
    2f3e:	3d 81       	ldd	r19, Y+5	; 0x05
    2f40:	22 30       	cpi	r18, 0x02	; 2
    2f42:	31 05       	cpc	r19, r1
    2f44:	09 f4       	brne	.+2      	; 0x2f48 <GPIO_writePin+0x5a>
    2f46:	5f c0       	rjmp	.+190    	; 0x3006 <GPIO_writePin+0x118>
    2f48:	8c 81       	ldd	r24, Y+4	; 0x04
    2f4a:	9d 81       	ldd	r25, Y+5	; 0x05
    2f4c:	83 30       	cpi	r24, 0x03	; 3
    2f4e:	91 05       	cpc	r25, r1
    2f50:	09 f4       	brne	.+2      	; 0x2f54 <GPIO_writePin+0x66>
    2f52:	85 c0       	rjmp	.+266    	; 0x305e <GPIO_writePin+0x170>
    2f54:	af c0       	rjmp	.+350    	; 0x30b4 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    2f56:	8b 81       	ldd	r24, Y+3	; 0x03
    2f58:	81 30       	cpi	r24, 0x01	; 1
    2f5a:	a1 f4       	brne	.+40     	; 0x2f84 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    2f5c:	ab e3       	ldi	r26, 0x3B	; 59
    2f5e:	b0 e0       	ldi	r27, 0x00	; 0
    2f60:	eb e3       	ldi	r30, 0x3B	; 59
    2f62:	f0 e0       	ldi	r31, 0x00	; 0
    2f64:	80 81       	ld	r24, Z
    2f66:	48 2f       	mov	r20, r24
    2f68:	8a 81       	ldd	r24, Y+2	; 0x02
    2f6a:	28 2f       	mov	r18, r24
    2f6c:	30 e0       	ldi	r19, 0x00	; 0
    2f6e:	81 e0       	ldi	r24, 0x01	; 1
    2f70:	90 e0       	ldi	r25, 0x00	; 0
    2f72:	02 2e       	mov	r0, r18
    2f74:	02 c0       	rjmp	.+4      	; 0x2f7a <GPIO_writePin+0x8c>
    2f76:	88 0f       	add	r24, r24
    2f78:	99 1f       	adc	r25, r25
    2f7a:	0a 94       	dec	r0
    2f7c:	e2 f7       	brpl	.-8      	; 0x2f76 <GPIO_writePin+0x88>
    2f7e:	84 2b       	or	r24, r20
    2f80:	8c 93       	st	X, r24
    2f82:	98 c0       	rjmp	.+304    	; 0x30b4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    2f84:	ab e3       	ldi	r26, 0x3B	; 59
    2f86:	b0 e0       	ldi	r27, 0x00	; 0
    2f88:	eb e3       	ldi	r30, 0x3B	; 59
    2f8a:	f0 e0       	ldi	r31, 0x00	; 0
    2f8c:	80 81       	ld	r24, Z
    2f8e:	48 2f       	mov	r20, r24
    2f90:	8a 81       	ldd	r24, Y+2	; 0x02
    2f92:	28 2f       	mov	r18, r24
    2f94:	30 e0       	ldi	r19, 0x00	; 0
    2f96:	81 e0       	ldi	r24, 0x01	; 1
    2f98:	90 e0       	ldi	r25, 0x00	; 0
    2f9a:	02 2e       	mov	r0, r18
    2f9c:	02 c0       	rjmp	.+4      	; 0x2fa2 <GPIO_writePin+0xb4>
    2f9e:	88 0f       	add	r24, r24
    2fa0:	99 1f       	adc	r25, r25
    2fa2:	0a 94       	dec	r0
    2fa4:	e2 f7       	brpl	.-8      	; 0x2f9e <GPIO_writePin+0xb0>
    2fa6:	80 95       	com	r24
    2fa8:	84 23       	and	r24, r20
    2faa:	8c 93       	st	X, r24
    2fac:	83 c0       	rjmp	.+262    	; 0x30b4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    2fae:	8b 81       	ldd	r24, Y+3	; 0x03
    2fb0:	81 30       	cpi	r24, 0x01	; 1
    2fb2:	a1 f4       	brne	.+40     	; 0x2fdc <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    2fb4:	a8 e3       	ldi	r26, 0x38	; 56
    2fb6:	b0 e0       	ldi	r27, 0x00	; 0
    2fb8:	e8 e3       	ldi	r30, 0x38	; 56
    2fba:	f0 e0       	ldi	r31, 0x00	; 0
    2fbc:	80 81       	ld	r24, Z
    2fbe:	48 2f       	mov	r20, r24
    2fc0:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc2:	28 2f       	mov	r18, r24
    2fc4:	30 e0       	ldi	r19, 0x00	; 0
    2fc6:	81 e0       	ldi	r24, 0x01	; 1
    2fc8:	90 e0       	ldi	r25, 0x00	; 0
    2fca:	02 2e       	mov	r0, r18
    2fcc:	02 c0       	rjmp	.+4      	; 0x2fd2 <GPIO_writePin+0xe4>
    2fce:	88 0f       	add	r24, r24
    2fd0:	99 1f       	adc	r25, r25
    2fd2:	0a 94       	dec	r0
    2fd4:	e2 f7       	brpl	.-8      	; 0x2fce <GPIO_writePin+0xe0>
    2fd6:	84 2b       	or	r24, r20
    2fd8:	8c 93       	st	X, r24
    2fda:	6c c0       	rjmp	.+216    	; 0x30b4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    2fdc:	a8 e3       	ldi	r26, 0x38	; 56
    2fde:	b0 e0       	ldi	r27, 0x00	; 0
    2fe0:	e8 e3       	ldi	r30, 0x38	; 56
    2fe2:	f0 e0       	ldi	r31, 0x00	; 0
    2fe4:	80 81       	ld	r24, Z
    2fe6:	48 2f       	mov	r20, r24
    2fe8:	8a 81       	ldd	r24, Y+2	; 0x02
    2fea:	28 2f       	mov	r18, r24
    2fec:	30 e0       	ldi	r19, 0x00	; 0
    2fee:	81 e0       	ldi	r24, 0x01	; 1
    2ff0:	90 e0       	ldi	r25, 0x00	; 0
    2ff2:	02 2e       	mov	r0, r18
    2ff4:	02 c0       	rjmp	.+4      	; 0x2ffa <GPIO_writePin+0x10c>
    2ff6:	88 0f       	add	r24, r24
    2ff8:	99 1f       	adc	r25, r25
    2ffa:	0a 94       	dec	r0
    2ffc:	e2 f7       	brpl	.-8      	; 0x2ff6 <GPIO_writePin+0x108>
    2ffe:	80 95       	com	r24
    3000:	84 23       	and	r24, r20
    3002:	8c 93       	st	X, r24
    3004:	57 c0       	rjmp	.+174    	; 0x30b4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    3006:	8b 81       	ldd	r24, Y+3	; 0x03
    3008:	81 30       	cpi	r24, 0x01	; 1
    300a:	a1 f4       	brne	.+40     	; 0x3034 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    300c:	a5 e3       	ldi	r26, 0x35	; 53
    300e:	b0 e0       	ldi	r27, 0x00	; 0
    3010:	e5 e3       	ldi	r30, 0x35	; 53
    3012:	f0 e0       	ldi	r31, 0x00	; 0
    3014:	80 81       	ld	r24, Z
    3016:	48 2f       	mov	r20, r24
    3018:	8a 81       	ldd	r24, Y+2	; 0x02
    301a:	28 2f       	mov	r18, r24
    301c:	30 e0       	ldi	r19, 0x00	; 0
    301e:	81 e0       	ldi	r24, 0x01	; 1
    3020:	90 e0       	ldi	r25, 0x00	; 0
    3022:	02 2e       	mov	r0, r18
    3024:	02 c0       	rjmp	.+4      	; 0x302a <GPIO_writePin+0x13c>
    3026:	88 0f       	add	r24, r24
    3028:	99 1f       	adc	r25, r25
    302a:	0a 94       	dec	r0
    302c:	e2 f7       	brpl	.-8      	; 0x3026 <GPIO_writePin+0x138>
    302e:	84 2b       	or	r24, r20
    3030:	8c 93       	st	X, r24
    3032:	40 c0       	rjmp	.+128    	; 0x30b4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    3034:	a5 e3       	ldi	r26, 0x35	; 53
    3036:	b0 e0       	ldi	r27, 0x00	; 0
    3038:	e5 e3       	ldi	r30, 0x35	; 53
    303a:	f0 e0       	ldi	r31, 0x00	; 0
    303c:	80 81       	ld	r24, Z
    303e:	48 2f       	mov	r20, r24
    3040:	8a 81       	ldd	r24, Y+2	; 0x02
    3042:	28 2f       	mov	r18, r24
    3044:	30 e0       	ldi	r19, 0x00	; 0
    3046:	81 e0       	ldi	r24, 0x01	; 1
    3048:	90 e0       	ldi	r25, 0x00	; 0
    304a:	02 2e       	mov	r0, r18
    304c:	02 c0       	rjmp	.+4      	; 0x3052 <GPIO_writePin+0x164>
    304e:	88 0f       	add	r24, r24
    3050:	99 1f       	adc	r25, r25
    3052:	0a 94       	dec	r0
    3054:	e2 f7       	brpl	.-8      	; 0x304e <GPIO_writePin+0x160>
    3056:	80 95       	com	r24
    3058:	84 23       	and	r24, r20
    305a:	8c 93       	st	X, r24
    305c:	2b c0       	rjmp	.+86     	; 0x30b4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    305e:	8b 81       	ldd	r24, Y+3	; 0x03
    3060:	81 30       	cpi	r24, 0x01	; 1
    3062:	a1 f4       	brne	.+40     	; 0x308c <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    3064:	a2 e3       	ldi	r26, 0x32	; 50
    3066:	b0 e0       	ldi	r27, 0x00	; 0
    3068:	e2 e3       	ldi	r30, 0x32	; 50
    306a:	f0 e0       	ldi	r31, 0x00	; 0
    306c:	80 81       	ld	r24, Z
    306e:	48 2f       	mov	r20, r24
    3070:	8a 81       	ldd	r24, Y+2	; 0x02
    3072:	28 2f       	mov	r18, r24
    3074:	30 e0       	ldi	r19, 0x00	; 0
    3076:	81 e0       	ldi	r24, 0x01	; 1
    3078:	90 e0       	ldi	r25, 0x00	; 0
    307a:	02 2e       	mov	r0, r18
    307c:	02 c0       	rjmp	.+4      	; 0x3082 <GPIO_writePin+0x194>
    307e:	88 0f       	add	r24, r24
    3080:	99 1f       	adc	r25, r25
    3082:	0a 94       	dec	r0
    3084:	e2 f7       	brpl	.-8      	; 0x307e <GPIO_writePin+0x190>
    3086:	84 2b       	or	r24, r20
    3088:	8c 93       	st	X, r24
    308a:	14 c0       	rjmp	.+40     	; 0x30b4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    308c:	a2 e3       	ldi	r26, 0x32	; 50
    308e:	b0 e0       	ldi	r27, 0x00	; 0
    3090:	e2 e3       	ldi	r30, 0x32	; 50
    3092:	f0 e0       	ldi	r31, 0x00	; 0
    3094:	80 81       	ld	r24, Z
    3096:	48 2f       	mov	r20, r24
    3098:	8a 81       	ldd	r24, Y+2	; 0x02
    309a:	28 2f       	mov	r18, r24
    309c:	30 e0       	ldi	r19, 0x00	; 0
    309e:	81 e0       	ldi	r24, 0x01	; 1
    30a0:	90 e0       	ldi	r25, 0x00	; 0
    30a2:	02 2e       	mov	r0, r18
    30a4:	02 c0       	rjmp	.+4      	; 0x30aa <GPIO_writePin+0x1bc>
    30a6:	88 0f       	add	r24, r24
    30a8:	99 1f       	adc	r25, r25
    30aa:	0a 94       	dec	r0
    30ac:	e2 f7       	brpl	.-8      	; 0x30a6 <GPIO_writePin+0x1b8>
    30ae:	80 95       	com	r24
    30b0:	84 23       	and	r24, r20
    30b2:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    30b4:	0f 90       	pop	r0
    30b6:	0f 90       	pop	r0
    30b8:	0f 90       	pop	r0
    30ba:	0f 90       	pop	r0
    30bc:	0f 90       	pop	r0
    30be:	cf 91       	pop	r28
    30c0:	df 91       	pop	r29
    30c2:	08 95       	ret

000030c4 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    30c4:	df 93       	push	r29
    30c6:	cf 93       	push	r28
    30c8:	00 d0       	rcall	.+0      	; 0x30ca <GPIO_readPin+0x6>
    30ca:	00 d0       	rcall	.+0      	; 0x30cc <GPIO_readPin+0x8>
    30cc:	0f 92       	push	r0
    30ce:	cd b7       	in	r28, 0x3d	; 61
    30d0:	de b7       	in	r29, 0x3e	; 62
    30d2:	8a 83       	std	Y+2, r24	; 0x02
    30d4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    30d6:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    30d8:	8b 81       	ldd	r24, Y+3	; 0x03
    30da:	88 30       	cpi	r24, 0x08	; 8
    30dc:	08 f0       	brcs	.+2      	; 0x30e0 <GPIO_readPin+0x1c>
    30de:	84 c0       	rjmp	.+264    	; 0x31e8 <GPIO_readPin+0x124>
    30e0:	8a 81       	ldd	r24, Y+2	; 0x02
    30e2:	84 30       	cpi	r24, 0x04	; 4
    30e4:	08 f0       	brcs	.+2      	; 0x30e8 <GPIO_readPin+0x24>
    30e6:	80 c0       	rjmp	.+256    	; 0x31e8 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    30e8:	8a 81       	ldd	r24, Y+2	; 0x02
    30ea:	28 2f       	mov	r18, r24
    30ec:	30 e0       	ldi	r19, 0x00	; 0
    30ee:	3d 83       	std	Y+5, r19	; 0x05
    30f0:	2c 83       	std	Y+4, r18	; 0x04
    30f2:	4c 81       	ldd	r20, Y+4	; 0x04
    30f4:	5d 81       	ldd	r21, Y+5	; 0x05
    30f6:	41 30       	cpi	r20, 0x01	; 1
    30f8:	51 05       	cpc	r21, r1
    30fa:	79 f1       	breq	.+94     	; 0x315a <GPIO_readPin+0x96>
    30fc:	8c 81       	ldd	r24, Y+4	; 0x04
    30fe:	9d 81       	ldd	r25, Y+5	; 0x05
    3100:	82 30       	cpi	r24, 0x02	; 2
    3102:	91 05       	cpc	r25, r1
    3104:	34 f4       	brge	.+12     	; 0x3112 <GPIO_readPin+0x4e>
    3106:	2c 81       	ldd	r18, Y+4	; 0x04
    3108:	3d 81       	ldd	r19, Y+5	; 0x05
    310a:	21 15       	cp	r18, r1
    310c:	31 05       	cpc	r19, r1
    310e:	69 f0       	breq	.+26     	; 0x312a <GPIO_readPin+0x66>
    3110:	6b c0       	rjmp	.+214    	; 0x31e8 <GPIO_readPin+0x124>
    3112:	4c 81       	ldd	r20, Y+4	; 0x04
    3114:	5d 81       	ldd	r21, Y+5	; 0x05
    3116:	42 30       	cpi	r20, 0x02	; 2
    3118:	51 05       	cpc	r21, r1
    311a:	b9 f1       	breq	.+110    	; 0x318a <GPIO_readPin+0xc6>
    311c:	8c 81       	ldd	r24, Y+4	; 0x04
    311e:	9d 81       	ldd	r25, Y+5	; 0x05
    3120:	83 30       	cpi	r24, 0x03	; 3
    3122:	91 05       	cpc	r25, r1
    3124:	09 f4       	brne	.+2      	; 0x3128 <GPIO_readPin+0x64>
    3126:	49 c0       	rjmp	.+146    	; 0x31ba <GPIO_readPin+0xf6>
    3128:	5f c0       	rjmp	.+190    	; 0x31e8 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    312a:	e9 e3       	ldi	r30, 0x39	; 57
    312c:	f0 e0       	ldi	r31, 0x00	; 0
    312e:	80 81       	ld	r24, Z
    3130:	28 2f       	mov	r18, r24
    3132:	30 e0       	ldi	r19, 0x00	; 0
    3134:	8b 81       	ldd	r24, Y+3	; 0x03
    3136:	88 2f       	mov	r24, r24
    3138:	90 e0       	ldi	r25, 0x00	; 0
    313a:	a9 01       	movw	r20, r18
    313c:	02 c0       	rjmp	.+4      	; 0x3142 <GPIO_readPin+0x7e>
    313e:	55 95       	asr	r21
    3140:	47 95       	ror	r20
    3142:	8a 95       	dec	r24
    3144:	e2 f7       	brpl	.-8      	; 0x313e <GPIO_readPin+0x7a>
    3146:	ca 01       	movw	r24, r20
    3148:	81 70       	andi	r24, 0x01	; 1
    314a:	90 70       	andi	r25, 0x00	; 0
    314c:	88 23       	and	r24, r24
    314e:	19 f0       	breq	.+6      	; 0x3156 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    3150:	81 e0       	ldi	r24, 0x01	; 1
    3152:	89 83       	std	Y+1, r24	; 0x01
    3154:	49 c0       	rjmp	.+146    	; 0x31e8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    3156:	19 82       	std	Y+1, r1	; 0x01
    3158:	47 c0       	rjmp	.+142    	; 0x31e8 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    315a:	e6 e3       	ldi	r30, 0x36	; 54
    315c:	f0 e0       	ldi	r31, 0x00	; 0
    315e:	80 81       	ld	r24, Z
    3160:	28 2f       	mov	r18, r24
    3162:	30 e0       	ldi	r19, 0x00	; 0
    3164:	8b 81       	ldd	r24, Y+3	; 0x03
    3166:	88 2f       	mov	r24, r24
    3168:	90 e0       	ldi	r25, 0x00	; 0
    316a:	a9 01       	movw	r20, r18
    316c:	02 c0       	rjmp	.+4      	; 0x3172 <GPIO_readPin+0xae>
    316e:	55 95       	asr	r21
    3170:	47 95       	ror	r20
    3172:	8a 95       	dec	r24
    3174:	e2 f7       	brpl	.-8      	; 0x316e <GPIO_readPin+0xaa>
    3176:	ca 01       	movw	r24, r20
    3178:	81 70       	andi	r24, 0x01	; 1
    317a:	90 70       	andi	r25, 0x00	; 0
    317c:	88 23       	and	r24, r24
    317e:	19 f0       	breq	.+6      	; 0x3186 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    3180:	81 e0       	ldi	r24, 0x01	; 1
    3182:	89 83       	std	Y+1, r24	; 0x01
    3184:	31 c0       	rjmp	.+98     	; 0x31e8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    3186:	19 82       	std	Y+1, r1	; 0x01
    3188:	2f c0       	rjmp	.+94     	; 0x31e8 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    318a:	e3 e3       	ldi	r30, 0x33	; 51
    318c:	f0 e0       	ldi	r31, 0x00	; 0
    318e:	80 81       	ld	r24, Z
    3190:	28 2f       	mov	r18, r24
    3192:	30 e0       	ldi	r19, 0x00	; 0
    3194:	8b 81       	ldd	r24, Y+3	; 0x03
    3196:	88 2f       	mov	r24, r24
    3198:	90 e0       	ldi	r25, 0x00	; 0
    319a:	a9 01       	movw	r20, r18
    319c:	02 c0       	rjmp	.+4      	; 0x31a2 <GPIO_readPin+0xde>
    319e:	55 95       	asr	r21
    31a0:	47 95       	ror	r20
    31a2:	8a 95       	dec	r24
    31a4:	e2 f7       	brpl	.-8      	; 0x319e <GPIO_readPin+0xda>
    31a6:	ca 01       	movw	r24, r20
    31a8:	81 70       	andi	r24, 0x01	; 1
    31aa:	90 70       	andi	r25, 0x00	; 0
    31ac:	88 23       	and	r24, r24
    31ae:	19 f0       	breq	.+6      	; 0x31b6 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    31b0:	81 e0       	ldi	r24, 0x01	; 1
    31b2:	89 83       	std	Y+1, r24	; 0x01
    31b4:	19 c0       	rjmp	.+50     	; 0x31e8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    31b6:	19 82       	std	Y+1, r1	; 0x01
    31b8:	17 c0       	rjmp	.+46     	; 0x31e8 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    31ba:	e0 e3       	ldi	r30, 0x30	; 48
    31bc:	f0 e0       	ldi	r31, 0x00	; 0
    31be:	80 81       	ld	r24, Z
    31c0:	28 2f       	mov	r18, r24
    31c2:	30 e0       	ldi	r19, 0x00	; 0
    31c4:	8b 81       	ldd	r24, Y+3	; 0x03
    31c6:	88 2f       	mov	r24, r24
    31c8:	90 e0       	ldi	r25, 0x00	; 0
    31ca:	a9 01       	movw	r20, r18
    31cc:	02 c0       	rjmp	.+4      	; 0x31d2 <GPIO_readPin+0x10e>
    31ce:	55 95       	asr	r21
    31d0:	47 95       	ror	r20
    31d2:	8a 95       	dec	r24
    31d4:	e2 f7       	brpl	.-8      	; 0x31ce <GPIO_readPin+0x10a>
    31d6:	ca 01       	movw	r24, r20
    31d8:	81 70       	andi	r24, 0x01	; 1
    31da:	90 70       	andi	r25, 0x00	; 0
    31dc:	88 23       	and	r24, r24
    31de:	19 f0       	breq	.+6      	; 0x31e6 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    31e0:	81 e0       	ldi	r24, 0x01	; 1
    31e2:	89 83       	std	Y+1, r24	; 0x01
    31e4:	01 c0       	rjmp	.+2      	; 0x31e8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    31e6:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    31e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    31ea:	0f 90       	pop	r0
    31ec:	0f 90       	pop	r0
    31ee:	0f 90       	pop	r0
    31f0:	0f 90       	pop	r0
    31f2:	0f 90       	pop	r0
    31f4:	cf 91       	pop	r28
    31f6:	df 91       	pop	r29
    31f8:	08 95       	ret

000031fa <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    31fa:	df 93       	push	r29
    31fc:	cf 93       	push	r28
    31fe:	00 d0       	rcall	.+0      	; 0x3200 <GPIO_setupPortDirection+0x6>
    3200:	00 d0       	rcall	.+0      	; 0x3202 <GPIO_setupPortDirection+0x8>
    3202:	cd b7       	in	r28, 0x3d	; 61
    3204:	de b7       	in	r29, 0x3e	; 62
    3206:	89 83       	std	Y+1, r24	; 0x01
    3208:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    320a:	89 81       	ldd	r24, Y+1	; 0x01
    320c:	84 30       	cpi	r24, 0x04	; 4
    320e:	90 f5       	brcc	.+100    	; 0x3274 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    3210:	89 81       	ldd	r24, Y+1	; 0x01
    3212:	28 2f       	mov	r18, r24
    3214:	30 e0       	ldi	r19, 0x00	; 0
    3216:	3c 83       	std	Y+4, r19	; 0x04
    3218:	2b 83       	std	Y+3, r18	; 0x03
    321a:	8b 81       	ldd	r24, Y+3	; 0x03
    321c:	9c 81       	ldd	r25, Y+4	; 0x04
    321e:	81 30       	cpi	r24, 0x01	; 1
    3220:	91 05       	cpc	r25, r1
    3222:	d1 f0       	breq	.+52     	; 0x3258 <GPIO_setupPortDirection+0x5e>
    3224:	2b 81       	ldd	r18, Y+3	; 0x03
    3226:	3c 81       	ldd	r19, Y+4	; 0x04
    3228:	22 30       	cpi	r18, 0x02	; 2
    322a:	31 05       	cpc	r19, r1
    322c:	2c f4       	brge	.+10     	; 0x3238 <GPIO_setupPortDirection+0x3e>
    322e:	8b 81       	ldd	r24, Y+3	; 0x03
    3230:	9c 81       	ldd	r25, Y+4	; 0x04
    3232:	00 97       	sbiw	r24, 0x00	; 0
    3234:	61 f0       	breq	.+24     	; 0x324e <GPIO_setupPortDirection+0x54>
    3236:	1e c0       	rjmp	.+60     	; 0x3274 <GPIO_setupPortDirection+0x7a>
    3238:	2b 81       	ldd	r18, Y+3	; 0x03
    323a:	3c 81       	ldd	r19, Y+4	; 0x04
    323c:	22 30       	cpi	r18, 0x02	; 2
    323e:	31 05       	cpc	r19, r1
    3240:	81 f0       	breq	.+32     	; 0x3262 <GPIO_setupPortDirection+0x68>
    3242:	8b 81       	ldd	r24, Y+3	; 0x03
    3244:	9c 81       	ldd	r25, Y+4	; 0x04
    3246:	83 30       	cpi	r24, 0x03	; 3
    3248:	91 05       	cpc	r25, r1
    324a:	81 f0       	breq	.+32     	; 0x326c <GPIO_setupPortDirection+0x72>
    324c:	13 c0       	rjmp	.+38     	; 0x3274 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    324e:	ea e3       	ldi	r30, 0x3A	; 58
    3250:	f0 e0       	ldi	r31, 0x00	; 0
    3252:	8a 81       	ldd	r24, Y+2	; 0x02
    3254:	80 83       	st	Z, r24
    3256:	0e c0       	rjmp	.+28     	; 0x3274 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    3258:	e7 e3       	ldi	r30, 0x37	; 55
    325a:	f0 e0       	ldi	r31, 0x00	; 0
    325c:	8a 81       	ldd	r24, Y+2	; 0x02
    325e:	80 83       	st	Z, r24
    3260:	09 c0       	rjmp	.+18     	; 0x3274 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    3262:	e4 e3       	ldi	r30, 0x34	; 52
    3264:	f0 e0       	ldi	r31, 0x00	; 0
    3266:	8a 81       	ldd	r24, Y+2	; 0x02
    3268:	80 83       	st	Z, r24
    326a:	04 c0       	rjmp	.+8      	; 0x3274 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    326c:	e1 e3       	ldi	r30, 0x31	; 49
    326e:	f0 e0       	ldi	r31, 0x00	; 0
    3270:	8a 81       	ldd	r24, Y+2	; 0x02
    3272:	80 83       	st	Z, r24
			break;
		}
	}
}
    3274:	0f 90       	pop	r0
    3276:	0f 90       	pop	r0
    3278:	0f 90       	pop	r0
    327a:	0f 90       	pop	r0
    327c:	cf 91       	pop	r28
    327e:	df 91       	pop	r29
    3280:	08 95       	ret

00003282 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    3282:	df 93       	push	r29
    3284:	cf 93       	push	r28
    3286:	00 d0       	rcall	.+0      	; 0x3288 <GPIO_writePort+0x6>
    3288:	00 d0       	rcall	.+0      	; 0x328a <GPIO_writePort+0x8>
    328a:	cd b7       	in	r28, 0x3d	; 61
    328c:	de b7       	in	r29, 0x3e	; 62
    328e:	89 83       	std	Y+1, r24	; 0x01
    3290:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    3292:	89 81       	ldd	r24, Y+1	; 0x01
    3294:	84 30       	cpi	r24, 0x04	; 4
    3296:	90 f5       	brcc	.+100    	; 0x32fc <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    3298:	89 81       	ldd	r24, Y+1	; 0x01
    329a:	28 2f       	mov	r18, r24
    329c:	30 e0       	ldi	r19, 0x00	; 0
    329e:	3c 83       	std	Y+4, r19	; 0x04
    32a0:	2b 83       	std	Y+3, r18	; 0x03
    32a2:	8b 81       	ldd	r24, Y+3	; 0x03
    32a4:	9c 81       	ldd	r25, Y+4	; 0x04
    32a6:	81 30       	cpi	r24, 0x01	; 1
    32a8:	91 05       	cpc	r25, r1
    32aa:	d1 f0       	breq	.+52     	; 0x32e0 <GPIO_writePort+0x5e>
    32ac:	2b 81       	ldd	r18, Y+3	; 0x03
    32ae:	3c 81       	ldd	r19, Y+4	; 0x04
    32b0:	22 30       	cpi	r18, 0x02	; 2
    32b2:	31 05       	cpc	r19, r1
    32b4:	2c f4       	brge	.+10     	; 0x32c0 <GPIO_writePort+0x3e>
    32b6:	8b 81       	ldd	r24, Y+3	; 0x03
    32b8:	9c 81       	ldd	r25, Y+4	; 0x04
    32ba:	00 97       	sbiw	r24, 0x00	; 0
    32bc:	61 f0       	breq	.+24     	; 0x32d6 <GPIO_writePort+0x54>
    32be:	1e c0       	rjmp	.+60     	; 0x32fc <GPIO_writePort+0x7a>
    32c0:	2b 81       	ldd	r18, Y+3	; 0x03
    32c2:	3c 81       	ldd	r19, Y+4	; 0x04
    32c4:	22 30       	cpi	r18, 0x02	; 2
    32c6:	31 05       	cpc	r19, r1
    32c8:	81 f0       	breq	.+32     	; 0x32ea <GPIO_writePort+0x68>
    32ca:	8b 81       	ldd	r24, Y+3	; 0x03
    32cc:	9c 81       	ldd	r25, Y+4	; 0x04
    32ce:	83 30       	cpi	r24, 0x03	; 3
    32d0:	91 05       	cpc	r25, r1
    32d2:	81 f0       	breq	.+32     	; 0x32f4 <GPIO_writePort+0x72>
    32d4:	13 c0       	rjmp	.+38     	; 0x32fc <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    32d6:	eb e3       	ldi	r30, 0x3B	; 59
    32d8:	f0 e0       	ldi	r31, 0x00	; 0
    32da:	8a 81       	ldd	r24, Y+2	; 0x02
    32dc:	80 83       	st	Z, r24
    32de:	0e c0       	rjmp	.+28     	; 0x32fc <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    32e0:	e8 e3       	ldi	r30, 0x38	; 56
    32e2:	f0 e0       	ldi	r31, 0x00	; 0
    32e4:	8a 81       	ldd	r24, Y+2	; 0x02
    32e6:	80 83       	st	Z, r24
    32e8:	09 c0       	rjmp	.+18     	; 0x32fc <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    32ea:	e5 e3       	ldi	r30, 0x35	; 53
    32ec:	f0 e0       	ldi	r31, 0x00	; 0
    32ee:	8a 81       	ldd	r24, Y+2	; 0x02
    32f0:	80 83       	st	Z, r24
    32f2:	04 c0       	rjmp	.+8      	; 0x32fc <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    32f4:	e2 e3       	ldi	r30, 0x32	; 50
    32f6:	f0 e0       	ldi	r31, 0x00	; 0
    32f8:	8a 81       	ldd	r24, Y+2	; 0x02
    32fa:	80 83       	st	Z, r24
			break;
		}
	}
}
    32fc:	0f 90       	pop	r0
    32fe:	0f 90       	pop	r0
    3300:	0f 90       	pop	r0
    3302:	0f 90       	pop	r0
    3304:	cf 91       	pop	r28
    3306:	df 91       	pop	r29
    3308:	08 95       	ret

0000330a <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    330a:	df 93       	push	r29
    330c:	cf 93       	push	r28
    330e:	00 d0       	rcall	.+0      	; 0x3310 <GPIO_readPort+0x6>
    3310:	00 d0       	rcall	.+0      	; 0x3312 <GPIO_readPort+0x8>
    3312:	cd b7       	in	r28, 0x3d	; 61
    3314:	de b7       	in	r29, 0x3e	; 62
    3316:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    3318:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    331a:	8a 81       	ldd	r24, Y+2	; 0x02
    331c:	84 30       	cpi	r24, 0x04	; 4
    331e:	90 f5       	brcc	.+100    	; 0x3384 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    3320:	8a 81       	ldd	r24, Y+2	; 0x02
    3322:	28 2f       	mov	r18, r24
    3324:	30 e0       	ldi	r19, 0x00	; 0
    3326:	3c 83       	std	Y+4, r19	; 0x04
    3328:	2b 83       	std	Y+3, r18	; 0x03
    332a:	8b 81       	ldd	r24, Y+3	; 0x03
    332c:	9c 81       	ldd	r25, Y+4	; 0x04
    332e:	81 30       	cpi	r24, 0x01	; 1
    3330:	91 05       	cpc	r25, r1
    3332:	d1 f0       	breq	.+52     	; 0x3368 <GPIO_readPort+0x5e>
    3334:	2b 81       	ldd	r18, Y+3	; 0x03
    3336:	3c 81       	ldd	r19, Y+4	; 0x04
    3338:	22 30       	cpi	r18, 0x02	; 2
    333a:	31 05       	cpc	r19, r1
    333c:	2c f4       	brge	.+10     	; 0x3348 <GPIO_readPort+0x3e>
    333e:	8b 81       	ldd	r24, Y+3	; 0x03
    3340:	9c 81       	ldd	r25, Y+4	; 0x04
    3342:	00 97       	sbiw	r24, 0x00	; 0
    3344:	61 f0       	breq	.+24     	; 0x335e <GPIO_readPort+0x54>
    3346:	1e c0       	rjmp	.+60     	; 0x3384 <GPIO_readPort+0x7a>
    3348:	2b 81       	ldd	r18, Y+3	; 0x03
    334a:	3c 81       	ldd	r19, Y+4	; 0x04
    334c:	22 30       	cpi	r18, 0x02	; 2
    334e:	31 05       	cpc	r19, r1
    3350:	81 f0       	breq	.+32     	; 0x3372 <GPIO_readPort+0x68>
    3352:	8b 81       	ldd	r24, Y+3	; 0x03
    3354:	9c 81       	ldd	r25, Y+4	; 0x04
    3356:	83 30       	cpi	r24, 0x03	; 3
    3358:	91 05       	cpc	r25, r1
    335a:	81 f0       	breq	.+32     	; 0x337c <GPIO_readPort+0x72>
    335c:	13 c0       	rjmp	.+38     	; 0x3384 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    335e:	e9 e3       	ldi	r30, 0x39	; 57
    3360:	f0 e0       	ldi	r31, 0x00	; 0
    3362:	80 81       	ld	r24, Z
    3364:	89 83       	std	Y+1, r24	; 0x01
    3366:	0e c0       	rjmp	.+28     	; 0x3384 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    3368:	e6 e3       	ldi	r30, 0x36	; 54
    336a:	f0 e0       	ldi	r31, 0x00	; 0
    336c:	80 81       	ld	r24, Z
    336e:	89 83       	std	Y+1, r24	; 0x01
    3370:	09 c0       	rjmp	.+18     	; 0x3384 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    3372:	e3 e3       	ldi	r30, 0x33	; 51
    3374:	f0 e0       	ldi	r31, 0x00	; 0
    3376:	80 81       	ld	r24, Z
    3378:	89 83       	std	Y+1, r24	; 0x01
    337a:	04 c0       	rjmp	.+8      	; 0x3384 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    337c:	e0 e3       	ldi	r30, 0x30	; 48
    337e:	f0 e0       	ldi	r31, 0x00	; 0
    3380:	80 81       	ld	r24, Z
    3382:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    3384:	89 81       	ldd	r24, Y+1	; 0x01
}
    3386:	0f 90       	pop	r0
    3388:	0f 90       	pop	r0
    338a:	0f 90       	pop	r0
    338c:	0f 90       	pop	r0
    338e:	cf 91       	pop	r28
    3390:	df 91       	pop	r29
    3392:	08 95       	ret

00003394 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    3394:	df 93       	push	r29
    3396:	cf 93       	push	r28
    3398:	00 d0       	rcall	.+0      	; 0x339a <KEYPAD_getPressedKey+0x6>
    339a:	cd b7       	in	r28, 0x3d	; 61
    339c:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    339e:	81 e0       	ldi	r24, 0x01	; 1
    33a0:	64 e0       	ldi	r22, 0x04	; 4
    33a2:	40 e0       	ldi	r20, 0x00	; 0
    33a4:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    33a8:	81 e0       	ldi	r24, 0x01	; 1
    33aa:	65 e0       	ldi	r22, 0x05	; 5
    33ac:	40 e0       	ldi	r20, 0x00	; 0
    33ae:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    33b2:	81 e0       	ldi	r24, 0x01	; 1
    33b4:	66 e0       	ldi	r22, 0x06	; 6
    33b6:	40 e0       	ldi	r20, 0x00	; 0
    33b8:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    33bc:	81 e0       	ldi	r24, 0x01	; 1
    33be:	67 e0       	ldi	r22, 0x07	; 7
    33c0:	40 e0       	ldi	r20, 0x00	; 0
    33c2:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    33c6:	81 e0       	ldi	r24, 0x01	; 1
    33c8:	60 e0       	ldi	r22, 0x00	; 0
    33ca:	40 e0       	ldi	r20, 0x00	; 0
    33cc:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    33d0:	81 e0       	ldi	r24, 0x01	; 1
    33d2:	61 e0       	ldi	r22, 0x01	; 1
    33d4:	40 e0       	ldi	r20, 0x00	; 0
    33d6:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    33da:	81 e0       	ldi	r24, 0x01	; 1
    33dc:	62 e0       	ldi	r22, 0x02	; 2
    33de:	40 e0       	ldi	r20, 0x00	; 0
    33e0:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    33e4:	81 e0       	ldi	r24, 0x01	; 1
    33e6:	63 e0       	ldi	r22, 0x03	; 3
    33e8:	40 e0       	ldi	r20, 0x00	; 0
    33ea:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    33ee:	19 82       	std	Y+1, r1	; 0x01
    33f0:	3b c0       	rjmp	.+118    	; 0x3468 <KEYPAD_getPressedKey+0xd4>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    33f2:	89 81       	ldd	r24, Y+1	; 0x01
    33f4:	98 2f       	mov	r25, r24
    33f6:	9c 5f       	subi	r25, 0xFC	; 252
    33f8:	81 e0       	ldi	r24, 0x01	; 1
    33fa:	69 2f       	mov	r22, r25
    33fc:	41 e0       	ldi	r20, 0x01	; 1
    33fe:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    3402:	89 81       	ldd	r24, Y+1	; 0x01
    3404:	98 2f       	mov	r25, r24
    3406:	9c 5f       	subi	r25, 0xFC	; 252
    3408:	81 e0       	ldi	r24, 0x01	; 1
    340a:	69 2f       	mov	r22, r25
    340c:	40 e0       	ldi	r20, 0x00	; 0
    340e:	0e 94 77 17 	call	0x2eee	; 0x2eee <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    3412:	1a 82       	std	Y+2, r1	; 0x02
    3414:	1b c0       	rjmp	.+54     	; 0x344c <KEYPAD_getPressedKey+0xb8>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    3416:	81 e0       	ldi	r24, 0x01	; 1
    3418:	6a 81       	ldd	r22, Y+2	; 0x02
    341a:	0e 94 62 18 	call	0x30c4	; 0x30c4 <GPIO_readPin>
    341e:	88 23       	and	r24, r24
    3420:	91 f4       	brne	.+36     	; 0x3446 <KEYPAD_getPressedKey+0xb2>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((col*KEYPAD_NUM_COLS)+row+1);
    3422:	8a 81       	ldd	r24, Y+2	; 0x02
    3424:	88 2f       	mov	r24, r24
    3426:	90 e0       	ldi	r25, 0x00	; 0
    3428:	88 0f       	add	r24, r24
    342a:	99 1f       	adc	r25, r25
    342c:	88 0f       	add	r24, r24
    342e:	99 1f       	adc	r25, r25
    3430:	98 2f       	mov	r25, r24
    3432:	89 81       	ldd	r24, Y+1	; 0x01
    3434:	89 0f       	add	r24, r25
    3436:	8f 5f       	subi	r24, 0xFF	; 255
    3438:	0e 94 38 1a 	call	0x3470	; 0x3470 <KEYPAD_4x4_adjustKeyNumber>
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
		}
	}	
}
    343c:	0f 90       	pop	r0
    343e:	0f 90       	pop	r0
    3440:	cf 91       	pop	r28
    3442:	df 91       	pop	r29
    3444:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    3446:	8a 81       	ldd	r24, Y+2	; 0x02
    3448:	8f 5f       	subi	r24, 0xFF	; 255
    344a:	8a 83       	std	Y+2, r24	; 0x02
    344c:	8a 81       	ldd	r24, Y+2	; 0x02
    344e:	84 30       	cpi	r24, 0x04	; 4
    3450:	10 f3       	brcs	.-60     	; 0x3416 <KEYPAD_getPressedKey+0x82>
							return KEYPAD_4x4_adjustKeyNumber((col*KEYPAD_NUM_COLS)+row+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    3452:	89 81       	ldd	r24, Y+1	; 0x01
    3454:	98 2f       	mov	r25, r24
    3456:	9c 5f       	subi	r25, 0xFC	; 252
    3458:	81 e0       	ldi	r24, 0x01	; 1
    345a:	69 2f       	mov	r22, r25
    345c:	40 e0       	ldi	r20, 0x00	; 0
    345e:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    3462:	89 81       	ldd	r24, Y+1	; 0x01
    3464:	8f 5f       	subi	r24, 0xFF	; 255
    3466:	89 83       	std	Y+1, r24	; 0x01
    3468:	89 81       	ldd	r24, Y+1	; 0x01
    346a:	84 30       	cpi	r24, 0x04	; 4
    346c:	10 f2       	brcs	.-124    	; 0x33f2 <KEYPAD_getPressedKey+0x5e>
    346e:	bf cf       	rjmp	.-130    	; 0x33ee <KEYPAD_getPressedKey+0x5a>

00003470 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    3470:	df 93       	push	r29
    3472:	cf 93       	push	r28
    3474:	00 d0       	rcall	.+0      	; 0x3476 <KEYPAD_4x4_adjustKeyNumber+0x6>
    3476:	00 d0       	rcall	.+0      	; 0x3478 <KEYPAD_4x4_adjustKeyNumber+0x8>
    3478:	cd b7       	in	r28, 0x3d	; 61
    347a:	de b7       	in	r29, 0x3e	; 62
    347c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    347e:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    3480:	8a 81       	ldd	r24, Y+2	; 0x02
    3482:	28 2f       	mov	r18, r24
    3484:	30 e0       	ldi	r19, 0x00	; 0
    3486:	3c 83       	std	Y+4, r19	; 0x04
    3488:	2b 83       	std	Y+3, r18	; 0x03
    348a:	8b 81       	ldd	r24, Y+3	; 0x03
    348c:	9c 81       	ldd	r25, Y+4	; 0x04
    348e:	88 30       	cpi	r24, 0x08	; 8
    3490:	91 05       	cpc	r25, r1
    3492:	09 f4       	brne	.+2      	; 0x3496 <KEYPAD_4x4_adjustKeyNumber+0x26>
    3494:	70 c0       	rjmp	.+224    	; 0x3576 <KEYPAD_4x4_adjustKeyNumber+0x106>
    3496:	2b 81       	ldd	r18, Y+3	; 0x03
    3498:	3c 81       	ldd	r19, Y+4	; 0x04
    349a:	29 30       	cpi	r18, 0x09	; 9
    349c:	31 05       	cpc	r19, r1
    349e:	5c f5       	brge	.+86     	; 0x34f6 <KEYPAD_4x4_adjustKeyNumber+0x86>
    34a0:	8b 81       	ldd	r24, Y+3	; 0x03
    34a2:	9c 81       	ldd	r25, Y+4	; 0x04
    34a4:	84 30       	cpi	r24, 0x04	; 4
    34a6:	91 05       	cpc	r25, r1
    34a8:	09 f4       	brne	.+2      	; 0x34ac <KEYPAD_4x4_adjustKeyNumber+0x3c>
    34aa:	59 c0       	rjmp	.+178    	; 0x355e <KEYPAD_4x4_adjustKeyNumber+0xee>
    34ac:	2b 81       	ldd	r18, Y+3	; 0x03
    34ae:	3c 81       	ldd	r19, Y+4	; 0x04
    34b0:	25 30       	cpi	r18, 0x05	; 5
    34b2:	31 05       	cpc	r19, r1
    34b4:	9c f4       	brge	.+38     	; 0x34dc <KEYPAD_4x4_adjustKeyNumber+0x6c>
    34b6:	8b 81       	ldd	r24, Y+3	; 0x03
    34b8:	9c 81       	ldd	r25, Y+4	; 0x04
    34ba:	82 30       	cpi	r24, 0x02	; 2
    34bc:	91 05       	cpc	r25, r1
    34be:	09 f4       	brne	.+2      	; 0x34c2 <KEYPAD_4x4_adjustKeyNumber+0x52>
    34c0:	48 c0       	rjmp	.+144    	; 0x3552 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    34c2:	2b 81       	ldd	r18, Y+3	; 0x03
    34c4:	3c 81       	ldd	r19, Y+4	; 0x04
    34c6:	23 30       	cpi	r18, 0x03	; 3
    34c8:	31 05       	cpc	r19, r1
    34ca:	0c f0       	brlt	.+2      	; 0x34ce <KEYPAD_4x4_adjustKeyNumber+0x5e>
    34cc:	45 c0       	rjmp	.+138    	; 0x3558 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    34ce:	8b 81       	ldd	r24, Y+3	; 0x03
    34d0:	9c 81       	ldd	r25, Y+4	; 0x04
    34d2:	81 30       	cpi	r24, 0x01	; 1
    34d4:	91 05       	cpc	r25, r1
    34d6:	09 f4       	brne	.+2      	; 0x34da <KEYPAD_4x4_adjustKeyNumber+0x6a>
    34d8:	39 c0       	rjmp	.+114    	; 0x354c <KEYPAD_4x4_adjustKeyNumber+0xdc>
    34da:	67 c0       	rjmp	.+206    	; 0x35aa <KEYPAD_4x4_adjustKeyNumber+0x13a>
    34dc:	2b 81       	ldd	r18, Y+3	; 0x03
    34de:	3c 81       	ldd	r19, Y+4	; 0x04
    34e0:	26 30       	cpi	r18, 0x06	; 6
    34e2:	31 05       	cpc	r19, r1
    34e4:	09 f4       	brne	.+2      	; 0x34e8 <KEYPAD_4x4_adjustKeyNumber+0x78>
    34e6:	41 c0       	rjmp	.+130    	; 0x356a <KEYPAD_4x4_adjustKeyNumber+0xfa>
    34e8:	8b 81       	ldd	r24, Y+3	; 0x03
    34ea:	9c 81       	ldd	r25, Y+4	; 0x04
    34ec:	87 30       	cpi	r24, 0x07	; 7
    34ee:	91 05       	cpc	r25, r1
    34f0:	0c f0       	brlt	.+2      	; 0x34f4 <KEYPAD_4x4_adjustKeyNumber+0x84>
    34f2:	3e c0       	rjmp	.+124    	; 0x3570 <KEYPAD_4x4_adjustKeyNumber+0x100>
    34f4:	37 c0       	rjmp	.+110    	; 0x3564 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    34f6:	2b 81       	ldd	r18, Y+3	; 0x03
    34f8:	3c 81       	ldd	r19, Y+4	; 0x04
    34fa:	2c 30       	cpi	r18, 0x0C	; 12
    34fc:	31 05       	cpc	r19, r1
    34fe:	09 f4       	brne	.+2      	; 0x3502 <KEYPAD_4x4_adjustKeyNumber+0x92>
    3500:	46 c0       	rjmp	.+140    	; 0x358e <KEYPAD_4x4_adjustKeyNumber+0x11e>
    3502:	8b 81       	ldd	r24, Y+3	; 0x03
    3504:	9c 81       	ldd	r25, Y+4	; 0x04
    3506:	8d 30       	cpi	r24, 0x0D	; 13
    3508:	91 05       	cpc	r25, r1
    350a:	5c f4       	brge	.+22     	; 0x3522 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    350c:	2b 81       	ldd	r18, Y+3	; 0x03
    350e:	3c 81       	ldd	r19, Y+4	; 0x04
    3510:	2a 30       	cpi	r18, 0x0A	; 10
    3512:	31 05       	cpc	r19, r1
    3514:	b1 f1       	breq	.+108    	; 0x3582 <KEYPAD_4x4_adjustKeyNumber+0x112>
    3516:	8b 81       	ldd	r24, Y+3	; 0x03
    3518:	9c 81       	ldd	r25, Y+4	; 0x04
    351a:	8b 30       	cpi	r24, 0x0B	; 11
    351c:	91 05       	cpc	r25, r1
    351e:	a4 f5       	brge	.+104    	; 0x3588 <KEYPAD_4x4_adjustKeyNumber+0x118>
    3520:	2d c0       	rjmp	.+90     	; 0x357c <KEYPAD_4x4_adjustKeyNumber+0x10c>
    3522:	2b 81       	ldd	r18, Y+3	; 0x03
    3524:	3c 81       	ldd	r19, Y+4	; 0x04
    3526:	2e 30       	cpi	r18, 0x0E	; 14
    3528:	31 05       	cpc	r19, r1
    352a:	b9 f1       	breq	.+110    	; 0x359a <KEYPAD_4x4_adjustKeyNumber+0x12a>
    352c:	8b 81       	ldd	r24, Y+3	; 0x03
    352e:	9c 81       	ldd	r25, Y+4	; 0x04
    3530:	8e 30       	cpi	r24, 0x0E	; 14
    3532:	91 05       	cpc	r25, r1
    3534:	7c f1       	brlt	.+94     	; 0x3594 <KEYPAD_4x4_adjustKeyNumber+0x124>
    3536:	2b 81       	ldd	r18, Y+3	; 0x03
    3538:	3c 81       	ldd	r19, Y+4	; 0x04
    353a:	2f 30       	cpi	r18, 0x0F	; 15
    353c:	31 05       	cpc	r19, r1
    353e:	79 f1       	breq	.+94     	; 0x359e <KEYPAD_4x4_adjustKeyNumber+0x12e>
    3540:	8b 81       	ldd	r24, Y+3	; 0x03
    3542:	9c 81       	ldd	r25, Y+4	; 0x04
    3544:	80 31       	cpi	r24, 0x10	; 16
    3546:	91 05       	cpc	r25, r1
    3548:	69 f1       	breq	.+90     	; 0x35a4 <KEYPAD_4x4_adjustKeyNumber+0x134>
    354a:	2f c0       	rjmp	.+94     	; 0x35aa <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    354c:	87 e0       	ldi	r24, 0x07	; 7
    354e:	89 83       	std	Y+1, r24	; 0x01
    3550:	2e c0       	rjmp	.+92     	; 0x35ae <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    3552:	88 e0       	ldi	r24, 0x08	; 8
    3554:	89 83       	std	Y+1, r24	; 0x01
    3556:	2b c0       	rjmp	.+86     	; 0x35ae <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    3558:	89 e0       	ldi	r24, 0x09	; 9
    355a:	89 83       	std	Y+1, r24	; 0x01
    355c:	28 c0       	rjmp	.+80     	; 0x35ae <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    355e:	85 e2       	ldi	r24, 0x25	; 37
    3560:	89 83       	std	Y+1, r24	; 0x01
    3562:	25 c0       	rjmp	.+74     	; 0x35ae <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    3564:	84 e0       	ldi	r24, 0x04	; 4
    3566:	89 83       	std	Y+1, r24	; 0x01
    3568:	22 c0       	rjmp	.+68     	; 0x35ae <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    356a:	85 e0       	ldi	r24, 0x05	; 5
    356c:	89 83       	std	Y+1, r24	; 0x01
    356e:	1f c0       	rjmp	.+62     	; 0x35ae <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    3570:	86 e0       	ldi	r24, 0x06	; 6
    3572:	89 83       	std	Y+1, r24	; 0x01
    3574:	1c c0       	rjmp	.+56     	; 0x35ae <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    3576:	8a e2       	ldi	r24, 0x2A	; 42
    3578:	89 83       	std	Y+1, r24	; 0x01
    357a:	19 c0       	rjmp	.+50     	; 0x35ae <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    357c:	81 e0       	ldi	r24, 0x01	; 1
    357e:	89 83       	std	Y+1, r24	; 0x01
    3580:	16 c0       	rjmp	.+44     	; 0x35ae <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    3582:	82 e0       	ldi	r24, 0x02	; 2
    3584:	89 83       	std	Y+1, r24	; 0x01
    3586:	13 c0       	rjmp	.+38     	; 0x35ae <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    3588:	83 e0       	ldi	r24, 0x03	; 3
    358a:	89 83       	std	Y+1, r24	; 0x01
    358c:	10 c0       	rjmp	.+32     	; 0x35ae <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    358e:	8d e2       	ldi	r24, 0x2D	; 45
    3590:	89 83       	std	Y+1, r24	; 0x01
    3592:	0d c0       	rjmp	.+26     	; 0x35ae <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    3594:	8d e0       	ldi	r24, 0x0D	; 13
    3596:	89 83       	std	Y+1, r24	; 0x01
    3598:	0a c0       	rjmp	.+20     	; 0x35ae <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    359a:	19 82       	std	Y+1, r1	; 0x01
    359c:	08 c0       	rjmp	.+16     	; 0x35ae <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    359e:	8d e3       	ldi	r24, 0x3D	; 61
    35a0:	89 83       	std	Y+1, r24	; 0x01
    35a2:	05 c0       	rjmp	.+10     	; 0x35ae <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    35a4:	8b e2       	ldi	r24, 0x2B	; 43
    35a6:	89 83       	std	Y+1, r24	; 0x01
    35a8:	02 c0       	rjmp	.+4      	; 0x35ae <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    35aa:	8a 81       	ldd	r24, Y+2	; 0x02
    35ac:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    35ae:	89 81       	ldd	r24, Y+1	; 0x01
} 
    35b0:	0f 90       	pop	r0
    35b2:	0f 90       	pop	r0
    35b4:	0f 90       	pop	r0
    35b6:	0f 90       	pop	r0
    35b8:	cf 91       	pop	r28
    35ba:	df 91       	pop	r29
    35bc:	08 95       	ret

000035be <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    35be:	df 93       	push	r29
    35c0:	cf 93       	push	r28
    35c2:	cd b7       	in	r28, 0x3d	; 61
    35c4:	de b7       	in	r29, 0x3e	; 62
    35c6:	2e 97       	sbiw	r28, 0x0e	; 14
    35c8:	0f b6       	in	r0, 0x3f	; 63
    35ca:	f8 94       	cli
    35cc:	de bf       	out	0x3e, r29	; 62
    35ce:	0f be       	out	0x3f, r0	; 63
    35d0:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    35d2:	82 e0       	ldi	r24, 0x02	; 2
    35d4:	60 e0       	ldi	r22, 0x00	; 0
    35d6:	41 e0       	ldi	r20, 0x01	; 1
    35d8:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    35dc:	82 e0       	ldi	r24, 0x02	; 2
    35de:	61 e0       	ldi	r22, 0x01	; 1
    35e0:	41 e0       	ldi	r20, 0x01	; 1
    35e2:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <GPIO_setupPinDirection>
    35e6:	80 e0       	ldi	r24, 0x00	; 0
    35e8:	90 e0       	ldi	r25, 0x00	; 0
    35ea:	a0 ea       	ldi	r26, 0xA0	; 160
    35ec:	b1 e4       	ldi	r27, 0x41	; 65
    35ee:	8b 87       	std	Y+11, r24	; 0x0b
    35f0:	9c 87       	std	Y+12, r25	; 0x0c
    35f2:	ad 87       	std	Y+13, r26	; 0x0d
    35f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    35f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    35fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    35fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    35fe:	20 e0       	ldi	r18, 0x00	; 0
    3600:	30 e0       	ldi	r19, 0x00	; 0
    3602:	4a e7       	ldi	r20, 0x7A	; 122
    3604:	53 e4       	ldi	r21, 0x43	; 67
    3606:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    360a:	dc 01       	movw	r26, r24
    360c:	cb 01       	movw	r24, r22
    360e:	8f 83       	std	Y+7, r24	; 0x07
    3610:	98 87       	std	Y+8, r25	; 0x08
    3612:	a9 87       	std	Y+9, r26	; 0x09
    3614:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3616:	6f 81       	ldd	r22, Y+7	; 0x07
    3618:	78 85       	ldd	r23, Y+8	; 0x08
    361a:	89 85       	ldd	r24, Y+9	; 0x09
    361c:	9a 85       	ldd	r25, Y+10	; 0x0a
    361e:	20 e0       	ldi	r18, 0x00	; 0
    3620:	30 e0       	ldi	r19, 0x00	; 0
    3622:	40 e8       	ldi	r20, 0x80	; 128
    3624:	5f e3       	ldi	r21, 0x3F	; 63
    3626:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    362a:	88 23       	and	r24, r24
    362c:	2c f4       	brge	.+10     	; 0x3638 <LCD_init+0x7a>
		__ticks = 1;
    362e:	81 e0       	ldi	r24, 0x01	; 1
    3630:	90 e0       	ldi	r25, 0x00	; 0
    3632:	9e 83       	std	Y+6, r25	; 0x06
    3634:	8d 83       	std	Y+5, r24	; 0x05
    3636:	3f c0       	rjmp	.+126    	; 0x36b6 <LCD_init+0xf8>
	else if (__tmp > 65535)
    3638:	6f 81       	ldd	r22, Y+7	; 0x07
    363a:	78 85       	ldd	r23, Y+8	; 0x08
    363c:	89 85       	ldd	r24, Y+9	; 0x09
    363e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3640:	20 e0       	ldi	r18, 0x00	; 0
    3642:	3f ef       	ldi	r19, 0xFF	; 255
    3644:	4f e7       	ldi	r20, 0x7F	; 127
    3646:	57 e4       	ldi	r21, 0x47	; 71
    3648:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    364c:	18 16       	cp	r1, r24
    364e:	4c f5       	brge	.+82     	; 0x36a2 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3650:	6b 85       	ldd	r22, Y+11	; 0x0b
    3652:	7c 85       	ldd	r23, Y+12	; 0x0c
    3654:	8d 85       	ldd	r24, Y+13	; 0x0d
    3656:	9e 85       	ldd	r25, Y+14	; 0x0e
    3658:	20 e0       	ldi	r18, 0x00	; 0
    365a:	30 e0       	ldi	r19, 0x00	; 0
    365c:	40 e2       	ldi	r20, 0x20	; 32
    365e:	51 e4       	ldi	r21, 0x41	; 65
    3660:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3664:	dc 01       	movw	r26, r24
    3666:	cb 01       	movw	r24, r22
    3668:	bc 01       	movw	r22, r24
    366a:	cd 01       	movw	r24, r26
    366c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3670:	dc 01       	movw	r26, r24
    3672:	cb 01       	movw	r24, r22
    3674:	9e 83       	std	Y+6, r25	; 0x06
    3676:	8d 83       	std	Y+5, r24	; 0x05
    3678:	0f c0       	rjmp	.+30     	; 0x3698 <LCD_init+0xda>
    367a:	89 e1       	ldi	r24, 0x19	; 25
    367c:	90 e0       	ldi	r25, 0x00	; 0
    367e:	9c 83       	std	Y+4, r25	; 0x04
    3680:	8b 83       	std	Y+3, r24	; 0x03
    3682:	8b 81       	ldd	r24, Y+3	; 0x03
    3684:	9c 81       	ldd	r25, Y+4	; 0x04
    3686:	01 97       	sbiw	r24, 0x01	; 1
    3688:	f1 f7       	brne	.-4      	; 0x3686 <LCD_init+0xc8>
    368a:	9c 83       	std	Y+4, r25	; 0x04
    368c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    368e:	8d 81       	ldd	r24, Y+5	; 0x05
    3690:	9e 81       	ldd	r25, Y+6	; 0x06
    3692:	01 97       	sbiw	r24, 0x01	; 1
    3694:	9e 83       	std	Y+6, r25	; 0x06
    3696:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3698:	8d 81       	ldd	r24, Y+5	; 0x05
    369a:	9e 81       	ldd	r25, Y+6	; 0x06
    369c:	00 97       	sbiw	r24, 0x00	; 0
    369e:	69 f7       	brne	.-38     	; 0x367a <LCD_init+0xbc>
    36a0:	14 c0       	rjmp	.+40     	; 0x36ca <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36a2:	6f 81       	ldd	r22, Y+7	; 0x07
    36a4:	78 85       	ldd	r23, Y+8	; 0x08
    36a6:	89 85       	ldd	r24, Y+9	; 0x09
    36a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    36aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36ae:	dc 01       	movw	r26, r24
    36b0:	cb 01       	movw	r24, r22
    36b2:	9e 83       	std	Y+6, r25	; 0x06
    36b4:	8d 83       	std	Y+5, r24	; 0x05
    36b6:	8d 81       	ldd	r24, Y+5	; 0x05
    36b8:	9e 81       	ldd	r25, Y+6	; 0x06
    36ba:	9a 83       	std	Y+2, r25	; 0x02
    36bc:	89 83       	std	Y+1, r24	; 0x01
    36be:	89 81       	ldd	r24, Y+1	; 0x01
    36c0:	9a 81       	ldd	r25, Y+2	; 0x02
    36c2:	01 97       	sbiw	r24, 0x01	; 1
    36c4:	f1 f7       	brne	.-4      	; 0x36c2 <LCD_init+0x104>
    36c6:	9a 83       	std	Y+2, r25	; 0x02
    36c8:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    36ca:	80 e0       	ldi	r24, 0x00	; 0
    36cc:	6f ef       	ldi	r22, 0xFF	; 255
    36ce:	0e 94 fd 18 	call	0x31fa	; 0x31fa <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    36d2:	88 e3       	ldi	r24, 0x38	; 56
    36d4:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    36d8:	8c e0       	ldi	r24, 0x0C	; 12
    36da:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    36de:	81 e0       	ldi	r24, 0x01	; 1
    36e0:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <LCD_sendCommand>
}
    36e4:	2e 96       	adiw	r28, 0x0e	; 14
    36e6:	0f b6       	in	r0, 0x3f	; 63
    36e8:	f8 94       	cli
    36ea:	de bf       	out	0x3e, r29	; 62
    36ec:	0f be       	out	0x3f, r0	; 63
    36ee:	cd bf       	out	0x3d, r28	; 61
    36f0:	cf 91       	pop	r28
    36f2:	df 91       	pop	r29
    36f4:	08 95       	ret

000036f6 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    36f6:	df 93       	push	r29
    36f8:	cf 93       	push	r28
    36fa:	cd b7       	in	r28, 0x3d	; 61
    36fc:	de b7       	in	r29, 0x3e	; 62
    36fe:	e9 97       	sbiw	r28, 0x39	; 57
    3700:	0f b6       	in	r0, 0x3f	; 63
    3702:	f8 94       	cli
    3704:	de bf       	out	0x3e, r29	; 62
    3706:	0f be       	out	0x3f, r0	; 63
    3708:	cd bf       	out	0x3d, r28	; 61
    370a:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    370c:	82 e0       	ldi	r24, 0x02	; 2
    370e:	60 e0       	ldi	r22, 0x00	; 0
    3710:	40 e0       	ldi	r20, 0x00	; 0
    3712:	0e 94 77 17 	call	0x2eee	; 0x2eee <GPIO_writePin>
    3716:	80 e0       	ldi	r24, 0x00	; 0
    3718:	90 e0       	ldi	r25, 0x00	; 0
    371a:	a0 e8       	ldi	r26, 0x80	; 128
    371c:	bf e3       	ldi	r27, 0x3F	; 63
    371e:	8d ab       	std	Y+53, r24	; 0x35
    3720:	9e ab       	std	Y+54, r25	; 0x36
    3722:	af ab       	std	Y+55, r26	; 0x37
    3724:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3726:	6d a9       	ldd	r22, Y+53	; 0x35
    3728:	7e a9       	ldd	r23, Y+54	; 0x36
    372a:	8f a9       	ldd	r24, Y+55	; 0x37
    372c:	98 ad       	ldd	r25, Y+56	; 0x38
    372e:	20 e0       	ldi	r18, 0x00	; 0
    3730:	30 e0       	ldi	r19, 0x00	; 0
    3732:	4a e7       	ldi	r20, 0x7A	; 122
    3734:	53 e4       	ldi	r21, 0x43	; 67
    3736:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    373a:	dc 01       	movw	r26, r24
    373c:	cb 01       	movw	r24, r22
    373e:	89 ab       	std	Y+49, r24	; 0x31
    3740:	9a ab       	std	Y+50, r25	; 0x32
    3742:	ab ab       	std	Y+51, r26	; 0x33
    3744:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3746:	69 a9       	ldd	r22, Y+49	; 0x31
    3748:	7a a9       	ldd	r23, Y+50	; 0x32
    374a:	8b a9       	ldd	r24, Y+51	; 0x33
    374c:	9c a9       	ldd	r25, Y+52	; 0x34
    374e:	20 e0       	ldi	r18, 0x00	; 0
    3750:	30 e0       	ldi	r19, 0x00	; 0
    3752:	40 e8       	ldi	r20, 0x80	; 128
    3754:	5f e3       	ldi	r21, 0x3F	; 63
    3756:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    375a:	88 23       	and	r24, r24
    375c:	2c f4       	brge	.+10     	; 0x3768 <LCD_sendCommand+0x72>
		__ticks = 1;
    375e:	81 e0       	ldi	r24, 0x01	; 1
    3760:	90 e0       	ldi	r25, 0x00	; 0
    3762:	98 ab       	std	Y+48, r25	; 0x30
    3764:	8f a7       	std	Y+47, r24	; 0x2f
    3766:	3f c0       	rjmp	.+126    	; 0x37e6 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    3768:	69 a9       	ldd	r22, Y+49	; 0x31
    376a:	7a a9       	ldd	r23, Y+50	; 0x32
    376c:	8b a9       	ldd	r24, Y+51	; 0x33
    376e:	9c a9       	ldd	r25, Y+52	; 0x34
    3770:	20 e0       	ldi	r18, 0x00	; 0
    3772:	3f ef       	ldi	r19, 0xFF	; 255
    3774:	4f e7       	ldi	r20, 0x7F	; 127
    3776:	57 e4       	ldi	r21, 0x47	; 71
    3778:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    377c:	18 16       	cp	r1, r24
    377e:	4c f5       	brge	.+82     	; 0x37d2 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3780:	6d a9       	ldd	r22, Y+53	; 0x35
    3782:	7e a9       	ldd	r23, Y+54	; 0x36
    3784:	8f a9       	ldd	r24, Y+55	; 0x37
    3786:	98 ad       	ldd	r25, Y+56	; 0x38
    3788:	20 e0       	ldi	r18, 0x00	; 0
    378a:	30 e0       	ldi	r19, 0x00	; 0
    378c:	40 e2       	ldi	r20, 0x20	; 32
    378e:	51 e4       	ldi	r21, 0x41	; 65
    3790:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3794:	dc 01       	movw	r26, r24
    3796:	cb 01       	movw	r24, r22
    3798:	bc 01       	movw	r22, r24
    379a:	cd 01       	movw	r24, r26
    379c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37a0:	dc 01       	movw	r26, r24
    37a2:	cb 01       	movw	r24, r22
    37a4:	98 ab       	std	Y+48, r25	; 0x30
    37a6:	8f a7       	std	Y+47, r24	; 0x2f
    37a8:	0f c0       	rjmp	.+30     	; 0x37c8 <LCD_sendCommand+0xd2>
    37aa:	89 e1       	ldi	r24, 0x19	; 25
    37ac:	90 e0       	ldi	r25, 0x00	; 0
    37ae:	9e a7       	std	Y+46, r25	; 0x2e
    37b0:	8d a7       	std	Y+45, r24	; 0x2d
    37b2:	8d a5       	ldd	r24, Y+45	; 0x2d
    37b4:	9e a5       	ldd	r25, Y+46	; 0x2e
    37b6:	01 97       	sbiw	r24, 0x01	; 1
    37b8:	f1 f7       	brne	.-4      	; 0x37b6 <LCD_sendCommand+0xc0>
    37ba:	9e a7       	std	Y+46, r25	; 0x2e
    37bc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37be:	8f a5       	ldd	r24, Y+47	; 0x2f
    37c0:	98 a9       	ldd	r25, Y+48	; 0x30
    37c2:	01 97       	sbiw	r24, 0x01	; 1
    37c4:	98 ab       	std	Y+48, r25	; 0x30
    37c6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    37ca:	98 a9       	ldd	r25, Y+48	; 0x30
    37cc:	00 97       	sbiw	r24, 0x00	; 0
    37ce:	69 f7       	brne	.-38     	; 0x37aa <LCD_sendCommand+0xb4>
    37d0:	14 c0       	rjmp	.+40     	; 0x37fa <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37d2:	69 a9       	ldd	r22, Y+49	; 0x31
    37d4:	7a a9       	ldd	r23, Y+50	; 0x32
    37d6:	8b a9       	ldd	r24, Y+51	; 0x33
    37d8:	9c a9       	ldd	r25, Y+52	; 0x34
    37da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37de:	dc 01       	movw	r26, r24
    37e0:	cb 01       	movw	r24, r22
    37e2:	98 ab       	std	Y+48, r25	; 0x30
    37e4:	8f a7       	std	Y+47, r24	; 0x2f
    37e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    37e8:	98 a9       	ldd	r25, Y+48	; 0x30
    37ea:	9c a7       	std	Y+44, r25	; 0x2c
    37ec:	8b a7       	std	Y+43, r24	; 0x2b
    37ee:	8b a5       	ldd	r24, Y+43	; 0x2b
    37f0:	9c a5       	ldd	r25, Y+44	; 0x2c
    37f2:	01 97       	sbiw	r24, 0x01	; 1
    37f4:	f1 f7       	brne	.-4      	; 0x37f2 <LCD_sendCommand+0xfc>
    37f6:	9c a7       	std	Y+44, r25	; 0x2c
    37f8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    37fa:	82 e0       	ldi	r24, 0x02	; 2
    37fc:	61 e0       	ldi	r22, 0x01	; 1
    37fe:	41 e0       	ldi	r20, 0x01	; 1
    3800:	0e 94 77 17 	call	0x2eee	; 0x2eee <GPIO_writePin>
    3804:	80 e0       	ldi	r24, 0x00	; 0
    3806:	90 e0       	ldi	r25, 0x00	; 0
    3808:	a0 e8       	ldi	r26, 0x80	; 128
    380a:	bf e3       	ldi	r27, 0x3F	; 63
    380c:	8f a3       	std	Y+39, r24	; 0x27
    380e:	98 a7       	std	Y+40, r25	; 0x28
    3810:	a9 a7       	std	Y+41, r26	; 0x29
    3812:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3814:	6f a1       	ldd	r22, Y+39	; 0x27
    3816:	78 a5       	ldd	r23, Y+40	; 0x28
    3818:	89 a5       	ldd	r24, Y+41	; 0x29
    381a:	9a a5       	ldd	r25, Y+42	; 0x2a
    381c:	20 e0       	ldi	r18, 0x00	; 0
    381e:	30 e0       	ldi	r19, 0x00	; 0
    3820:	4a e7       	ldi	r20, 0x7A	; 122
    3822:	53 e4       	ldi	r21, 0x43	; 67
    3824:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3828:	dc 01       	movw	r26, r24
    382a:	cb 01       	movw	r24, r22
    382c:	8b a3       	std	Y+35, r24	; 0x23
    382e:	9c a3       	std	Y+36, r25	; 0x24
    3830:	ad a3       	std	Y+37, r26	; 0x25
    3832:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3834:	6b a1       	ldd	r22, Y+35	; 0x23
    3836:	7c a1       	ldd	r23, Y+36	; 0x24
    3838:	8d a1       	ldd	r24, Y+37	; 0x25
    383a:	9e a1       	ldd	r25, Y+38	; 0x26
    383c:	20 e0       	ldi	r18, 0x00	; 0
    383e:	30 e0       	ldi	r19, 0x00	; 0
    3840:	40 e8       	ldi	r20, 0x80	; 128
    3842:	5f e3       	ldi	r21, 0x3F	; 63
    3844:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3848:	88 23       	and	r24, r24
    384a:	2c f4       	brge	.+10     	; 0x3856 <LCD_sendCommand+0x160>
		__ticks = 1;
    384c:	81 e0       	ldi	r24, 0x01	; 1
    384e:	90 e0       	ldi	r25, 0x00	; 0
    3850:	9a a3       	std	Y+34, r25	; 0x22
    3852:	89 a3       	std	Y+33, r24	; 0x21
    3854:	3f c0       	rjmp	.+126    	; 0x38d4 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    3856:	6b a1       	ldd	r22, Y+35	; 0x23
    3858:	7c a1       	ldd	r23, Y+36	; 0x24
    385a:	8d a1       	ldd	r24, Y+37	; 0x25
    385c:	9e a1       	ldd	r25, Y+38	; 0x26
    385e:	20 e0       	ldi	r18, 0x00	; 0
    3860:	3f ef       	ldi	r19, 0xFF	; 255
    3862:	4f e7       	ldi	r20, 0x7F	; 127
    3864:	57 e4       	ldi	r21, 0x47	; 71
    3866:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    386a:	18 16       	cp	r1, r24
    386c:	4c f5       	brge	.+82     	; 0x38c0 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    386e:	6f a1       	ldd	r22, Y+39	; 0x27
    3870:	78 a5       	ldd	r23, Y+40	; 0x28
    3872:	89 a5       	ldd	r24, Y+41	; 0x29
    3874:	9a a5       	ldd	r25, Y+42	; 0x2a
    3876:	20 e0       	ldi	r18, 0x00	; 0
    3878:	30 e0       	ldi	r19, 0x00	; 0
    387a:	40 e2       	ldi	r20, 0x20	; 32
    387c:	51 e4       	ldi	r21, 0x41	; 65
    387e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3882:	dc 01       	movw	r26, r24
    3884:	cb 01       	movw	r24, r22
    3886:	bc 01       	movw	r22, r24
    3888:	cd 01       	movw	r24, r26
    388a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    388e:	dc 01       	movw	r26, r24
    3890:	cb 01       	movw	r24, r22
    3892:	9a a3       	std	Y+34, r25	; 0x22
    3894:	89 a3       	std	Y+33, r24	; 0x21
    3896:	0f c0       	rjmp	.+30     	; 0x38b6 <LCD_sendCommand+0x1c0>
    3898:	89 e1       	ldi	r24, 0x19	; 25
    389a:	90 e0       	ldi	r25, 0x00	; 0
    389c:	98 a3       	std	Y+32, r25	; 0x20
    389e:	8f 8f       	std	Y+31, r24	; 0x1f
    38a0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    38a2:	98 a1       	ldd	r25, Y+32	; 0x20
    38a4:	01 97       	sbiw	r24, 0x01	; 1
    38a6:	f1 f7       	brne	.-4      	; 0x38a4 <LCD_sendCommand+0x1ae>
    38a8:	98 a3       	std	Y+32, r25	; 0x20
    38aa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38ac:	89 a1       	ldd	r24, Y+33	; 0x21
    38ae:	9a a1       	ldd	r25, Y+34	; 0x22
    38b0:	01 97       	sbiw	r24, 0x01	; 1
    38b2:	9a a3       	std	Y+34, r25	; 0x22
    38b4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38b6:	89 a1       	ldd	r24, Y+33	; 0x21
    38b8:	9a a1       	ldd	r25, Y+34	; 0x22
    38ba:	00 97       	sbiw	r24, 0x00	; 0
    38bc:	69 f7       	brne	.-38     	; 0x3898 <LCD_sendCommand+0x1a2>
    38be:	14 c0       	rjmp	.+40     	; 0x38e8 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38c0:	6b a1       	ldd	r22, Y+35	; 0x23
    38c2:	7c a1       	ldd	r23, Y+36	; 0x24
    38c4:	8d a1       	ldd	r24, Y+37	; 0x25
    38c6:	9e a1       	ldd	r25, Y+38	; 0x26
    38c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38cc:	dc 01       	movw	r26, r24
    38ce:	cb 01       	movw	r24, r22
    38d0:	9a a3       	std	Y+34, r25	; 0x22
    38d2:	89 a3       	std	Y+33, r24	; 0x21
    38d4:	89 a1       	ldd	r24, Y+33	; 0x21
    38d6:	9a a1       	ldd	r25, Y+34	; 0x22
    38d8:	9e 8f       	std	Y+30, r25	; 0x1e
    38da:	8d 8f       	std	Y+29, r24	; 0x1d
    38dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    38de:	9e 8d       	ldd	r25, Y+30	; 0x1e
    38e0:	01 97       	sbiw	r24, 0x01	; 1
    38e2:	f1 f7       	brne	.-4      	; 0x38e0 <LCD_sendCommand+0x1ea>
    38e4:	9e 8f       	std	Y+30, r25	; 0x1e
    38e6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    38e8:	80 e0       	ldi	r24, 0x00	; 0
    38ea:	69 ad       	ldd	r22, Y+57	; 0x39
    38ec:	0e 94 41 19 	call	0x3282	; 0x3282 <GPIO_writePort>
    38f0:	80 e0       	ldi	r24, 0x00	; 0
    38f2:	90 e0       	ldi	r25, 0x00	; 0
    38f4:	a0 e8       	ldi	r26, 0x80	; 128
    38f6:	bf e3       	ldi	r27, 0x3F	; 63
    38f8:	89 8f       	std	Y+25, r24	; 0x19
    38fa:	9a 8f       	std	Y+26, r25	; 0x1a
    38fc:	ab 8f       	std	Y+27, r26	; 0x1b
    38fe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3900:	69 8d       	ldd	r22, Y+25	; 0x19
    3902:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3904:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3906:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3908:	20 e0       	ldi	r18, 0x00	; 0
    390a:	30 e0       	ldi	r19, 0x00	; 0
    390c:	4a e7       	ldi	r20, 0x7A	; 122
    390e:	53 e4       	ldi	r21, 0x43	; 67
    3910:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3914:	dc 01       	movw	r26, r24
    3916:	cb 01       	movw	r24, r22
    3918:	8d 8b       	std	Y+21, r24	; 0x15
    391a:	9e 8b       	std	Y+22, r25	; 0x16
    391c:	af 8b       	std	Y+23, r26	; 0x17
    391e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3920:	6d 89       	ldd	r22, Y+21	; 0x15
    3922:	7e 89       	ldd	r23, Y+22	; 0x16
    3924:	8f 89       	ldd	r24, Y+23	; 0x17
    3926:	98 8d       	ldd	r25, Y+24	; 0x18
    3928:	20 e0       	ldi	r18, 0x00	; 0
    392a:	30 e0       	ldi	r19, 0x00	; 0
    392c:	40 e8       	ldi	r20, 0x80	; 128
    392e:	5f e3       	ldi	r21, 0x3F	; 63
    3930:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3934:	88 23       	and	r24, r24
    3936:	2c f4       	brge	.+10     	; 0x3942 <LCD_sendCommand+0x24c>
		__ticks = 1;
    3938:	81 e0       	ldi	r24, 0x01	; 1
    393a:	90 e0       	ldi	r25, 0x00	; 0
    393c:	9c 8b       	std	Y+20, r25	; 0x14
    393e:	8b 8b       	std	Y+19, r24	; 0x13
    3940:	3f c0       	rjmp	.+126    	; 0x39c0 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    3942:	6d 89       	ldd	r22, Y+21	; 0x15
    3944:	7e 89       	ldd	r23, Y+22	; 0x16
    3946:	8f 89       	ldd	r24, Y+23	; 0x17
    3948:	98 8d       	ldd	r25, Y+24	; 0x18
    394a:	20 e0       	ldi	r18, 0x00	; 0
    394c:	3f ef       	ldi	r19, 0xFF	; 255
    394e:	4f e7       	ldi	r20, 0x7F	; 127
    3950:	57 e4       	ldi	r21, 0x47	; 71
    3952:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3956:	18 16       	cp	r1, r24
    3958:	4c f5       	brge	.+82     	; 0x39ac <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    395a:	69 8d       	ldd	r22, Y+25	; 0x19
    395c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    395e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3960:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3962:	20 e0       	ldi	r18, 0x00	; 0
    3964:	30 e0       	ldi	r19, 0x00	; 0
    3966:	40 e2       	ldi	r20, 0x20	; 32
    3968:	51 e4       	ldi	r21, 0x41	; 65
    396a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    396e:	dc 01       	movw	r26, r24
    3970:	cb 01       	movw	r24, r22
    3972:	bc 01       	movw	r22, r24
    3974:	cd 01       	movw	r24, r26
    3976:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    397a:	dc 01       	movw	r26, r24
    397c:	cb 01       	movw	r24, r22
    397e:	9c 8b       	std	Y+20, r25	; 0x14
    3980:	8b 8b       	std	Y+19, r24	; 0x13
    3982:	0f c0       	rjmp	.+30     	; 0x39a2 <LCD_sendCommand+0x2ac>
    3984:	89 e1       	ldi	r24, 0x19	; 25
    3986:	90 e0       	ldi	r25, 0x00	; 0
    3988:	9a 8b       	std	Y+18, r25	; 0x12
    398a:	89 8b       	std	Y+17, r24	; 0x11
    398c:	89 89       	ldd	r24, Y+17	; 0x11
    398e:	9a 89       	ldd	r25, Y+18	; 0x12
    3990:	01 97       	sbiw	r24, 0x01	; 1
    3992:	f1 f7       	brne	.-4      	; 0x3990 <LCD_sendCommand+0x29a>
    3994:	9a 8b       	std	Y+18, r25	; 0x12
    3996:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3998:	8b 89       	ldd	r24, Y+19	; 0x13
    399a:	9c 89       	ldd	r25, Y+20	; 0x14
    399c:	01 97       	sbiw	r24, 0x01	; 1
    399e:	9c 8b       	std	Y+20, r25	; 0x14
    39a0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39a2:	8b 89       	ldd	r24, Y+19	; 0x13
    39a4:	9c 89       	ldd	r25, Y+20	; 0x14
    39a6:	00 97       	sbiw	r24, 0x00	; 0
    39a8:	69 f7       	brne	.-38     	; 0x3984 <LCD_sendCommand+0x28e>
    39aa:	14 c0       	rjmp	.+40     	; 0x39d4 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39ac:	6d 89       	ldd	r22, Y+21	; 0x15
    39ae:	7e 89       	ldd	r23, Y+22	; 0x16
    39b0:	8f 89       	ldd	r24, Y+23	; 0x17
    39b2:	98 8d       	ldd	r25, Y+24	; 0x18
    39b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39b8:	dc 01       	movw	r26, r24
    39ba:	cb 01       	movw	r24, r22
    39bc:	9c 8b       	std	Y+20, r25	; 0x14
    39be:	8b 8b       	std	Y+19, r24	; 0x13
    39c0:	8b 89       	ldd	r24, Y+19	; 0x13
    39c2:	9c 89       	ldd	r25, Y+20	; 0x14
    39c4:	98 8b       	std	Y+16, r25	; 0x10
    39c6:	8f 87       	std	Y+15, r24	; 0x0f
    39c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    39ca:	98 89       	ldd	r25, Y+16	; 0x10
    39cc:	01 97       	sbiw	r24, 0x01	; 1
    39ce:	f1 f7       	brne	.-4      	; 0x39cc <LCD_sendCommand+0x2d6>
    39d0:	98 8b       	std	Y+16, r25	; 0x10
    39d2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    39d4:	82 e0       	ldi	r24, 0x02	; 2
    39d6:	61 e0       	ldi	r22, 0x01	; 1
    39d8:	40 e0       	ldi	r20, 0x00	; 0
    39da:	0e 94 77 17 	call	0x2eee	; 0x2eee <GPIO_writePin>
    39de:	80 e0       	ldi	r24, 0x00	; 0
    39e0:	90 e0       	ldi	r25, 0x00	; 0
    39e2:	a0 e8       	ldi	r26, 0x80	; 128
    39e4:	bf e3       	ldi	r27, 0x3F	; 63
    39e6:	8b 87       	std	Y+11, r24	; 0x0b
    39e8:	9c 87       	std	Y+12, r25	; 0x0c
    39ea:	ad 87       	std	Y+13, r26	; 0x0d
    39ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    39f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    39f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    39f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    39f6:	20 e0       	ldi	r18, 0x00	; 0
    39f8:	30 e0       	ldi	r19, 0x00	; 0
    39fa:	4a e7       	ldi	r20, 0x7A	; 122
    39fc:	53 e4       	ldi	r21, 0x43	; 67
    39fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a02:	dc 01       	movw	r26, r24
    3a04:	cb 01       	movw	r24, r22
    3a06:	8f 83       	std	Y+7, r24	; 0x07
    3a08:	98 87       	std	Y+8, r25	; 0x08
    3a0a:	a9 87       	std	Y+9, r26	; 0x09
    3a0c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a0e:	6f 81       	ldd	r22, Y+7	; 0x07
    3a10:	78 85       	ldd	r23, Y+8	; 0x08
    3a12:	89 85       	ldd	r24, Y+9	; 0x09
    3a14:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a16:	20 e0       	ldi	r18, 0x00	; 0
    3a18:	30 e0       	ldi	r19, 0x00	; 0
    3a1a:	40 e8       	ldi	r20, 0x80	; 128
    3a1c:	5f e3       	ldi	r21, 0x3F	; 63
    3a1e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a22:	88 23       	and	r24, r24
    3a24:	2c f4       	brge	.+10     	; 0x3a30 <LCD_sendCommand+0x33a>
		__ticks = 1;
    3a26:	81 e0       	ldi	r24, 0x01	; 1
    3a28:	90 e0       	ldi	r25, 0x00	; 0
    3a2a:	9e 83       	std	Y+6, r25	; 0x06
    3a2c:	8d 83       	std	Y+5, r24	; 0x05
    3a2e:	3f c0       	rjmp	.+126    	; 0x3aae <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    3a30:	6f 81       	ldd	r22, Y+7	; 0x07
    3a32:	78 85       	ldd	r23, Y+8	; 0x08
    3a34:	89 85       	ldd	r24, Y+9	; 0x09
    3a36:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a38:	20 e0       	ldi	r18, 0x00	; 0
    3a3a:	3f ef       	ldi	r19, 0xFF	; 255
    3a3c:	4f e7       	ldi	r20, 0x7F	; 127
    3a3e:	57 e4       	ldi	r21, 0x47	; 71
    3a40:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a44:	18 16       	cp	r1, r24
    3a46:	4c f5       	brge	.+82     	; 0x3a9a <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a48:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a50:	20 e0       	ldi	r18, 0x00	; 0
    3a52:	30 e0       	ldi	r19, 0x00	; 0
    3a54:	40 e2       	ldi	r20, 0x20	; 32
    3a56:	51 e4       	ldi	r21, 0x41	; 65
    3a58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a5c:	dc 01       	movw	r26, r24
    3a5e:	cb 01       	movw	r24, r22
    3a60:	bc 01       	movw	r22, r24
    3a62:	cd 01       	movw	r24, r26
    3a64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a68:	dc 01       	movw	r26, r24
    3a6a:	cb 01       	movw	r24, r22
    3a6c:	9e 83       	std	Y+6, r25	; 0x06
    3a6e:	8d 83       	std	Y+5, r24	; 0x05
    3a70:	0f c0       	rjmp	.+30     	; 0x3a90 <LCD_sendCommand+0x39a>
    3a72:	89 e1       	ldi	r24, 0x19	; 25
    3a74:	90 e0       	ldi	r25, 0x00	; 0
    3a76:	9c 83       	std	Y+4, r25	; 0x04
    3a78:	8b 83       	std	Y+3, r24	; 0x03
    3a7a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a7c:	9c 81       	ldd	r25, Y+4	; 0x04
    3a7e:	01 97       	sbiw	r24, 0x01	; 1
    3a80:	f1 f7       	brne	.-4      	; 0x3a7e <LCD_sendCommand+0x388>
    3a82:	9c 83       	std	Y+4, r25	; 0x04
    3a84:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a86:	8d 81       	ldd	r24, Y+5	; 0x05
    3a88:	9e 81       	ldd	r25, Y+6	; 0x06
    3a8a:	01 97       	sbiw	r24, 0x01	; 1
    3a8c:	9e 83       	std	Y+6, r25	; 0x06
    3a8e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a90:	8d 81       	ldd	r24, Y+5	; 0x05
    3a92:	9e 81       	ldd	r25, Y+6	; 0x06
    3a94:	00 97       	sbiw	r24, 0x00	; 0
    3a96:	69 f7       	brne	.-38     	; 0x3a72 <LCD_sendCommand+0x37c>
    3a98:	14 c0       	rjmp	.+40     	; 0x3ac2 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a9a:	6f 81       	ldd	r22, Y+7	; 0x07
    3a9c:	78 85       	ldd	r23, Y+8	; 0x08
    3a9e:	89 85       	ldd	r24, Y+9	; 0x09
    3aa0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3aa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aa6:	dc 01       	movw	r26, r24
    3aa8:	cb 01       	movw	r24, r22
    3aaa:	9e 83       	std	Y+6, r25	; 0x06
    3aac:	8d 83       	std	Y+5, r24	; 0x05
    3aae:	8d 81       	ldd	r24, Y+5	; 0x05
    3ab0:	9e 81       	ldd	r25, Y+6	; 0x06
    3ab2:	9a 83       	std	Y+2, r25	; 0x02
    3ab4:	89 83       	std	Y+1, r24	; 0x01
    3ab6:	89 81       	ldd	r24, Y+1	; 0x01
    3ab8:	9a 81       	ldd	r25, Y+2	; 0x02
    3aba:	01 97       	sbiw	r24, 0x01	; 1
    3abc:	f1 f7       	brne	.-4      	; 0x3aba <LCD_sendCommand+0x3c4>
    3abe:	9a 83       	std	Y+2, r25	; 0x02
    3ac0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3ac2:	e9 96       	adiw	r28, 0x39	; 57
    3ac4:	0f b6       	in	r0, 0x3f	; 63
    3ac6:	f8 94       	cli
    3ac8:	de bf       	out	0x3e, r29	; 62
    3aca:	0f be       	out	0x3f, r0	; 63
    3acc:	cd bf       	out	0x3d, r28	; 61
    3ace:	cf 91       	pop	r28
    3ad0:	df 91       	pop	r29
    3ad2:	08 95       	ret

00003ad4 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    3ad4:	df 93       	push	r29
    3ad6:	cf 93       	push	r28
    3ad8:	cd b7       	in	r28, 0x3d	; 61
    3ada:	de b7       	in	r29, 0x3e	; 62
    3adc:	e9 97       	sbiw	r28, 0x39	; 57
    3ade:	0f b6       	in	r0, 0x3f	; 63
    3ae0:	f8 94       	cli
    3ae2:	de bf       	out	0x3e, r29	; 62
    3ae4:	0f be       	out	0x3f, r0	; 63
    3ae6:	cd bf       	out	0x3d, r28	; 61
    3ae8:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    3aea:	82 e0       	ldi	r24, 0x02	; 2
    3aec:	60 e0       	ldi	r22, 0x00	; 0
    3aee:	41 e0       	ldi	r20, 0x01	; 1
    3af0:	0e 94 77 17 	call	0x2eee	; 0x2eee <GPIO_writePin>
    3af4:	80 e0       	ldi	r24, 0x00	; 0
    3af6:	90 e0       	ldi	r25, 0x00	; 0
    3af8:	a0 e8       	ldi	r26, 0x80	; 128
    3afa:	bf e3       	ldi	r27, 0x3F	; 63
    3afc:	8d ab       	std	Y+53, r24	; 0x35
    3afe:	9e ab       	std	Y+54, r25	; 0x36
    3b00:	af ab       	std	Y+55, r26	; 0x37
    3b02:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b04:	6d a9       	ldd	r22, Y+53	; 0x35
    3b06:	7e a9       	ldd	r23, Y+54	; 0x36
    3b08:	8f a9       	ldd	r24, Y+55	; 0x37
    3b0a:	98 ad       	ldd	r25, Y+56	; 0x38
    3b0c:	20 e0       	ldi	r18, 0x00	; 0
    3b0e:	30 e0       	ldi	r19, 0x00	; 0
    3b10:	4a e7       	ldi	r20, 0x7A	; 122
    3b12:	53 e4       	ldi	r21, 0x43	; 67
    3b14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b18:	dc 01       	movw	r26, r24
    3b1a:	cb 01       	movw	r24, r22
    3b1c:	89 ab       	std	Y+49, r24	; 0x31
    3b1e:	9a ab       	std	Y+50, r25	; 0x32
    3b20:	ab ab       	std	Y+51, r26	; 0x33
    3b22:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3b24:	69 a9       	ldd	r22, Y+49	; 0x31
    3b26:	7a a9       	ldd	r23, Y+50	; 0x32
    3b28:	8b a9       	ldd	r24, Y+51	; 0x33
    3b2a:	9c a9       	ldd	r25, Y+52	; 0x34
    3b2c:	20 e0       	ldi	r18, 0x00	; 0
    3b2e:	30 e0       	ldi	r19, 0x00	; 0
    3b30:	40 e8       	ldi	r20, 0x80	; 128
    3b32:	5f e3       	ldi	r21, 0x3F	; 63
    3b34:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b38:	88 23       	and	r24, r24
    3b3a:	2c f4       	brge	.+10     	; 0x3b46 <LCD_displayCharacter+0x72>
		__ticks = 1;
    3b3c:	81 e0       	ldi	r24, 0x01	; 1
    3b3e:	90 e0       	ldi	r25, 0x00	; 0
    3b40:	98 ab       	std	Y+48, r25	; 0x30
    3b42:	8f a7       	std	Y+47, r24	; 0x2f
    3b44:	3f c0       	rjmp	.+126    	; 0x3bc4 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    3b46:	69 a9       	ldd	r22, Y+49	; 0x31
    3b48:	7a a9       	ldd	r23, Y+50	; 0x32
    3b4a:	8b a9       	ldd	r24, Y+51	; 0x33
    3b4c:	9c a9       	ldd	r25, Y+52	; 0x34
    3b4e:	20 e0       	ldi	r18, 0x00	; 0
    3b50:	3f ef       	ldi	r19, 0xFF	; 255
    3b52:	4f e7       	ldi	r20, 0x7F	; 127
    3b54:	57 e4       	ldi	r21, 0x47	; 71
    3b56:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b5a:	18 16       	cp	r1, r24
    3b5c:	4c f5       	brge	.+82     	; 0x3bb0 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b5e:	6d a9       	ldd	r22, Y+53	; 0x35
    3b60:	7e a9       	ldd	r23, Y+54	; 0x36
    3b62:	8f a9       	ldd	r24, Y+55	; 0x37
    3b64:	98 ad       	ldd	r25, Y+56	; 0x38
    3b66:	20 e0       	ldi	r18, 0x00	; 0
    3b68:	30 e0       	ldi	r19, 0x00	; 0
    3b6a:	40 e2       	ldi	r20, 0x20	; 32
    3b6c:	51 e4       	ldi	r21, 0x41	; 65
    3b6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b72:	dc 01       	movw	r26, r24
    3b74:	cb 01       	movw	r24, r22
    3b76:	bc 01       	movw	r22, r24
    3b78:	cd 01       	movw	r24, r26
    3b7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b7e:	dc 01       	movw	r26, r24
    3b80:	cb 01       	movw	r24, r22
    3b82:	98 ab       	std	Y+48, r25	; 0x30
    3b84:	8f a7       	std	Y+47, r24	; 0x2f
    3b86:	0f c0       	rjmp	.+30     	; 0x3ba6 <LCD_displayCharacter+0xd2>
    3b88:	89 e1       	ldi	r24, 0x19	; 25
    3b8a:	90 e0       	ldi	r25, 0x00	; 0
    3b8c:	9e a7       	std	Y+46, r25	; 0x2e
    3b8e:	8d a7       	std	Y+45, r24	; 0x2d
    3b90:	8d a5       	ldd	r24, Y+45	; 0x2d
    3b92:	9e a5       	ldd	r25, Y+46	; 0x2e
    3b94:	01 97       	sbiw	r24, 0x01	; 1
    3b96:	f1 f7       	brne	.-4      	; 0x3b94 <LCD_displayCharacter+0xc0>
    3b98:	9e a7       	std	Y+46, r25	; 0x2e
    3b9a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b9c:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b9e:	98 a9       	ldd	r25, Y+48	; 0x30
    3ba0:	01 97       	sbiw	r24, 0x01	; 1
    3ba2:	98 ab       	std	Y+48, r25	; 0x30
    3ba4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ba6:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ba8:	98 a9       	ldd	r25, Y+48	; 0x30
    3baa:	00 97       	sbiw	r24, 0x00	; 0
    3bac:	69 f7       	brne	.-38     	; 0x3b88 <LCD_displayCharacter+0xb4>
    3bae:	14 c0       	rjmp	.+40     	; 0x3bd8 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bb0:	69 a9       	ldd	r22, Y+49	; 0x31
    3bb2:	7a a9       	ldd	r23, Y+50	; 0x32
    3bb4:	8b a9       	ldd	r24, Y+51	; 0x33
    3bb6:	9c a9       	ldd	r25, Y+52	; 0x34
    3bb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bbc:	dc 01       	movw	r26, r24
    3bbe:	cb 01       	movw	r24, r22
    3bc0:	98 ab       	std	Y+48, r25	; 0x30
    3bc2:	8f a7       	std	Y+47, r24	; 0x2f
    3bc4:	8f a5       	ldd	r24, Y+47	; 0x2f
    3bc6:	98 a9       	ldd	r25, Y+48	; 0x30
    3bc8:	9c a7       	std	Y+44, r25	; 0x2c
    3bca:	8b a7       	std	Y+43, r24	; 0x2b
    3bcc:	8b a5       	ldd	r24, Y+43	; 0x2b
    3bce:	9c a5       	ldd	r25, Y+44	; 0x2c
    3bd0:	01 97       	sbiw	r24, 0x01	; 1
    3bd2:	f1 f7       	brne	.-4      	; 0x3bd0 <LCD_displayCharacter+0xfc>
    3bd4:	9c a7       	std	Y+44, r25	; 0x2c
    3bd6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    3bd8:	82 e0       	ldi	r24, 0x02	; 2
    3bda:	61 e0       	ldi	r22, 0x01	; 1
    3bdc:	41 e0       	ldi	r20, 0x01	; 1
    3bde:	0e 94 77 17 	call	0x2eee	; 0x2eee <GPIO_writePin>
    3be2:	80 e0       	ldi	r24, 0x00	; 0
    3be4:	90 e0       	ldi	r25, 0x00	; 0
    3be6:	a0 e8       	ldi	r26, 0x80	; 128
    3be8:	bf e3       	ldi	r27, 0x3F	; 63
    3bea:	8f a3       	std	Y+39, r24	; 0x27
    3bec:	98 a7       	std	Y+40, r25	; 0x28
    3bee:	a9 a7       	std	Y+41, r26	; 0x29
    3bf0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bf2:	6f a1       	ldd	r22, Y+39	; 0x27
    3bf4:	78 a5       	ldd	r23, Y+40	; 0x28
    3bf6:	89 a5       	ldd	r24, Y+41	; 0x29
    3bf8:	9a a5       	ldd	r25, Y+42	; 0x2a
    3bfa:	20 e0       	ldi	r18, 0x00	; 0
    3bfc:	30 e0       	ldi	r19, 0x00	; 0
    3bfe:	4a e7       	ldi	r20, 0x7A	; 122
    3c00:	53 e4       	ldi	r21, 0x43	; 67
    3c02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c06:	dc 01       	movw	r26, r24
    3c08:	cb 01       	movw	r24, r22
    3c0a:	8b a3       	std	Y+35, r24	; 0x23
    3c0c:	9c a3       	std	Y+36, r25	; 0x24
    3c0e:	ad a3       	std	Y+37, r26	; 0x25
    3c10:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3c12:	6b a1       	ldd	r22, Y+35	; 0x23
    3c14:	7c a1       	ldd	r23, Y+36	; 0x24
    3c16:	8d a1       	ldd	r24, Y+37	; 0x25
    3c18:	9e a1       	ldd	r25, Y+38	; 0x26
    3c1a:	20 e0       	ldi	r18, 0x00	; 0
    3c1c:	30 e0       	ldi	r19, 0x00	; 0
    3c1e:	40 e8       	ldi	r20, 0x80	; 128
    3c20:	5f e3       	ldi	r21, 0x3F	; 63
    3c22:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c26:	88 23       	and	r24, r24
    3c28:	2c f4       	brge	.+10     	; 0x3c34 <LCD_displayCharacter+0x160>
		__ticks = 1;
    3c2a:	81 e0       	ldi	r24, 0x01	; 1
    3c2c:	90 e0       	ldi	r25, 0x00	; 0
    3c2e:	9a a3       	std	Y+34, r25	; 0x22
    3c30:	89 a3       	std	Y+33, r24	; 0x21
    3c32:	3f c0       	rjmp	.+126    	; 0x3cb2 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    3c34:	6b a1       	ldd	r22, Y+35	; 0x23
    3c36:	7c a1       	ldd	r23, Y+36	; 0x24
    3c38:	8d a1       	ldd	r24, Y+37	; 0x25
    3c3a:	9e a1       	ldd	r25, Y+38	; 0x26
    3c3c:	20 e0       	ldi	r18, 0x00	; 0
    3c3e:	3f ef       	ldi	r19, 0xFF	; 255
    3c40:	4f e7       	ldi	r20, 0x7F	; 127
    3c42:	57 e4       	ldi	r21, 0x47	; 71
    3c44:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c48:	18 16       	cp	r1, r24
    3c4a:	4c f5       	brge	.+82     	; 0x3c9e <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c4c:	6f a1       	ldd	r22, Y+39	; 0x27
    3c4e:	78 a5       	ldd	r23, Y+40	; 0x28
    3c50:	89 a5       	ldd	r24, Y+41	; 0x29
    3c52:	9a a5       	ldd	r25, Y+42	; 0x2a
    3c54:	20 e0       	ldi	r18, 0x00	; 0
    3c56:	30 e0       	ldi	r19, 0x00	; 0
    3c58:	40 e2       	ldi	r20, 0x20	; 32
    3c5a:	51 e4       	ldi	r21, 0x41	; 65
    3c5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c60:	dc 01       	movw	r26, r24
    3c62:	cb 01       	movw	r24, r22
    3c64:	bc 01       	movw	r22, r24
    3c66:	cd 01       	movw	r24, r26
    3c68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c6c:	dc 01       	movw	r26, r24
    3c6e:	cb 01       	movw	r24, r22
    3c70:	9a a3       	std	Y+34, r25	; 0x22
    3c72:	89 a3       	std	Y+33, r24	; 0x21
    3c74:	0f c0       	rjmp	.+30     	; 0x3c94 <LCD_displayCharacter+0x1c0>
    3c76:	89 e1       	ldi	r24, 0x19	; 25
    3c78:	90 e0       	ldi	r25, 0x00	; 0
    3c7a:	98 a3       	std	Y+32, r25	; 0x20
    3c7c:	8f 8f       	std	Y+31, r24	; 0x1f
    3c7e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3c80:	98 a1       	ldd	r25, Y+32	; 0x20
    3c82:	01 97       	sbiw	r24, 0x01	; 1
    3c84:	f1 f7       	brne	.-4      	; 0x3c82 <LCD_displayCharacter+0x1ae>
    3c86:	98 a3       	std	Y+32, r25	; 0x20
    3c88:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c8a:	89 a1       	ldd	r24, Y+33	; 0x21
    3c8c:	9a a1       	ldd	r25, Y+34	; 0x22
    3c8e:	01 97       	sbiw	r24, 0x01	; 1
    3c90:	9a a3       	std	Y+34, r25	; 0x22
    3c92:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c94:	89 a1       	ldd	r24, Y+33	; 0x21
    3c96:	9a a1       	ldd	r25, Y+34	; 0x22
    3c98:	00 97       	sbiw	r24, 0x00	; 0
    3c9a:	69 f7       	brne	.-38     	; 0x3c76 <LCD_displayCharacter+0x1a2>
    3c9c:	14 c0       	rjmp	.+40     	; 0x3cc6 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c9e:	6b a1       	ldd	r22, Y+35	; 0x23
    3ca0:	7c a1       	ldd	r23, Y+36	; 0x24
    3ca2:	8d a1       	ldd	r24, Y+37	; 0x25
    3ca4:	9e a1       	ldd	r25, Y+38	; 0x26
    3ca6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3caa:	dc 01       	movw	r26, r24
    3cac:	cb 01       	movw	r24, r22
    3cae:	9a a3       	std	Y+34, r25	; 0x22
    3cb0:	89 a3       	std	Y+33, r24	; 0x21
    3cb2:	89 a1       	ldd	r24, Y+33	; 0x21
    3cb4:	9a a1       	ldd	r25, Y+34	; 0x22
    3cb6:	9e 8f       	std	Y+30, r25	; 0x1e
    3cb8:	8d 8f       	std	Y+29, r24	; 0x1d
    3cba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3cbc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3cbe:	01 97       	sbiw	r24, 0x01	; 1
    3cc0:	f1 f7       	brne	.-4      	; 0x3cbe <LCD_displayCharacter+0x1ea>
    3cc2:	9e 8f       	std	Y+30, r25	; 0x1e
    3cc4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    3cc6:	80 e0       	ldi	r24, 0x00	; 0
    3cc8:	69 ad       	ldd	r22, Y+57	; 0x39
    3cca:	0e 94 41 19 	call	0x3282	; 0x3282 <GPIO_writePort>
    3cce:	80 e0       	ldi	r24, 0x00	; 0
    3cd0:	90 e0       	ldi	r25, 0x00	; 0
    3cd2:	a0 e8       	ldi	r26, 0x80	; 128
    3cd4:	bf e3       	ldi	r27, 0x3F	; 63
    3cd6:	89 8f       	std	Y+25, r24	; 0x19
    3cd8:	9a 8f       	std	Y+26, r25	; 0x1a
    3cda:	ab 8f       	std	Y+27, r26	; 0x1b
    3cdc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cde:	69 8d       	ldd	r22, Y+25	; 0x19
    3ce0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ce2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ce4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ce6:	20 e0       	ldi	r18, 0x00	; 0
    3ce8:	30 e0       	ldi	r19, 0x00	; 0
    3cea:	4a e7       	ldi	r20, 0x7A	; 122
    3cec:	53 e4       	ldi	r21, 0x43	; 67
    3cee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cf2:	dc 01       	movw	r26, r24
    3cf4:	cb 01       	movw	r24, r22
    3cf6:	8d 8b       	std	Y+21, r24	; 0x15
    3cf8:	9e 8b       	std	Y+22, r25	; 0x16
    3cfa:	af 8b       	std	Y+23, r26	; 0x17
    3cfc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3cfe:	6d 89       	ldd	r22, Y+21	; 0x15
    3d00:	7e 89       	ldd	r23, Y+22	; 0x16
    3d02:	8f 89       	ldd	r24, Y+23	; 0x17
    3d04:	98 8d       	ldd	r25, Y+24	; 0x18
    3d06:	20 e0       	ldi	r18, 0x00	; 0
    3d08:	30 e0       	ldi	r19, 0x00	; 0
    3d0a:	40 e8       	ldi	r20, 0x80	; 128
    3d0c:	5f e3       	ldi	r21, 0x3F	; 63
    3d0e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d12:	88 23       	and	r24, r24
    3d14:	2c f4       	brge	.+10     	; 0x3d20 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    3d16:	81 e0       	ldi	r24, 0x01	; 1
    3d18:	90 e0       	ldi	r25, 0x00	; 0
    3d1a:	9c 8b       	std	Y+20, r25	; 0x14
    3d1c:	8b 8b       	std	Y+19, r24	; 0x13
    3d1e:	3f c0       	rjmp	.+126    	; 0x3d9e <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    3d20:	6d 89       	ldd	r22, Y+21	; 0x15
    3d22:	7e 89       	ldd	r23, Y+22	; 0x16
    3d24:	8f 89       	ldd	r24, Y+23	; 0x17
    3d26:	98 8d       	ldd	r25, Y+24	; 0x18
    3d28:	20 e0       	ldi	r18, 0x00	; 0
    3d2a:	3f ef       	ldi	r19, 0xFF	; 255
    3d2c:	4f e7       	ldi	r20, 0x7F	; 127
    3d2e:	57 e4       	ldi	r21, 0x47	; 71
    3d30:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d34:	18 16       	cp	r1, r24
    3d36:	4c f5       	brge	.+82     	; 0x3d8a <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d38:	69 8d       	ldd	r22, Y+25	; 0x19
    3d3a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d3e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d40:	20 e0       	ldi	r18, 0x00	; 0
    3d42:	30 e0       	ldi	r19, 0x00	; 0
    3d44:	40 e2       	ldi	r20, 0x20	; 32
    3d46:	51 e4       	ldi	r21, 0x41	; 65
    3d48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d4c:	dc 01       	movw	r26, r24
    3d4e:	cb 01       	movw	r24, r22
    3d50:	bc 01       	movw	r22, r24
    3d52:	cd 01       	movw	r24, r26
    3d54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d58:	dc 01       	movw	r26, r24
    3d5a:	cb 01       	movw	r24, r22
    3d5c:	9c 8b       	std	Y+20, r25	; 0x14
    3d5e:	8b 8b       	std	Y+19, r24	; 0x13
    3d60:	0f c0       	rjmp	.+30     	; 0x3d80 <LCD_displayCharacter+0x2ac>
    3d62:	89 e1       	ldi	r24, 0x19	; 25
    3d64:	90 e0       	ldi	r25, 0x00	; 0
    3d66:	9a 8b       	std	Y+18, r25	; 0x12
    3d68:	89 8b       	std	Y+17, r24	; 0x11
    3d6a:	89 89       	ldd	r24, Y+17	; 0x11
    3d6c:	9a 89       	ldd	r25, Y+18	; 0x12
    3d6e:	01 97       	sbiw	r24, 0x01	; 1
    3d70:	f1 f7       	brne	.-4      	; 0x3d6e <LCD_displayCharacter+0x29a>
    3d72:	9a 8b       	std	Y+18, r25	; 0x12
    3d74:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d76:	8b 89       	ldd	r24, Y+19	; 0x13
    3d78:	9c 89       	ldd	r25, Y+20	; 0x14
    3d7a:	01 97       	sbiw	r24, 0x01	; 1
    3d7c:	9c 8b       	std	Y+20, r25	; 0x14
    3d7e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d80:	8b 89       	ldd	r24, Y+19	; 0x13
    3d82:	9c 89       	ldd	r25, Y+20	; 0x14
    3d84:	00 97       	sbiw	r24, 0x00	; 0
    3d86:	69 f7       	brne	.-38     	; 0x3d62 <LCD_displayCharacter+0x28e>
    3d88:	14 c0       	rjmp	.+40     	; 0x3db2 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d8a:	6d 89       	ldd	r22, Y+21	; 0x15
    3d8c:	7e 89       	ldd	r23, Y+22	; 0x16
    3d8e:	8f 89       	ldd	r24, Y+23	; 0x17
    3d90:	98 8d       	ldd	r25, Y+24	; 0x18
    3d92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d96:	dc 01       	movw	r26, r24
    3d98:	cb 01       	movw	r24, r22
    3d9a:	9c 8b       	std	Y+20, r25	; 0x14
    3d9c:	8b 8b       	std	Y+19, r24	; 0x13
    3d9e:	8b 89       	ldd	r24, Y+19	; 0x13
    3da0:	9c 89       	ldd	r25, Y+20	; 0x14
    3da2:	98 8b       	std	Y+16, r25	; 0x10
    3da4:	8f 87       	std	Y+15, r24	; 0x0f
    3da6:	8f 85       	ldd	r24, Y+15	; 0x0f
    3da8:	98 89       	ldd	r25, Y+16	; 0x10
    3daa:	01 97       	sbiw	r24, 0x01	; 1
    3dac:	f1 f7       	brne	.-4      	; 0x3daa <LCD_displayCharacter+0x2d6>
    3dae:	98 8b       	std	Y+16, r25	; 0x10
    3db0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3db2:	82 e0       	ldi	r24, 0x02	; 2
    3db4:	61 e0       	ldi	r22, 0x01	; 1
    3db6:	40 e0       	ldi	r20, 0x00	; 0
    3db8:	0e 94 77 17 	call	0x2eee	; 0x2eee <GPIO_writePin>
    3dbc:	80 e0       	ldi	r24, 0x00	; 0
    3dbe:	90 e0       	ldi	r25, 0x00	; 0
    3dc0:	a0 e8       	ldi	r26, 0x80	; 128
    3dc2:	bf e3       	ldi	r27, 0x3F	; 63
    3dc4:	8b 87       	std	Y+11, r24	; 0x0b
    3dc6:	9c 87       	std	Y+12, r25	; 0x0c
    3dc8:	ad 87       	std	Y+13, r26	; 0x0d
    3dca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dcc:	6b 85       	ldd	r22, Y+11	; 0x0b
    3dce:	7c 85       	ldd	r23, Y+12	; 0x0c
    3dd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3dd2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3dd4:	20 e0       	ldi	r18, 0x00	; 0
    3dd6:	30 e0       	ldi	r19, 0x00	; 0
    3dd8:	4a e7       	ldi	r20, 0x7A	; 122
    3dda:	53 e4       	ldi	r21, 0x43	; 67
    3ddc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3de0:	dc 01       	movw	r26, r24
    3de2:	cb 01       	movw	r24, r22
    3de4:	8f 83       	std	Y+7, r24	; 0x07
    3de6:	98 87       	std	Y+8, r25	; 0x08
    3de8:	a9 87       	std	Y+9, r26	; 0x09
    3dea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3dec:	6f 81       	ldd	r22, Y+7	; 0x07
    3dee:	78 85       	ldd	r23, Y+8	; 0x08
    3df0:	89 85       	ldd	r24, Y+9	; 0x09
    3df2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3df4:	20 e0       	ldi	r18, 0x00	; 0
    3df6:	30 e0       	ldi	r19, 0x00	; 0
    3df8:	40 e8       	ldi	r20, 0x80	; 128
    3dfa:	5f e3       	ldi	r21, 0x3F	; 63
    3dfc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e00:	88 23       	and	r24, r24
    3e02:	2c f4       	brge	.+10     	; 0x3e0e <LCD_displayCharacter+0x33a>
		__ticks = 1;
    3e04:	81 e0       	ldi	r24, 0x01	; 1
    3e06:	90 e0       	ldi	r25, 0x00	; 0
    3e08:	9e 83       	std	Y+6, r25	; 0x06
    3e0a:	8d 83       	std	Y+5, r24	; 0x05
    3e0c:	3f c0       	rjmp	.+126    	; 0x3e8c <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    3e0e:	6f 81       	ldd	r22, Y+7	; 0x07
    3e10:	78 85       	ldd	r23, Y+8	; 0x08
    3e12:	89 85       	ldd	r24, Y+9	; 0x09
    3e14:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e16:	20 e0       	ldi	r18, 0x00	; 0
    3e18:	3f ef       	ldi	r19, 0xFF	; 255
    3e1a:	4f e7       	ldi	r20, 0x7F	; 127
    3e1c:	57 e4       	ldi	r21, 0x47	; 71
    3e1e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e22:	18 16       	cp	r1, r24
    3e24:	4c f5       	brge	.+82     	; 0x3e78 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e26:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e28:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e2e:	20 e0       	ldi	r18, 0x00	; 0
    3e30:	30 e0       	ldi	r19, 0x00	; 0
    3e32:	40 e2       	ldi	r20, 0x20	; 32
    3e34:	51 e4       	ldi	r21, 0x41	; 65
    3e36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e3a:	dc 01       	movw	r26, r24
    3e3c:	cb 01       	movw	r24, r22
    3e3e:	bc 01       	movw	r22, r24
    3e40:	cd 01       	movw	r24, r26
    3e42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e46:	dc 01       	movw	r26, r24
    3e48:	cb 01       	movw	r24, r22
    3e4a:	9e 83       	std	Y+6, r25	; 0x06
    3e4c:	8d 83       	std	Y+5, r24	; 0x05
    3e4e:	0f c0       	rjmp	.+30     	; 0x3e6e <LCD_displayCharacter+0x39a>
    3e50:	89 e1       	ldi	r24, 0x19	; 25
    3e52:	90 e0       	ldi	r25, 0x00	; 0
    3e54:	9c 83       	std	Y+4, r25	; 0x04
    3e56:	8b 83       	std	Y+3, r24	; 0x03
    3e58:	8b 81       	ldd	r24, Y+3	; 0x03
    3e5a:	9c 81       	ldd	r25, Y+4	; 0x04
    3e5c:	01 97       	sbiw	r24, 0x01	; 1
    3e5e:	f1 f7       	brne	.-4      	; 0x3e5c <LCD_displayCharacter+0x388>
    3e60:	9c 83       	std	Y+4, r25	; 0x04
    3e62:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e64:	8d 81       	ldd	r24, Y+5	; 0x05
    3e66:	9e 81       	ldd	r25, Y+6	; 0x06
    3e68:	01 97       	sbiw	r24, 0x01	; 1
    3e6a:	9e 83       	std	Y+6, r25	; 0x06
    3e6c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e6e:	8d 81       	ldd	r24, Y+5	; 0x05
    3e70:	9e 81       	ldd	r25, Y+6	; 0x06
    3e72:	00 97       	sbiw	r24, 0x00	; 0
    3e74:	69 f7       	brne	.-38     	; 0x3e50 <LCD_displayCharacter+0x37c>
    3e76:	14 c0       	rjmp	.+40     	; 0x3ea0 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e78:	6f 81       	ldd	r22, Y+7	; 0x07
    3e7a:	78 85       	ldd	r23, Y+8	; 0x08
    3e7c:	89 85       	ldd	r24, Y+9	; 0x09
    3e7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e84:	dc 01       	movw	r26, r24
    3e86:	cb 01       	movw	r24, r22
    3e88:	9e 83       	std	Y+6, r25	; 0x06
    3e8a:	8d 83       	std	Y+5, r24	; 0x05
    3e8c:	8d 81       	ldd	r24, Y+5	; 0x05
    3e8e:	9e 81       	ldd	r25, Y+6	; 0x06
    3e90:	9a 83       	std	Y+2, r25	; 0x02
    3e92:	89 83       	std	Y+1, r24	; 0x01
    3e94:	89 81       	ldd	r24, Y+1	; 0x01
    3e96:	9a 81       	ldd	r25, Y+2	; 0x02
    3e98:	01 97       	sbiw	r24, 0x01	; 1
    3e9a:	f1 f7       	brne	.-4      	; 0x3e98 <LCD_displayCharacter+0x3c4>
    3e9c:	9a 83       	std	Y+2, r25	; 0x02
    3e9e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3ea0:	e9 96       	adiw	r28, 0x39	; 57
    3ea2:	0f b6       	in	r0, 0x3f	; 63
    3ea4:	f8 94       	cli
    3ea6:	de bf       	out	0x3e, r29	; 62
    3ea8:	0f be       	out	0x3f, r0	; 63
    3eaa:	cd bf       	out	0x3d, r28	; 61
    3eac:	cf 91       	pop	r28
    3eae:	df 91       	pop	r29
    3eb0:	08 95       	ret

00003eb2 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    3eb2:	df 93       	push	r29
    3eb4:	cf 93       	push	r28
    3eb6:	00 d0       	rcall	.+0      	; 0x3eb8 <LCD_displayString+0x6>
    3eb8:	0f 92       	push	r0
    3eba:	cd b7       	in	r28, 0x3d	; 61
    3ebc:	de b7       	in	r29, 0x3e	; 62
    3ebe:	9b 83       	std	Y+3, r25	; 0x03
    3ec0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3ec2:	19 82       	std	Y+1, r1	; 0x01
    3ec4:	15 c0       	rjmp	.+42     	; 0x3ef0 <LCD_displayString+0x3e>
	while(Str[i] != '\0')
	{
		if (i == 16){
    3ec6:	89 81       	ldd	r24, Y+1	; 0x01
    3ec8:	80 31       	cpi	r24, 0x10	; 16
    3eca:	21 f4       	brne	.+8      	; 0x3ed4 <LCD_displayString+0x22>
			LCD_moveCursor(2, 0);
    3ecc:	82 e0       	ldi	r24, 0x02	; 2
    3ece:	60 e0       	ldi	r22, 0x00	; 0
    3ed0:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <LCD_moveCursor>
		}
		LCD_displayCharacter(Str[i]);
    3ed4:	89 81       	ldd	r24, Y+1	; 0x01
    3ed6:	28 2f       	mov	r18, r24
    3ed8:	30 e0       	ldi	r19, 0x00	; 0
    3eda:	8a 81       	ldd	r24, Y+2	; 0x02
    3edc:	9b 81       	ldd	r25, Y+3	; 0x03
    3ede:	fc 01       	movw	r30, r24
    3ee0:	e2 0f       	add	r30, r18
    3ee2:	f3 1f       	adc	r31, r19
    3ee4:	80 81       	ld	r24, Z
    3ee6:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <LCD_displayCharacter>
		i++;
    3eea:	89 81       	ldd	r24, Y+1	; 0x01
    3eec:	8f 5f       	subi	r24, 0xFF	; 255
    3eee:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    3ef0:	89 81       	ldd	r24, Y+1	; 0x01
    3ef2:	28 2f       	mov	r18, r24
    3ef4:	30 e0       	ldi	r19, 0x00	; 0
    3ef6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ef8:	9b 81       	ldd	r25, Y+3	; 0x03
    3efa:	fc 01       	movw	r30, r24
    3efc:	e2 0f       	add	r30, r18
    3efe:	f3 1f       	adc	r31, r19
    3f00:	80 81       	ld	r24, Z
    3f02:	88 23       	and	r24, r24
    3f04:	01 f7       	brne	.-64     	; 0x3ec6 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    3f06:	0f 90       	pop	r0
    3f08:	0f 90       	pop	r0
    3f0a:	0f 90       	pop	r0
    3f0c:	cf 91       	pop	r28
    3f0e:	df 91       	pop	r29
    3f10:	08 95       	ret

00003f12 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    3f12:	df 93       	push	r29
    3f14:	cf 93       	push	r28
    3f16:	00 d0       	rcall	.+0      	; 0x3f18 <LCD_moveCursor+0x6>
    3f18:	00 d0       	rcall	.+0      	; 0x3f1a <LCD_moveCursor+0x8>
    3f1a:	0f 92       	push	r0
    3f1c:	cd b7       	in	r28, 0x3d	; 61
    3f1e:	de b7       	in	r29, 0x3e	; 62
    3f20:	8a 83       	std	Y+2, r24	; 0x02
    3f22:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    3f24:	8a 81       	ldd	r24, Y+2	; 0x02
    3f26:	28 2f       	mov	r18, r24
    3f28:	30 e0       	ldi	r19, 0x00	; 0
    3f2a:	3d 83       	std	Y+5, r19	; 0x05
    3f2c:	2c 83       	std	Y+4, r18	; 0x04
    3f2e:	8c 81       	ldd	r24, Y+4	; 0x04
    3f30:	9d 81       	ldd	r25, Y+5	; 0x05
    3f32:	81 30       	cpi	r24, 0x01	; 1
    3f34:	91 05       	cpc	r25, r1
    3f36:	c1 f0       	breq	.+48     	; 0x3f68 <LCD_moveCursor+0x56>
    3f38:	2c 81       	ldd	r18, Y+4	; 0x04
    3f3a:	3d 81       	ldd	r19, Y+5	; 0x05
    3f3c:	22 30       	cpi	r18, 0x02	; 2
    3f3e:	31 05       	cpc	r19, r1
    3f40:	2c f4       	brge	.+10     	; 0x3f4c <LCD_moveCursor+0x3a>
    3f42:	8c 81       	ldd	r24, Y+4	; 0x04
    3f44:	9d 81       	ldd	r25, Y+5	; 0x05
    3f46:	00 97       	sbiw	r24, 0x00	; 0
    3f48:	61 f0       	breq	.+24     	; 0x3f62 <LCD_moveCursor+0x50>
    3f4a:	19 c0       	rjmp	.+50     	; 0x3f7e <LCD_moveCursor+0x6c>
    3f4c:	2c 81       	ldd	r18, Y+4	; 0x04
    3f4e:	3d 81       	ldd	r19, Y+5	; 0x05
    3f50:	22 30       	cpi	r18, 0x02	; 2
    3f52:	31 05       	cpc	r19, r1
    3f54:	69 f0       	breq	.+26     	; 0x3f70 <LCD_moveCursor+0x5e>
    3f56:	8c 81       	ldd	r24, Y+4	; 0x04
    3f58:	9d 81       	ldd	r25, Y+5	; 0x05
    3f5a:	83 30       	cpi	r24, 0x03	; 3
    3f5c:	91 05       	cpc	r25, r1
    3f5e:	61 f0       	breq	.+24     	; 0x3f78 <LCD_moveCursor+0x66>
    3f60:	0e c0       	rjmp	.+28     	; 0x3f7e <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    3f62:	8b 81       	ldd	r24, Y+3	; 0x03
    3f64:	89 83       	std	Y+1, r24	; 0x01
    3f66:	0b c0       	rjmp	.+22     	; 0x3f7e <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    3f68:	8b 81       	ldd	r24, Y+3	; 0x03
    3f6a:	80 5c       	subi	r24, 0xC0	; 192
    3f6c:	89 83       	std	Y+1, r24	; 0x01
    3f6e:	07 c0       	rjmp	.+14     	; 0x3f7e <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    3f70:	8b 81       	ldd	r24, Y+3	; 0x03
    3f72:	80 5f       	subi	r24, 0xF0	; 240
    3f74:	89 83       	std	Y+1, r24	; 0x01
    3f76:	03 c0       	rjmp	.+6      	; 0x3f7e <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    3f78:	8b 81       	ldd	r24, Y+3	; 0x03
    3f7a:	80 5b       	subi	r24, 0xB0	; 176
    3f7c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    3f7e:	89 81       	ldd	r24, Y+1	; 0x01
    3f80:	80 68       	ori	r24, 0x80	; 128
    3f82:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <LCD_sendCommand>
}
    3f86:	0f 90       	pop	r0
    3f88:	0f 90       	pop	r0
    3f8a:	0f 90       	pop	r0
    3f8c:	0f 90       	pop	r0
    3f8e:	0f 90       	pop	r0
    3f90:	cf 91       	pop	r28
    3f92:	df 91       	pop	r29
    3f94:	08 95       	ret

00003f96 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    3f96:	df 93       	push	r29
    3f98:	cf 93       	push	r28
    3f9a:	00 d0       	rcall	.+0      	; 0x3f9c <LCD_displayStringRowColumn+0x6>
    3f9c:	00 d0       	rcall	.+0      	; 0x3f9e <LCD_displayStringRowColumn+0x8>
    3f9e:	cd b7       	in	r28, 0x3d	; 61
    3fa0:	de b7       	in	r29, 0x3e	; 62
    3fa2:	89 83       	std	Y+1, r24	; 0x01
    3fa4:	6a 83       	std	Y+2, r22	; 0x02
    3fa6:	5c 83       	std	Y+4, r21	; 0x04
    3fa8:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    3faa:	89 81       	ldd	r24, Y+1	; 0x01
    3fac:	6a 81       	ldd	r22, Y+2	; 0x02
    3fae:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    3fb2:	8b 81       	ldd	r24, Y+3	; 0x03
    3fb4:	9c 81       	ldd	r25, Y+4	; 0x04
    3fb6:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <LCD_displayString>
}
    3fba:	0f 90       	pop	r0
    3fbc:	0f 90       	pop	r0
    3fbe:	0f 90       	pop	r0
    3fc0:	0f 90       	pop	r0
    3fc2:	cf 91       	pop	r28
    3fc4:	df 91       	pop	r29
    3fc6:	08 95       	ret

00003fc8 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    3fc8:	df 93       	push	r29
    3fca:	cf 93       	push	r28
    3fcc:	cd b7       	in	r28, 0x3d	; 61
    3fce:	de b7       	in	r29, 0x3e	; 62
    3fd0:	62 97       	sbiw	r28, 0x12	; 18
    3fd2:	0f b6       	in	r0, 0x3f	; 63
    3fd4:	f8 94       	cli
    3fd6:	de bf       	out	0x3e, r29	; 62
    3fd8:	0f be       	out	0x3f, r0	; 63
    3fda:	cd bf       	out	0x3d, r28	; 61
    3fdc:	9a 8b       	std	Y+18, r25	; 0x12
    3fde:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    3fe0:	89 89       	ldd	r24, Y+17	; 0x11
    3fe2:	9a 89       	ldd	r25, Y+18	; 0x12
    3fe4:	9e 01       	movw	r18, r28
    3fe6:	2f 5f       	subi	r18, 0xFF	; 255
    3fe8:	3f 4f       	sbci	r19, 0xFF	; 255
    3fea:	b9 01       	movw	r22, r18
    3fec:	4a e0       	ldi	r20, 0x0A	; 10
    3fee:	50 e0       	ldi	r21, 0x00	; 0
    3ff0:	0e 94 96 20 	call	0x412c	; 0x412c <itoa>
   LCD_displayString(buff); /* Display the string */
    3ff4:	ce 01       	movw	r24, r28
    3ff6:	01 96       	adiw	r24, 0x01	; 1
    3ff8:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <LCD_displayString>
}
    3ffc:	62 96       	adiw	r28, 0x12	; 18
    3ffe:	0f b6       	in	r0, 0x3f	; 63
    4000:	f8 94       	cli
    4002:	de bf       	out	0x3e, r29	; 62
    4004:	0f be       	out	0x3f, r0	; 63
    4006:	cd bf       	out	0x3d, r28	; 61
    4008:	cf 91       	pop	r28
    400a:	df 91       	pop	r29
    400c:	08 95       	ret

0000400e <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    400e:	df 93       	push	r29
    4010:	cf 93       	push	r28
    4012:	cd b7       	in	r28, 0x3d	; 61
    4014:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    4016:	81 e0       	ldi	r24, 0x01	; 1
    4018:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <LCD_sendCommand>
}
    401c:	cf 91       	pop	r28
    401e:	df 91       	pop	r29
    4020:	08 95       	ret

00004022 <__divmodhi4>:
    4022:	97 fb       	bst	r25, 7
    4024:	09 2e       	mov	r0, r25
    4026:	07 26       	eor	r0, r23
    4028:	0a d0       	rcall	.+20     	; 0x403e <__divmodhi4_neg1>
    402a:	77 fd       	sbrc	r23, 7
    402c:	04 d0       	rcall	.+8      	; 0x4036 <__divmodhi4_neg2>
    402e:	0c d0       	rcall	.+24     	; 0x4048 <__udivmodhi4>
    4030:	06 d0       	rcall	.+12     	; 0x403e <__divmodhi4_neg1>
    4032:	00 20       	and	r0, r0
    4034:	1a f4       	brpl	.+6      	; 0x403c <__divmodhi4_exit>

00004036 <__divmodhi4_neg2>:
    4036:	70 95       	com	r23
    4038:	61 95       	neg	r22
    403a:	7f 4f       	sbci	r23, 0xFF	; 255

0000403c <__divmodhi4_exit>:
    403c:	08 95       	ret

0000403e <__divmodhi4_neg1>:
    403e:	f6 f7       	brtc	.-4      	; 0x403c <__divmodhi4_exit>
    4040:	90 95       	com	r25
    4042:	81 95       	neg	r24
    4044:	9f 4f       	sbci	r25, 0xFF	; 255
    4046:	08 95       	ret

00004048 <__udivmodhi4>:
    4048:	aa 1b       	sub	r26, r26
    404a:	bb 1b       	sub	r27, r27
    404c:	51 e1       	ldi	r21, 0x11	; 17
    404e:	07 c0       	rjmp	.+14     	; 0x405e <__udivmodhi4_ep>

00004050 <__udivmodhi4_loop>:
    4050:	aa 1f       	adc	r26, r26
    4052:	bb 1f       	adc	r27, r27
    4054:	a6 17       	cp	r26, r22
    4056:	b7 07       	cpc	r27, r23
    4058:	10 f0       	brcs	.+4      	; 0x405e <__udivmodhi4_ep>
    405a:	a6 1b       	sub	r26, r22
    405c:	b7 0b       	sbc	r27, r23

0000405e <__udivmodhi4_ep>:
    405e:	88 1f       	adc	r24, r24
    4060:	99 1f       	adc	r25, r25
    4062:	5a 95       	dec	r21
    4064:	a9 f7       	brne	.-22     	; 0x4050 <__udivmodhi4_loop>
    4066:	80 95       	com	r24
    4068:	90 95       	com	r25
    406a:	bc 01       	movw	r22, r24
    406c:	cd 01       	movw	r24, r26
    406e:	08 95       	ret

00004070 <__prologue_saves__>:
    4070:	2f 92       	push	r2
    4072:	3f 92       	push	r3
    4074:	4f 92       	push	r4
    4076:	5f 92       	push	r5
    4078:	6f 92       	push	r6
    407a:	7f 92       	push	r7
    407c:	8f 92       	push	r8
    407e:	9f 92       	push	r9
    4080:	af 92       	push	r10
    4082:	bf 92       	push	r11
    4084:	cf 92       	push	r12
    4086:	df 92       	push	r13
    4088:	ef 92       	push	r14
    408a:	ff 92       	push	r15
    408c:	0f 93       	push	r16
    408e:	1f 93       	push	r17
    4090:	cf 93       	push	r28
    4092:	df 93       	push	r29
    4094:	cd b7       	in	r28, 0x3d	; 61
    4096:	de b7       	in	r29, 0x3e	; 62
    4098:	ca 1b       	sub	r28, r26
    409a:	db 0b       	sbc	r29, r27
    409c:	0f b6       	in	r0, 0x3f	; 63
    409e:	f8 94       	cli
    40a0:	de bf       	out	0x3e, r29	; 62
    40a2:	0f be       	out	0x3f, r0	; 63
    40a4:	cd bf       	out	0x3d, r28	; 61
    40a6:	09 94       	ijmp

000040a8 <__epilogue_restores__>:
    40a8:	2a 88       	ldd	r2, Y+18	; 0x12
    40aa:	39 88       	ldd	r3, Y+17	; 0x11
    40ac:	48 88       	ldd	r4, Y+16	; 0x10
    40ae:	5f 84       	ldd	r5, Y+15	; 0x0f
    40b0:	6e 84       	ldd	r6, Y+14	; 0x0e
    40b2:	7d 84       	ldd	r7, Y+13	; 0x0d
    40b4:	8c 84       	ldd	r8, Y+12	; 0x0c
    40b6:	9b 84       	ldd	r9, Y+11	; 0x0b
    40b8:	aa 84       	ldd	r10, Y+10	; 0x0a
    40ba:	b9 84       	ldd	r11, Y+9	; 0x09
    40bc:	c8 84       	ldd	r12, Y+8	; 0x08
    40be:	df 80       	ldd	r13, Y+7	; 0x07
    40c0:	ee 80       	ldd	r14, Y+6	; 0x06
    40c2:	fd 80       	ldd	r15, Y+5	; 0x05
    40c4:	0c 81       	ldd	r16, Y+4	; 0x04
    40c6:	1b 81       	ldd	r17, Y+3	; 0x03
    40c8:	aa 81       	ldd	r26, Y+2	; 0x02
    40ca:	b9 81       	ldd	r27, Y+1	; 0x01
    40cc:	ce 0f       	add	r28, r30
    40ce:	d1 1d       	adc	r29, r1
    40d0:	0f b6       	in	r0, 0x3f	; 63
    40d2:	f8 94       	cli
    40d4:	de bf       	out	0x3e, r29	; 62
    40d6:	0f be       	out	0x3f, r0	; 63
    40d8:	cd bf       	out	0x3d, r28	; 61
    40da:	ed 01       	movw	r28, r26
    40dc:	08 95       	ret

000040de <atol>:
    40de:	1f 93       	push	r17
    40e0:	fc 01       	movw	r30, r24
    40e2:	99 27       	eor	r25, r25
    40e4:	88 27       	eor	r24, r24
    40e6:	bc 01       	movw	r22, r24
    40e8:	e8 94       	clt
    40ea:	11 91       	ld	r17, Z+
    40ec:	10 32       	cpi	r17, 0x20	; 32
    40ee:	e9 f3       	breq	.-6      	; 0x40ea <atol+0xc>
    40f0:	19 30       	cpi	r17, 0x09	; 9
    40f2:	10 f0       	brcs	.+4      	; 0x40f8 <atol+0x1a>
    40f4:	1e 30       	cpi	r17, 0x0E	; 14
    40f6:	c8 f3       	brcs	.-14     	; 0x40ea <atol+0xc>
    40f8:	1b 32       	cpi	r17, 0x2B	; 43
    40fa:	51 f0       	breq	.+20     	; 0x4110 <atol+0x32>
    40fc:	1d 32       	cpi	r17, 0x2D	; 45
    40fe:	49 f4       	brne	.+18     	; 0x4112 <atol+0x34>
    4100:	68 94       	set
    4102:	06 c0       	rjmp	.+12     	; 0x4110 <atol+0x32>
    4104:	0e 94 b7 20 	call	0x416e	; 0x416e <__mulsi_const_10>
    4108:	61 0f       	add	r22, r17
    410a:	71 1d       	adc	r23, r1
    410c:	81 1d       	adc	r24, r1
    410e:	91 1d       	adc	r25, r1
    4110:	11 91       	ld	r17, Z+
    4112:	10 53       	subi	r17, 0x30	; 48
    4114:	1a 30       	cpi	r17, 0x0A	; 10
    4116:	b0 f3       	brcs	.-20     	; 0x4104 <atol+0x26>
    4118:	3e f4       	brtc	.+14     	; 0x4128 <atol+0x4a>
    411a:	90 95       	com	r25
    411c:	80 95       	com	r24
    411e:	70 95       	com	r23
    4120:	61 95       	neg	r22
    4122:	7f 4f       	sbci	r23, 0xFF	; 255
    4124:	8f 4f       	sbci	r24, 0xFF	; 255
    4126:	9f 4f       	sbci	r25, 0xFF	; 255
    4128:	1f 91       	pop	r17
    412a:	08 95       	ret

0000412c <itoa>:
    412c:	fb 01       	movw	r30, r22
    412e:	9f 01       	movw	r18, r30
    4130:	e8 94       	clt
    4132:	42 30       	cpi	r20, 0x02	; 2
    4134:	c4 f0       	brlt	.+48     	; 0x4166 <itoa+0x3a>
    4136:	45 32       	cpi	r20, 0x25	; 37
    4138:	b4 f4       	brge	.+44     	; 0x4166 <itoa+0x3a>
    413a:	4a 30       	cpi	r20, 0x0A	; 10
    413c:	29 f4       	brne	.+10     	; 0x4148 <itoa+0x1c>
    413e:	97 fb       	bst	r25, 7
    4140:	1e f4       	brtc	.+6      	; 0x4148 <itoa+0x1c>
    4142:	90 95       	com	r25
    4144:	81 95       	neg	r24
    4146:	9f 4f       	sbci	r25, 0xFF	; 255
    4148:	64 2f       	mov	r22, r20
    414a:	77 27       	eor	r23, r23
    414c:	0e 94 24 20 	call	0x4048	; 0x4048 <__udivmodhi4>
    4150:	80 5d       	subi	r24, 0xD0	; 208
    4152:	8a 33       	cpi	r24, 0x3A	; 58
    4154:	0c f0       	brlt	.+2      	; 0x4158 <itoa+0x2c>
    4156:	89 5d       	subi	r24, 0xD9	; 217
    4158:	81 93       	st	Z+, r24
    415a:	cb 01       	movw	r24, r22
    415c:	00 97       	sbiw	r24, 0x00	; 0
    415e:	a1 f7       	brne	.-24     	; 0x4148 <itoa+0x1c>
    4160:	16 f4       	brtc	.+4      	; 0x4166 <itoa+0x3a>
    4162:	5d e2       	ldi	r21, 0x2D	; 45
    4164:	51 93       	st	Z+, r21
    4166:	10 82       	st	Z, r1
    4168:	c9 01       	movw	r24, r18
    416a:	0c 94 0e 21 	jmp	0x421c	; 0x421c <strrev>

0000416e <__mulsi_const_10>:
    416e:	59 2f       	mov	r21, r25
    4170:	48 2f       	mov	r20, r24
    4172:	37 2f       	mov	r19, r23
    4174:	26 2f       	mov	r18, r22
    4176:	66 0f       	add	r22, r22
    4178:	77 1f       	adc	r23, r23
    417a:	88 1f       	adc	r24, r24
    417c:	99 1f       	adc	r25, r25
    417e:	66 0f       	add	r22, r22
    4180:	77 1f       	adc	r23, r23
    4182:	88 1f       	adc	r24, r24
    4184:	99 1f       	adc	r25, r25
    4186:	62 0f       	add	r22, r18
    4188:	73 1f       	adc	r23, r19
    418a:	84 1f       	adc	r24, r20
    418c:	95 1f       	adc	r25, r21
    418e:	66 0f       	add	r22, r22
    4190:	77 1f       	adc	r23, r23
    4192:	88 1f       	adc	r24, r24
    4194:	99 1f       	adc	r25, r25
    4196:	08 95       	ret
    4198:	11 f4       	brne	.+4      	; 0x419e <__mulsi_const_10+0x30>
    419a:	0e f4       	brtc	.+2      	; 0x419e <__mulsi_const_10+0x30>
    419c:	5d c0       	rjmp	.+186    	; 0x4258 <__fp_nan>
    419e:	4e c0       	rjmp	.+156    	; 0x423c <__fp_mpack>

000041a0 <sqrt>:
    41a0:	6d d0       	rcall	.+218    	; 0x427c <__fp_splitA>
    41a2:	d0 f3       	brcs	.-12     	; 0x4198 <__mulsi_const_10+0x2a>
    41a4:	99 23       	and	r25, r25
    41a6:	d9 f3       	breq	.-10     	; 0x419e <__mulsi_const_10+0x30>
    41a8:	ce f3       	brts	.-14     	; 0x419c <__mulsi_const_10+0x2e>
    41aa:	9f 57       	subi	r25, 0x7F	; 127
    41ac:	55 0b       	sbc	r21, r21
    41ae:	87 ff       	sbrs	r24, 7
    41b0:	56 d0       	rcall	.+172    	; 0x425e <__fp_norm2>
    41b2:	00 24       	eor	r0, r0
    41b4:	a0 e6       	ldi	r26, 0x60	; 96
    41b6:	40 ea       	ldi	r20, 0xA0	; 160
    41b8:	90 01       	movw	r18, r0
    41ba:	80 58       	subi	r24, 0x80	; 128
    41bc:	56 95       	lsr	r21
    41be:	97 95       	ror	r25
    41c0:	28 f4       	brcc	.+10     	; 0x41cc <sqrt+0x2c>
    41c2:	80 5c       	subi	r24, 0xC0	; 192
    41c4:	66 0f       	add	r22, r22
    41c6:	77 1f       	adc	r23, r23
    41c8:	88 1f       	adc	r24, r24
    41ca:	20 f0       	brcs	.+8      	; 0x41d4 <sqrt+0x34>
    41cc:	26 17       	cp	r18, r22
    41ce:	37 07       	cpc	r19, r23
    41d0:	48 07       	cpc	r20, r24
    41d2:	30 f4       	brcc	.+12     	; 0x41e0 <sqrt+0x40>
    41d4:	62 1b       	sub	r22, r18
    41d6:	73 0b       	sbc	r23, r19
    41d8:	84 0b       	sbc	r24, r20
    41da:	20 29       	or	r18, r0
    41dc:	31 29       	or	r19, r1
    41de:	4a 2b       	or	r20, r26
    41e0:	a6 95       	lsr	r26
    41e2:	17 94       	ror	r1
    41e4:	07 94       	ror	r0
    41e6:	20 25       	eor	r18, r0
    41e8:	31 25       	eor	r19, r1
    41ea:	4a 27       	eor	r20, r26
    41ec:	58 f7       	brcc	.-42     	; 0x41c4 <sqrt+0x24>
    41ee:	66 0f       	add	r22, r22
    41f0:	77 1f       	adc	r23, r23
    41f2:	88 1f       	adc	r24, r24
    41f4:	20 f0       	brcs	.+8      	; 0x41fe <sqrt+0x5e>
    41f6:	26 17       	cp	r18, r22
    41f8:	37 07       	cpc	r19, r23
    41fa:	48 07       	cpc	r20, r24
    41fc:	30 f4       	brcc	.+12     	; 0x420a <sqrt+0x6a>
    41fe:	62 0b       	sbc	r22, r18
    4200:	73 0b       	sbc	r23, r19
    4202:	84 0b       	sbc	r24, r20
    4204:	20 0d       	add	r18, r0
    4206:	31 1d       	adc	r19, r1
    4208:	41 1d       	adc	r20, r1
    420a:	a0 95       	com	r26
    420c:	81 f7       	brne	.-32     	; 0x41ee <sqrt+0x4e>
    420e:	b9 01       	movw	r22, r18
    4210:	84 2f       	mov	r24, r20
    4212:	91 58       	subi	r25, 0x81	; 129
    4214:	88 0f       	add	r24, r24
    4216:	96 95       	lsr	r25
    4218:	87 95       	ror	r24
    421a:	08 95       	ret

0000421c <strrev>:
    421c:	dc 01       	movw	r26, r24
    421e:	fc 01       	movw	r30, r24
    4220:	67 2f       	mov	r22, r23
    4222:	71 91       	ld	r23, Z+
    4224:	77 23       	and	r23, r23
    4226:	e1 f7       	brne	.-8      	; 0x4220 <strrev+0x4>
    4228:	32 97       	sbiw	r30, 0x02	; 2
    422a:	04 c0       	rjmp	.+8      	; 0x4234 <strrev+0x18>
    422c:	7c 91       	ld	r23, X
    422e:	6d 93       	st	X+, r22
    4230:	70 83       	st	Z, r23
    4232:	62 91       	ld	r22, -Z
    4234:	ae 17       	cp	r26, r30
    4236:	bf 07       	cpc	r27, r31
    4238:	c8 f3       	brcs	.-14     	; 0x422c <strrev+0x10>
    423a:	08 95       	ret

0000423c <__fp_mpack>:
    423c:	9f 3f       	cpi	r25, 0xFF	; 255
    423e:	31 f0       	breq	.+12     	; 0x424c <__fp_mpack_finite+0xc>

00004240 <__fp_mpack_finite>:
    4240:	91 50       	subi	r25, 0x01	; 1
    4242:	20 f4       	brcc	.+8      	; 0x424c <__fp_mpack_finite+0xc>
    4244:	87 95       	ror	r24
    4246:	77 95       	ror	r23
    4248:	67 95       	ror	r22
    424a:	b7 95       	ror	r27
    424c:	88 0f       	add	r24, r24
    424e:	91 1d       	adc	r25, r1
    4250:	96 95       	lsr	r25
    4252:	87 95       	ror	r24
    4254:	97 f9       	bld	r25, 7
    4256:	08 95       	ret

00004258 <__fp_nan>:
    4258:	9f ef       	ldi	r25, 0xFF	; 255
    425a:	80 ec       	ldi	r24, 0xC0	; 192
    425c:	08 95       	ret

0000425e <__fp_norm2>:
    425e:	91 50       	subi	r25, 0x01	; 1
    4260:	50 40       	sbci	r21, 0x00	; 0
    4262:	66 0f       	add	r22, r22
    4264:	77 1f       	adc	r23, r23
    4266:	88 1f       	adc	r24, r24
    4268:	d2 f7       	brpl	.-12     	; 0x425e <__fp_norm2>
    426a:	08 95       	ret

0000426c <__fp_split3>:
    426c:	57 fd       	sbrc	r21, 7
    426e:	90 58       	subi	r25, 0x80	; 128
    4270:	44 0f       	add	r20, r20
    4272:	55 1f       	adc	r21, r21
    4274:	59 f0       	breq	.+22     	; 0x428c <__fp_splitA+0x10>
    4276:	5f 3f       	cpi	r21, 0xFF	; 255
    4278:	71 f0       	breq	.+28     	; 0x4296 <__fp_splitA+0x1a>
    427a:	47 95       	ror	r20

0000427c <__fp_splitA>:
    427c:	88 0f       	add	r24, r24
    427e:	97 fb       	bst	r25, 7
    4280:	99 1f       	adc	r25, r25
    4282:	61 f0       	breq	.+24     	; 0x429c <__fp_splitA+0x20>
    4284:	9f 3f       	cpi	r25, 0xFF	; 255
    4286:	79 f0       	breq	.+30     	; 0x42a6 <__fp_splitA+0x2a>
    4288:	87 95       	ror	r24
    428a:	08 95       	ret
    428c:	12 16       	cp	r1, r18
    428e:	13 06       	cpc	r1, r19
    4290:	14 06       	cpc	r1, r20
    4292:	55 1f       	adc	r21, r21
    4294:	f2 cf       	rjmp	.-28     	; 0x427a <__fp_split3+0xe>
    4296:	46 95       	lsr	r20
    4298:	f1 df       	rcall	.-30     	; 0x427c <__fp_splitA>
    429a:	08 c0       	rjmp	.+16     	; 0x42ac <__fp_splitA+0x30>
    429c:	16 16       	cp	r1, r22
    429e:	17 06       	cpc	r1, r23
    42a0:	18 06       	cpc	r1, r24
    42a2:	99 1f       	adc	r25, r25
    42a4:	f1 cf       	rjmp	.-30     	; 0x4288 <__fp_splitA+0xc>
    42a6:	86 95       	lsr	r24
    42a8:	71 05       	cpc	r23, r1
    42aa:	61 05       	cpc	r22, r1
    42ac:	08 94       	sec
    42ae:	08 95       	ret

000042b0 <_exit>:
    42b0:	f8 94       	cli

000042b2 <__stop_program>:
    42b2:	ff cf       	rjmp	.-2      	; 0x42b2 <__stop_program>
