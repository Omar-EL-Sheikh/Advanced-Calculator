
ADVANCED_CALCULATOR_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000041e2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001e8  00800060  000041e2  00004256  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00003558  00000000  00000000  00004440  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000119a  00000000  00000000  00007998  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  00008b32  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f0  00000000  00000000  00008cd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240c  00000000  00000000  00008ec2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001377  00000000  00000000  0000b2ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d8  00000000  00000000  0000c645  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000d820  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f3  00000000  00000000  0000d9e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009ce  00000000  00000000  0000dcd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000e6a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ee       	ldi	r30, 0xE2	; 226
      68:	f1 e4       	ldi	r31, 0x41	; 65
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 34       	cpi	r26, 0x48	; 72
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 f4 06 	call	0xde8	; 0xde8 <main>
      7a:	0c 94 ef 20 	jmp	0x41de	; 0x41de <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 bb 1f 	jmp	0x3f76	; 0x3f76 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a3 e3       	ldi	r26, 0x33	; 51
     118:	b1 e0       	ldi	r27, 0x01	; 1
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 d7 1f 	jmp	0x3fae	; 0x3fae <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 c7 1f 	jmp	0x3f8e	; 0x3f8e <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 e3 1f 	jmp	0x3fc6	; 0x3fc6 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 c7 1f 	jmp	0x3f8e	; 0x3f8e <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 e3 1f 	jmp	0x3fc6	; 0x3fc6 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 bb 1f 	jmp	0x3f76	; 0x3f76 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	83 e3       	ldi	r24, 0x33	; 51
     486:	91 e0       	ldi	r25, 0x01	; 1
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 d7 1f 	jmp	0x3fae	; 0x3fae <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 c3 1f 	jmp	0x3f86	; 0x3f86 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	63 e3       	ldi	r22, 0x33	; 51
     68c:	71 e0       	ldi	r23, 0x01	; 1
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 df 1f 	jmp	0x3fbe	; 0x3fbe <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 c7 1f 	jmp	0x3f8e	; 0x3f8e <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 9b 06 	call	0xd36	; 0xd36 <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 e3 1f 	jmp	0x3fc6	; 0x3fc6 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 c7 1f 	jmp	0x3f8e	; 0x3f8e <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 9b 06 	call	0xd36	; 0xd36 <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 e3 1f 	jmp	0x3fc6	; 0x3fc6 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 c7 1f 	jmp	0x3f8e	; 0x3f8e <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__ltsf2+0x56>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__ltsf2+0x56>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 9b 06 	call	0xd36	; 0xd36 <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__ltsf2+0x58>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 e3 1f 	jmp	0x3fc6	; 0x3fc6 <__epilogue_restores__+0x18>

0000089a <__floatsisf>:
     89a:	a8 e0       	ldi	r26, 0x08	; 8
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 c4 1f 	jmp	0x3f88	; 0x3f88 <__prologue_saves__+0x12>
     8a6:	9b 01       	movw	r18, r22
     8a8:	ac 01       	movw	r20, r24
     8aa:	83 e0       	ldi	r24, 0x03	; 3
     8ac:	89 83       	std	Y+1, r24	; 0x01
     8ae:	da 01       	movw	r26, r20
     8b0:	c9 01       	movw	r24, r18
     8b2:	88 27       	eor	r24, r24
     8b4:	b7 fd       	sbrc	r27, 7
     8b6:	83 95       	inc	r24
     8b8:	99 27       	eor	r25, r25
     8ba:	aa 27       	eor	r26, r26
     8bc:	bb 27       	eor	r27, r27
     8be:	b8 2e       	mov	r11, r24
     8c0:	21 15       	cp	r18, r1
     8c2:	31 05       	cpc	r19, r1
     8c4:	41 05       	cpc	r20, r1
     8c6:	51 05       	cpc	r21, r1
     8c8:	19 f4       	brne	.+6      	; 0x8d0 <__floatsisf+0x36>
     8ca:	82 e0       	ldi	r24, 0x02	; 2
     8cc:	89 83       	std	Y+1, r24	; 0x01
     8ce:	3a c0       	rjmp	.+116    	; 0x944 <__floatsisf+0xaa>
     8d0:	88 23       	and	r24, r24
     8d2:	a9 f0       	breq	.+42     	; 0x8fe <__floatsisf+0x64>
     8d4:	20 30       	cpi	r18, 0x00	; 0
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	38 07       	cpc	r19, r24
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	48 07       	cpc	r20, r24
     8de:	80 e8       	ldi	r24, 0x80	; 128
     8e0:	58 07       	cpc	r21, r24
     8e2:	29 f4       	brne	.+10     	; 0x8ee <__floatsisf+0x54>
     8e4:	60 e0       	ldi	r22, 0x00	; 0
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	9f ec       	ldi	r25, 0xCF	; 207
     8ec:	30 c0       	rjmp	.+96     	; 0x94e <__floatsisf+0xb4>
     8ee:	ee 24       	eor	r14, r14
     8f0:	ff 24       	eor	r15, r15
     8f2:	87 01       	movw	r16, r14
     8f4:	e2 1a       	sub	r14, r18
     8f6:	f3 0a       	sbc	r15, r19
     8f8:	04 0b       	sbc	r16, r20
     8fa:	15 0b       	sbc	r17, r21
     8fc:	02 c0       	rjmp	.+4      	; 0x902 <__floatsisf+0x68>
     8fe:	79 01       	movw	r14, r18
     900:	8a 01       	movw	r16, r20
     902:	8e e1       	ldi	r24, 0x1E	; 30
     904:	c8 2e       	mov	r12, r24
     906:	d1 2c       	mov	r13, r1
     908:	dc 82       	std	Y+4, r13	; 0x04
     90a:	cb 82       	std	Y+3, r12	; 0x03
     90c:	ed 82       	std	Y+5, r14	; 0x05
     90e:	fe 82       	std	Y+6, r15	; 0x06
     910:	0f 83       	std	Y+7, r16	; 0x07
     912:	18 87       	std	Y+8, r17	; 0x08
     914:	c8 01       	movw	r24, r16
     916:	b7 01       	movw	r22, r14
     918:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__clzsi2>
     91c:	01 97       	sbiw	r24, 0x01	; 1
     91e:	18 16       	cp	r1, r24
     920:	19 06       	cpc	r1, r25
     922:	84 f4       	brge	.+32     	; 0x944 <__floatsisf+0xaa>
     924:	08 2e       	mov	r0, r24
     926:	04 c0       	rjmp	.+8      	; 0x930 <__floatsisf+0x96>
     928:	ee 0c       	add	r14, r14
     92a:	ff 1c       	adc	r15, r15
     92c:	00 1f       	adc	r16, r16
     92e:	11 1f       	adc	r17, r17
     930:	0a 94       	dec	r0
     932:	d2 f7       	brpl	.-12     	; 0x928 <__floatsisf+0x8e>
     934:	ed 82       	std	Y+5, r14	; 0x05
     936:	fe 82       	std	Y+6, r15	; 0x06
     938:	0f 83       	std	Y+7, r16	; 0x07
     93a:	18 87       	std	Y+8, r17	; 0x08
     93c:	c8 1a       	sub	r12, r24
     93e:	d9 0a       	sbc	r13, r25
     940:	dc 82       	std	Y+4, r13	; 0x04
     942:	cb 82       	std	Y+3, r12	; 0x03
     944:	ba 82       	std	Y+2, r11	; 0x02
     946:	ce 01       	movw	r24, r28
     948:	01 96       	adiw	r24, 0x01	; 1
     94a:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     94e:	28 96       	adiw	r28, 0x08	; 8
     950:	e9 e0       	ldi	r30, 0x09	; 9
     952:	0c 94 e0 1f 	jmp	0x3fc0	; 0x3fc0 <__epilogue_restores__+0x12>

00000956 <__fixsfsi>:
     956:	ac e0       	ldi	r26, 0x0C	; 12
     958:	b0 e0       	ldi	r27, 0x00	; 0
     95a:	e1 eb       	ldi	r30, 0xB1	; 177
     95c:	f4 e0       	ldi	r31, 0x04	; 4
     95e:	0c 94 cb 1f 	jmp	0x3f96	; 0x3f96 <__prologue_saves__+0x20>
     962:	69 83       	std	Y+1, r22	; 0x01
     964:	7a 83       	std	Y+2, r23	; 0x02
     966:	8b 83       	std	Y+3, r24	; 0x03
     968:	9c 83       	std	Y+4, r25	; 0x04
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	be 01       	movw	r22, r28
     970:	6b 5f       	subi	r22, 0xFB	; 251
     972:	7f 4f       	sbci	r23, 0xFF	; 255
     974:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     978:	8d 81       	ldd	r24, Y+5	; 0x05
     97a:	82 30       	cpi	r24, 0x02	; 2
     97c:	61 f1       	breq	.+88     	; 0x9d6 <__fixsfsi+0x80>
     97e:	82 30       	cpi	r24, 0x02	; 2
     980:	50 f1       	brcs	.+84     	; 0x9d6 <__fixsfsi+0x80>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	21 f4       	brne	.+8      	; 0x98e <__fixsfsi+0x38>
     986:	8e 81       	ldd	r24, Y+6	; 0x06
     988:	88 23       	and	r24, r24
     98a:	51 f1       	breq	.+84     	; 0x9e0 <__fixsfsi+0x8a>
     98c:	2e c0       	rjmp	.+92     	; 0x9ea <__fixsfsi+0x94>
     98e:	2f 81       	ldd	r18, Y+7	; 0x07
     990:	38 85       	ldd	r19, Y+8	; 0x08
     992:	37 fd       	sbrc	r19, 7
     994:	20 c0       	rjmp	.+64     	; 0x9d6 <__fixsfsi+0x80>
     996:	6e 81       	ldd	r22, Y+6	; 0x06
     998:	2f 31       	cpi	r18, 0x1F	; 31
     99a:	31 05       	cpc	r19, r1
     99c:	1c f0       	brlt	.+6      	; 0x9a4 <__fixsfsi+0x4e>
     99e:	66 23       	and	r22, r22
     9a0:	f9 f0       	breq	.+62     	; 0x9e0 <__fixsfsi+0x8a>
     9a2:	23 c0       	rjmp	.+70     	; 0x9ea <__fixsfsi+0x94>
     9a4:	8e e1       	ldi	r24, 0x1E	; 30
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	82 1b       	sub	r24, r18
     9aa:	93 0b       	sbc	r25, r19
     9ac:	29 85       	ldd	r18, Y+9	; 0x09
     9ae:	3a 85       	ldd	r19, Y+10	; 0x0a
     9b0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9b2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__fixsfsi+0x68>
     9b6:	56 95       	lsr	r21
     9b8:	47 95       	ror	r20
     9ba:	37 95       	ror	r19
     9bc:	27 95       	ror	r18
     9be:	8a 95       	dec	r24
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__fixsfsi+0x60>
     9c2:	66 23       	and	r22, r22
     9c4:	b1 f0       	breq	.+44     	; 0x9f2 <__fixsfsi+0x9c>
     9c6:	50 95       	com	r21
     9c8:	40 95       	com	r20
     9ca:	30 95       	com	r19
     9cc:	21 95       	neg	r18
     9ce:	3f 4f       	sbci	r19, 0xFF	; 255
     9d0:	4f 4f       	sbci	r20, 0xFF	; 255
     9d2:	5f 4f       	sbci	r21, 0xFF	; 255
     9d4:	0e c0       	rjmp	.+28     	; 0x9f2 <__fixsfsi+0x9c>
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	40 e0       	ldi	r20, 0x00	; 0
     9dc:	50 e0       	ldi	r21, 0x00	; 0
     9de:	09 c0       	rjmp	.+18     	; 0x9f2 <__fixsfsi+0x9c>
     9e0:	2f ef       	ldi	r18, 0xFF	; 255
     9e2:	3f ef       	ldi	r19, 0xFF	; 255
     9e4:	4f ef       	ldi	r20, 0xFF	; 255
     9e6:	5f e7       	ldi	r21, 0x7F	; 127
     9e8:	04 c0       	rjmp	.+8      	; 0x9f2 <__fixsfsi+0x9c>
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	40 e0       	ldi	r20, 0x00	; 0
     9f0:	50 e8       	ldi	r21, 0x80	; 128
     9f2:	b9 01       	movw	r22, r18
     9f4:	ca 01       	movw	r24, r20
     9f6:	2c 96       	adiw	r28, 0x0c	; 12
     9f8:	e2 e0       	ldi	r30, 0x02	; 2
     9fa:	0c 94 e7 1f 	jmp	0x3fce	; 0x3fce <__epilogue_restores__+0x20>

000009fe <__clzsi2>:
     9fe:	ef 92       	push	r14
     a00:	ff 92       	push	r15
     a02:	0f 93       	push	r16
     a04:	1f 93       	push	r17
     a06:	7b 01       	movw	r14, r22
     a08:	8c 01       	movw	r16, r24
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	e8 16       	cp	r14, r24
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	f8 06       	cpc	r15, r24
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	08 07       	cpc	r16, r24
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	18 07       	cpc	r17, r24
     a1a:	88 f4       	brcc	.+34     	; 0xa3e <__clzsi2+0x40>
     a1c:	8f ef       	ldi	r24, 0xFF	; 255
     a1e:	e8 16       	cp	r14, r24
     a20:	f1 04       	cpc	r15, r1
     a22:	01 05       	cpc	r16, r1
     a24:	11 05       	cpc	r17, r1
     a26:	31 f0       	breq	.+12     	; 0xa34 <__clzsi2+0x36>
     a28:	28 f0       	brcs	.+10     	; 0xa34 <__clzsi2+0x36>
     a2a:	88 e0       	ldi	r24, 0x08	; 8
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	a0 e0       	ldi	r26, 0x00	; 0
     a30:	b0 e0       	ldi	r27, 0x00	; 0
     a32:	17 c0       	rjmp	.+46     	; 0xa62 <__clzsi2+0x64>
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	a0 e0       	ldi	r26, 0x00	; 0
     a3a:	b0 e0       	ldi	r27, 0x00	; 0
     a3c:	12 c0       	rjmp	.+36     	; 0xa62 <__clzsi2+0x64>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	e8 16       	cp	r14, r24
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	f8 06       	cpc	r15, r24
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	08 07       	cpc	r16, r24
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	18 07       	cpc	r17, r24
     a4e:	28 f0       	brcs	.+10     	; 0xa5a <__clzsi2+0x5c>
     a50:	88 e1       	ldi	r24, 0x18	; 24
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	b0 e0       	ldi	r27, 0x00	; 0
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__clzsi2+0x64>
     a5a:	80 e1       	ldi	r24, 0x10	; 16
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	a0 e0       	ldi	r26, 0x00	; 0
     a60:	b0 e0       	ldi	r27, 0x00	; 0
     a62:	20 e2       	ldi	r18, 0x20	; 32
     a64:	30 e0       	ldi	r19, 0x00	; 0
     a66:	40 e0       	ldi	r20, 0x00	; 0
     a68:	50 e0       	ldi	r21, 0x00	; 0
     a6a:	28 1b       	sub	r18, r24
     a6c:	39 0b       	sbc	r19, r25
     a6e:	4a 0b       	sbc	r20, r26
     a70:	5b 0b       	sbc	r21, r27
     a72:	04 c0       	rjmp	.+8      	; 0xa7c <__clzsi2+0x7e>
     a74:	16 95       	lsr	r17
     a76:	07 95       	ror	r16
     a78:	f7 94       	ror	r15
     a7a:	e7 94       	ror	r14
     a7c:	8a 95       	dec	r24
     a7e:	d2 f7       	brpl	.-12     	; 0xa74 <__clzsi2+0x76>
     a80:	f7 01       	movw	r30, r14
     a82:	e5 5c       	subi	r30, 0xC5	; 197
     a84:	fe 4f       	sbci	r31, 0xFE	; 254
     a86:	80 81       	ld	r24, Z
     a88:	28 1b       	sub	r18, r24
     a8a:	31 09       	sbc	r19, r1
     a8c:	41 09       	sbc	r20, r1
     a8e:	51 09       	sbc	r21, r1
     a90:	c9 01       	movw	r24, r18
     a92:	1f 91       	pop	r17
     a94:	0f 91       	pop	r16
     a96:	ff 90       	pop	r15
     a98:	ef 90       	pop	r14
     a9a:	08 95       	ret

00000a9c <__pack_f>:
     a9c:	df 92       	push	r13
     a9e:	ef 92       	push	r14
     aa0:	ff 92       	push	r15
     aa2:	0f 93       	push	r16
     aa4:	1f 93       	push	r17
     aa6:	fc 01       	movw	r30, r24
     aa8:	e4 80       	ldd	r14, Z+4	; 0x04
     aaa:	f5 80       	ldd	r15, Z+5	; 0x05
     aac:	06 81       	ldd	r16, Z+6	; 0x06
     aae:	17 81       	ldd	r17, Z+7	; 0x07
     ab0:	d1 80       	ldd	r13, Z+1	; 0x01
     ab2:	80 81       	ld	r24, Z
     ab4:	82 30       	cpi	r24, 0x02	; 2
     ab6:	48 f4       	brcc	.+18     	; 0xaca <__pack_f+0x2e>
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	a0 e1       	ldi	r26, 0x10	; 16
     abe:	b0 e0       	ldi	r27, 0x00	; 0
     ac0:	e8 2a       	or	r14, r24
     ac2:	f9 2a       	or	r15, r25
     ac4:	0a 2b       	or	r16, r26
     ac6:	1b 2b       	or	r17, r27
     ac8:	a5 c0       	rjmp	.+330    	; 0xc14 <__pack_f+0x178>
     aca:	84 30       	cpi	r24, 0x04	; 4
     acc:	09 f4       	brne	.+2      	; 0xad0 <__pack_f+0x34>
     ace:	9f c0       	rjmp	.+318    	; 0xc0e <__pack_f+0x172>
     ad0:	82 30       	cpi	r24, 0x02	; 2
     ad2:	21 f4       	brne	.+8      	; 0xadc <__pack_f+0x40>
     ad4:	ee 24       	eor	r14, r14
     ad6:	ff 24       	eor	r15, r15
     ad8:	87 01       	movw	r16, r14
     ada:	05 c0       	rjmp	.+10     	; 0xae6 <__pack_f+0x4a>
     adc:	e1 14       	cp	r14, r1
     ade:	f1 04       	cpc	r15, r1
     ae0:	01 05       	cpc	r16, r1
     ae2:	11 05       	cpc	r17, r1
     ae4:	19 f4       	brne	.+6      	; 0xaec <__pack_f+0x50>
     ae6:	e0 e0       	ldi	r30, 0x00	; 0
     ae8:	f0 e0       	ldi	r31, 0x00	; 0
     aea:	96 c0       	rjmp	.+300    	; 0xc18 <__pack_f+0x17c>
     aec:	62 81       	ldd	r22, Z+2	; 0x02
     aee:	73 81       	ldd	r23, Z+3	; 0x03
     af0:	9f ef       	ldi	r25, 0xFF	; 255
     af2:	62 38       	cpi	r22, 0x82	; 130
     af4:	79 07       	cpc	r23, r25
     af6:	0c f0       	brlt	.+2      	; 0xafa <__pack_f+0x5e>
     af8:	5b c0       	rjmp	.+182    	; 0xbb0 <__pack_f+0x114>
     afa:	22 e8       	ldi	r18, 0x82	; 130
     afc:	3f ef       	ldi	r19, 0xFF	; 255
     afe:	26 1b       	sub	r18, r22
     b00:	37 0b       	sbc	r19, r23
     b02:	2a 31       	cpi	r18, 0x1A	; 26
     b04:	31 05       	cpc	r19, r1
     b06:	2c f0       	brlt	.+10     	; 0xb12 <__pack_f+0x76>
     b08:	20 e0       	ldi	r18, 0x00	; 0
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	2a c0       	rjmp	.+84     	; 0xb66 <__pack_f+0xca>
     b12:	b8 01       	movw	r22, r16
     b14:	a7 01       	movw	r20, r14
     b16:	02 2e       	mov	r0, r18
     b18:	04 c0       	rjmp	.+8      	; 0xb22 <__pack_f+0x86>
     b1a:	76 95       	lsr	r23
     b1c:	67 95       	ror	r22
     b1e:	57 95       	ror	r21
     b20:	47 95       	ror	r20
     b22:	0a 94       	dec	r0
     b24:	d2 f7       	brpl	.-12     	; 0xb1a <__pack_f+0x7e>
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	a0 e0       	ldi	r26, 0x00	; 0
     b2c:	b0 e0       	ldi	r27, 0x00	; 0
     b2e:	04 c0       	rjmp	.+8      	; 0xb38 <__pack_f+0x9c>
     b30:	88 0f       	add	r24, r24
     b32:	99 1f       	adc	r25, r25
     b34:	aa 1f       	adc	r26, r26
     b36:	bb 1f       	adc	r27, r27
     b38:	2a 95       	dec	r18
     b3a:	d2 f7       	brpl	.-12     	; 0xb30 <__pack_f+0x94>
     b3c:	01 97       	sbiw	r24, 0x01	; 1
     b3e:	a1 09       	sbc	r26, r1
     b40:	b1 09       	sbc	r27, r1
     b42:	8e 21       	and	r24, r14
     b44:	9f 21       	and	r25, r15
     b46:	a0 23       	and	r26, r16
     b48:	b1 23       	and	r27, r17
     b4a:	00 97       	sbiw	r24, 0x00	; 0
     b4c:	a1 05       	cpc	r26, r1
     b4e:	b1 05       	cpc	r27, r1
     b50:	21 f0       	breq	.+8      	; 0xb5a <__pack_f+0xbe>
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	9a 01       	movw	r18, r20
     b5c:	ab 01       	movw	r20, r22
     b5e:	28 2b       	or	r18, r24
     b60:	39 2b       	or	r19, r25
     b62:	4a 2b       	or	r20, r26
     b64:	5b 2b       	or	r21, r27
     b66:	da 01       	movw	r26, r20
     b68:	c9 01       	movw	r24, r18
     b6a:	8f 77       	andi	r24, 0x7F	; 127
     b6c:	90 70       	andi	r25, 0x00	; 0
     b6e:	a0 70       	andi	r26, 0x00	; 0
     b70:	b0 70       	andi	r27, 0x00	; 0
     b72:	80 34       	cpi	r24, 0x40	; 64
     b74:	91 05       	cpc	r25, r1
     b76:	a1 05       	cpc	r26, r1
     b78:	b1 05       	cpc	r27, r1
     b7a:	39 f4       	brne	.+14     	; 0xb8a <__pack_f+0xee>
     b7c:	27 ff       	sbrs	r18, 7
     b7e:	09 c0       	rjmp	.+18     	; 0xb92 <__pack_f+0xf6>
     b80:	20 5c       	subi	r18, 0xC0	; 192
     b82:	3f 4f       	sbci	r19, 0xFF	; 255
     b84:	4f 4f       	sbci	r20, 0xFF	; 255
     b86:	5f 4f       	sbci	r21, 0xFF	; 255
     b88:	04 c0       	rjmp	.+8      	; 0xb92 <__pack_f+0xf6>
     b8a:	21 5c       	subi	r18, 0xC1	; 193
     b8c:	3f 4f       	sbci	r19, 0xFF	; 255
     b8e:	4f 4f       	sbci	r20, 0xFF	; 255
     b90:	5f 4f       	sbci	r21, 0xFF	; 255
     b92:	e0 e0       	ldi	r30, 0x00	; 0
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	20 30       	cpi	r18, 0x00	; 0
     b98:	a0 e0       	ldi	r26, 0x00	; 0
     b9a:	3a 07       	cpc	r19, r26
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	4a 07       	cpc	r20, r26
     ba0:	a0 e4       	ldi	r26, 0x40	; 64
     ba2:	5a 07       	cpc	r21, r26
     ba4:	10 f0       	brcs	.+4      	; 0xbaa <__pack_f+0x10e>
     ba6:	e1 e0       	ldi	r30, 0x01	; 1
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	79 01       	movw	r14, r18
     bac:	8a 01       	movw	r16, r20
     bae:	27 c0       	rjmp	.+78     	; 0xbfe <__pack_f+0x162>
     bb0:	60 38       	cpi	r22, 0x80	; 128
     bb2:	71 05       	cpc	r23, r1
     bb4:	64 f5       	brge	.+88     	; 0xc0e <__pack_f+0x172>
     bb6:	fb 01       	movw	r30, r22
     bb8:	e1 58       	subi	r30, 0x81	; 129
     bba:	ff 4f       	sbci	r31, 0xFF	; 255
     bbc:	d8 01       	movw	r26, r16
     bbe:	c7 01       	movw	r24, r14
     bc0:	8f 77       	andi	r24, 0x7F	; 127
     bc2:	90 70       	andi	r25, 0x00	; 0
     bc4:	a0 70       	andi	r26, 0x00	; 0
     bc6:	b0 70       	andi	r27, 0x00	; 0
     bc8:	80 34       	cpi	r24, 0x40	; 64
     bca:	91 05       	cpc	r25, r1
     bcc:	a1 05       	cpc	r26, r1
     bce:	b1 05       	cpc	r27, r1
     bd0:	39 f4       	brne	.+14     	; 0xbe0 <__pack_f+0x144>
     bd2:	e7 fe       	sbrs	r14, 7
     bd4:	0d c0       	rjmp	.+26     	; 0xbf0 <__pack_f+0x154>
     bd6:	80 e4       	ldi	r24, 0x40	; 64
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	a0 e0       	ldi	r26, 0x00	; 0
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	04 c0       	rjmp	.+8      	; 0xbe8 <__pack_f+0x14c>
     be0:	8f e3       	ldi	r24, 0x3F	; 63
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	a0 e0       	ldi	r26, 0x00	; 0
     be6:	b0 e0       	ldi	r27, 0x00	; 0
     be8:	e8 0e       	add	r14, r24
     bea:	f9 1e       	adc	r15, r25
     bec:	0a 1f       	adc	r16, r26
     bee:	1b 1f       	adc	r17, r27
     bf0:	17 ff       	sbrs	r17, 7
     bf2:	05 c0       	rjmp	.+10     	; 0xbfe <__pack_f+0x162>
     bf4:	16 95       	lsr	r17
     bf6:	07 95       	ror	r16
     bf8:	f7 94       	ror	r15
     bfa:	e7 94       	ror	r14
     bfc:	31 96       	adiw	r30, 0x01	; 1
     bfe:	87 e0       	ldi	r24, 0x07	; 7
     c00:	16 95       	lsr	r17
     c02:	07 95       	ror	r16
     c04:	f7 94       	ror	r15
     c06:	e7 94       	ror	r14
     c08:	8a 95       	dec	r24
     c0a:	d1 f7       	brne	.-12     	; 0xc00 <__pack_f+0x164>
     c0c:	05 c0       	rjmp	.+10     	; 0xc18 <__pack_f+0x17c>
     c0e:	ee 24       	eor	r14, r14
     c10:	ff 24       	eor	r15, r15
     c12:	87 01       	movw	r16, r14
     c14:	ef ef       	ldi	r30, 0xFF	; 255
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	6e 2f       	mov	r22, r30
     c1a:	67 95       	ror	r22
     c1c:	66 27       	eor	r22, r22
     c1e:	67 95       	ror	r22
     c20:	90 2f       	mov	r25, r16
     c22:	9f 77       	andi	r25, 0x7F	; 127
     c24:	d7 94       	ror	r13
     c26:	dd 24       	eor	r13, r13
     c28:	d7 94       	ror	r13
     c2a:	8e 2f       	mov	r24, r30
     c2c:	86 95       	lsr	r24
     c2e:	49 2f       	mov	r20, r25
     c30:	46 2b       	or	r20, r22
     c32:	58 2f       	mov	r21, r24
     c34:	5d 29       	or	r21, r13
     c36:	b7 01       	movw	r22, r14
     c38:	ca 01       	movw	r24, r20
     c3a:	1f 91       	pop	r17
     c3c:	0f 91       	pop	r16
     c3e:	ff 90       	pop	r15
     c40:	ef 90       	pop	r14
     c42:	df 90       	pop	r13
     c44:	08 95       	ret

00000c46 <__unpack_f>:
     c46:	fc 01       	movw	r30, r24
     c48:	db 01       	movw	r26, r22
     c4a:	40 81       	ld	r20, Z
     c4c:	51 81       	ldd	r21, Z+1	; 0x01
     c4e:	22 81       	ldd	r18, Z+2	; 0x02
     c50:	62 2f       	mov	r22, r18
     c52:	6f 77       	andi	r22, 0x7F	; 127
     c54:	70 e0       	ldi	r23, 0x00	; 0
     c56:	22 1f       	adc	r18, r18
     c58:	22 27       	eor	r18, r18
     c5a:	22 1f       	adc	r18, r18
     c5c:	93 81       	ldd	r25, Z+3	; 0x03
     c5e:	89 2f       	mov	r24, r25
     c60:	88 0f       	add	r24, r24
     c62:	82 2b       	or	r24, r18
     c64:	28 2f       	mov	r18, r24
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	99 1f       	adc	r25, r25
     c6a:	99 27       	eor	r25, r25
     c6c:	99 1f       	adc	r25, r25
     c6e:	11 96       	adiw	r26, 0x01	; 1
     c70:	9c 93       	st	X, r25
     c72:	11 97       	sbiw	r26, 0x01	; 1
     c74:	21 15       	cp	r18, r1
     c76:	31 05       	cpc	r19, r1
     c78:	a9 f5       	brne	.+106    	; 0xce4 <__unpack_f+0x9e>
     c7a:	41 15       	cp	r20, r1
     c7c:	51 05       	cpc	r21, r1
     c7e:	61 05       	cpc	r22, r1
     c80:	71 05       	cpc	r23, r1
     c82:	11 f4       	brne	.+4      	; 0xc88 <__unpack_f+0x42>
     c84:	82 e0       	ldi	r24, 0x02	; 2
     c86:	37 c0       	rjmp	.+110    	; 0xcf6 <__unpack_f+0xb0>
     c88:	82 e8       	ldi	r24, 0x82	; 130
     c8a:	9f ef       	ldi	r25, 0xFF	; 255
     c8c:	13 96       	adiw	r26, 0x03	; 3
     c8e:	9c 93       	st	X, r25
     c90:	8e 93       	st	-X, r24
     c92:	12 97       	sbiw	r26, 0x02	; 2
     c94:	9a 01       	movw	r18, r20
     c96:	ab 01       	movw	r20, r22
     c98:	67 e0       	ldi	r22, 0x07	; 7
     c9a:	22 0f       	add	r18, r18
     c9c:	33 1f       	adc	r19, r19
     c9e:	44 1f       	adc	r20, r20
     ca0:	55 1f       	adc	r21, r21
     ca2:	6a 95       	dec	r22
     ca4:	d1 f7       	brne	.-12     	; 0xc9a <__unpack_f+0x54>
     ca6:	83 e0       	ldi	r24, 0x03	; 3
     ca8:	8c 93       	st	X, r24
     caa:	0d c0       	rjmp	.+26     	; 0xcc6 <__unpack_f+0x80>
     cac:	22 0f       	add	r18, r18
     cae:	33 1f       	adc	r19, r19
     cb0:	44 1f       	adc	r20, r20
     cb2:	55 1f       	adc	r21, r21
     cb4:	12 96       	adiw	r26, 0x02	; 2
     cb6:	8d 91       	ld	r24, X+
     cb8:	9c 91       	ld	r25, X
     cba:	13 97       	sbiw	r26, 0x03	; 3
     cbc:	01 97       	sbiw	r24, 0x01	; 1
     cbe:	13 96       	adiw	r26, 0x03	; 3
     cc0:	9c 93       	st	X, r25
     cc2:	8e 93       	st	-X, r24
     cc4:	12 97       	sbiw	r26, 0x02	; 2
     cc6:	20 30       	cpi	r18, 0x00	; 0
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	38 07       	cpc	r19, r24
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	48 07       	cpc	r20, r24
     cd0:	80 e4       	ldi	r24, 0x40	; 64
     cd2:	58 07       	cpc	r21, r24
     cd4:	58 f3       	brcs	.-42     	; 0xcac <__unpack_f+0x66>
     cd6:	14 96       	adiw	r26, 0x04	; 4
     cd8:	2d 93       	st	X+, r18
     cda:	3d 93       	st	X+, r19
     cdc:	4d 93       	st	X+, r20
     cde:	5c 93       	st	X, r21
     ce0:	17 97       	sbiw	r26, 0x07	; 7
     ce2:	08 95       	ret
     ce4:	2f 3f       	cpi	r18, 0xFF	; 255
     ce6:	31 05       	cpc	r19, r1
     ce8:	79 f4       	brne	.+30     	; 0xd08 <__unpack_f+0xc2>
     cea:	41 15       	cp	r20, r1
     cec:	51 05       	cpc	r21, r1
     cee:	61 05       	cpc	r22, r1
     cf0:	71 05       	cpc	r23, r1
     cf2:	19 f4       	brne	.+6      	; 0xcfa <__unpack_f+0xb4>
     cf4:	84 e0       	ldi	r24, 0x04	; 4
     cf6:	8c 93       	st	X, r24
     cf8:	08 95       	ret
     cfa:	64 ff       	sbrs	r22, 4
     cfc:	03 c0       	rjmp	.+6      	; 0xd04 <__unpack_f+0xbe>
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	8c 93       	st	X, r24
     d02:	12 c0       	rjmp	.+36     	; 0xd28 <__unpack_f+0xe2>
     d04:	1c 92       	st	X, r1
     d06:	10 c0       	rjmp	.+32     	; 0xd28 <__unpack_f+0xe2>
     d08:	2f 57       	subi	r18, 0x7F	; 127
     d0a:	30 40       	sbci	r19, 0x00	; 0
     d0c:	13 96       	adiw	r26, 0x03	; 3
     d0e:	3c 93       	st	X, r19
     d10:	2e 93       	st	-X, r18
     d12:	12 97       	sbiw	r26, 0x02	; 2
     d14:	83 e0       	ldi	r24, 0x03	; 3
     d16:	8c 93       	st	X, r24
     d18:	87 e0       	ldi	r24, 0x07	; 7
     d1a:	44 0f       	add	r20, r20
     d1c:	55 1f       	adc	r21, r21
     d1e:	66 1f       	adc	r22, r22
     d20:	77 1f       	adc	r23, r23
     d22:	8a 95       	dec	r24
     d24:	d1 f7       	brne	.-12     	; 0xd1a <__unpack_f+0xd4>
     d26:	70 64       	ori	r23, 0x40	; 64
     d28:	14 96       	adiw	r26, 0x04	; 4
     d2a:	4d 93       	st	X+, r20
     d2c:	5d 93       	st	X+, r21
     d2e:	6d 93       	st	X+, r22
     d30:	7c 93       	st	X, r23
     d32:	17 97       	sbiw	r26, 0x07	; 7
     d34:	08 95       	ret

00000d36 <__fpcmp_parts_f>:
     d36:	1f 93       	push	r17
     d38:	dc 01       	movw	r26, r24
     d3a:	fb 01       	movw	r30, r22
     d3c:	9c 91       	ld	r25, X
     d3e:	92 30       	cpi	r25, 0x02	; 2
     d40:	08 f4       	brcc	.+2      	; 0xd44 <__fpcmp_parts_f+0xe>
     d42:	47 c0       	rjmp	.+142    	; 0xdd2 <__fpcmp_parts_f+0x9c>
     d44:	80 81       	ld	r24, Z
     d46:	82 30       	cpi	r24, 0x02	; 2
     d48:	08 f4       	brcc	.+2      	; 0xd4c <__fpcmp_parts_f+0x16>
     d4a:	43 c0       	rjmp	.+134    	; 0xdd2 <__fpcmp_parts_f+0x9c>
     d4c:	94 30       	cpi	r25, 0x04	; 4
     d4e:	51 f4       	brne	.+20     	; 0xd64 <__fpcmp_parts_f+0x2e>
     d50:	11 96       	adiw	r26, 0x01	; 1
     d52:	1c 91       	ld	r17, X
     d54:	84 30       	cpi	r24, 0x04	; 4
     d56:	99 f5       	brne	.+102    	; 0xdbe <__fpcmp_parts_f+0x88>
     d58:	81 81       	ldd	r24, Z+1	; 0x01
     d5a:	68 2f       	mov	r22, r24
     d5c:	70 e0       	ldi	r23, 0x00	; 0
     d5e:	61 1b       	sub	r22, r17
     d60:	71 09       	sbc	r23, r1
     d62:	3f c0       	rjmp	.+126    	; 0xde2 <__fpcmp_parts_f+0xac>
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	21 f0       	breq	.+8      	; 0xd70 <__fpcmp_parts_f+0x3a>
     d68:	92 30       	cpi	r25, 0x02	; 2
     d6a:	31 f4       	brne	.+12     	; 0xd78 <__fpcmp_parts_f+0x42>
     d6c:	82 30       	cpi	r24, 0x02	; 2
     d6e:	b9 f1       	breq	.+110    	; 0xdde <__fpcmp_parts_f+0xa8>
     d70:	81 81       	ldd	r24, Z+1	; 0x01
     d72:	88 23       	and	r24, r24
     d74:	89 f1       	breq	.+98     	; 0xdd8 <__fpcmp_parts_f+0xa2>
     d76:	2d c0       	rjmp	.+90     	; 0xdd2 <__fpcmp_parts_f+0x9c>
     d78:	11 96       	adiw	r26, 0x01	; 1
     d7a:	1c 91       	ld	r17, X
     d7c:	11 97       	sbiw	r26, 0x01	; 1
     d7e:	82 30       	cpi	r24, 0x02	; 2
     d80:	f1 f0       	breq	.+60     	; 0xdbe <__fpcmp_parts_f+0x88>
     d82:	81 81       	ldd	r24, Z+1	; 0x01
     d84:	18 17       	cp	r17, r24
     d86:	d9 f4       	brne	.+54     	; 0xdbe <__fpcmp_parts_f+0x88>
     d88:	12 96       	adiw	r26, 0x02	; 2
     d8a:	2d 91       	ld	r18, X+
     d8c:	3c 91       	ld	r19, X
     d8e:	13 97       	sbiw	r26, 0x03	; 3
     d90:	82 81       	ldd	r24, Z+2	; 0x02
     d92:	93 81       	ldd	r25, Z+3	; 0x03
     d94:	82 17       	cp	r24, r18
     d96:	93 07       	cpc	r25, r19
     d98:	94 f0       	brlt	.+36     	; 0xdbe <__fpcmp_parts_f+0x88>
     d9a:	28 17       	cp	r18, r24
     d9c:	39 07       	cpc	r19, r25
     d9e:	bc f0       	brlt	.+46     	; 0xdce <__fpcmp_parts_f+0x98>
     da0:	14 96       	adiw	r26, 0x04	; 4
     da2:	8d 91       	ld	r24, X+
     da4:	9d 91       	ld	r25, X+
     da6:	0d 90       	ld	r0, X+
     da8:	bc 91       	ld	r27, X
     daa:	a0 2d       	mov	r26, r0
     dac:	24 81       	ldd	r18, Z+4	; 0x04
     dae:	35 81       	ldd	r19, Z+5	; 0x05
     db0:	46 81       	ldd	r20, Z+6	; 0x06
     db2:	57 81       	ldd	r21, Z+7	; 0x07
     db4:	28 17       	cp	r18, r24
     db6:	39 07       	cpc	r19, r25
     db8:	4a 07       	cpc	r20, r26
     dba:	5b 07       	cpc	r21, r27
     dbc:	18 f4       	brcc	.+6      	; 0xdc4 <__fpcmp_parts_f+0x8e>
     dbe:	11 23       	and	r17, r17
     dc0:	41 f0       	breq	.+16     	; 0xdd2 <__fpcmp_parts_f+0x9c>
     dc2:	0a c0       	rjmp	.+20     	; 0xdd8 <__fpcmp_parts_f+0xa2>
     dc4:	82 17       	cp	r24, r18
     dc6:	93 07       	cpc	r25, r19
     dc8:	a4 07       	cpc	r26, r20
     dca:	b5 07       	cpc	r27, r21
     dcc:	40 f4       	brcc	.+16     	; 0xdde <__fpcmp_parts_f+0xa8>
     dce:	11 23       	and	r17, r17
     dd0:	19 f0       	breq	.+6      	; 0xdd8 <__fpcmp_parts_f+0xa2>
     dd2:	61 e0       	ldi	r22, 0x01	; 1
     dd4:	70 e0       	ldi	r23, 0x00	; 0
     dd6:	05 c0       	rjmp	.+10     	; 0xde2 <__fpcmp_parts_f+0xac>
     dd8:	6f ef       	ldi	r22, 0xFF	; 255
     dda:	7f ef       	ldi	r23, 0xFF	; 255
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <__fpcmp_parts_f+0xac>
     dde:	60 e0       	ldi	r22, 0x00	; 0
     de0:	70 e0       	ldi	r23, 0x00	; 0
     de2:	cb 01       	movw	r24, r22
     de4:	1f 91       	pop	r17
     de6:	08 95       	ret

00000de8 <main>:
 * Description:
 * Function to solve 3 Equations in 3 Unknowns and display Results
 */
void threeInThreeEquation(void);

int main (void){
     de8:	df 93       	push	r29
     dea:	cf 93       	push	r28
     dec:	0f 92       	push	r0
     dee:	cd b7       	in	r28, 0x3d	; 61
     df0:	de b7       	in	r29, 0x3e	; 62

	Calculator_Mode mode;

	/* LCD Driver Initialization */
	LCD_init();
     df2:	0e 94 89 1a 	call	0x3512	; 0x3512 <LCD_init>

	while(1){
		/* Getting the desired mode from user */
		mode = getMode();
     df6:	0e 94 02 07 	call	0xe04	; 0xe04 <getMode>
     dfa:	89 83       	std	Y+1, r24	; 0x01

		/**LCD_clearScreen();
		LCD_intgerToString(mode);
		_delay_ms(1000);*/

		operateMode(mode);
     dfc:	89 81       	ldd	r24, Y+1	; 0x01
     dfe:	0e 94 33 07 	call	0xe66	; 0xe66 <operateMode>
     e02:	f9 cf       	rjmp	.-14     	; 0xdf6 <main+0xe>

00000e04 <getMode>:
	}
}


Calculator_Mode getMode(void){
     e04:	df 93       	push	r29
     e06:	cf 93       	push	r28
     e08:	0f 92       	push	r0
     e0a:	cd b7       	in	r28, 0x3d	; 61
     e0c:	de b7       	in	r29, 0x3e	; 62
	uint8 desiredMode;

	LCD_clearScreen();
     e0e:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <LCD_clearScreen>
	LCD_displayString("Enter Mode !");
     e12:	80 e6       	ldi	r24, 0x60	; 96
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <LCD_displayString>
	LCD_moveCursor(1, 0);
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	60 e0       	ldi	r22, 0x00	; 0
     e1e:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <LCD_moveCursor>
	LCD_displayString("1:NORM  2:CMPLX");
     e22:	8d e6       	ldi	r24, 0x6D	; 109
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <LCD_displayString>
	LCD_moveCursor(2, 0);
     e2a:	82 e0       	ldi	r24, 0x02	; 2
     e2c:	60 e0       	ldi	r22, 0x00	; 0
     e2e:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <LCD_moveCursor>
	LCD_displayString("3:EQNS  4:MTRX");
     e32:	8d e7       	ldi	r24, 0x7D	; 125
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <LCD_displayString>
	LCD_moveCursor(3, 0);
     e3a:	83 e0       	ldi	r24, 0x03	; 3
     e3c:	60 e0       	ldi	r22, 0x00	; 0
     e3e:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <LCD_moveCursor>
	LCD_displayString("5:VECT  6:TABLE");
     e42:	8c e8       	ldi	r24, 0x8C	; 140
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <LCD_displayString>
	do {
		desiredMode = KEYPAD_getPressedKey();
     e4a:	0e 94 74 19 	call	0x32e8	; 0x32e8 <KEYPAD_getPressedKey>
     e4e:	89 83       	std	Y+1, r24	; 0x01
	}
	while(desiredMode > 6 || desiredMode < 1);
     e50:	89 81       	ldd	r24, Y+1	; 0x01
     e52:	87 30       	cpi	r24, 0x07	; 7
     e54:	d0 f7       	brcc	.-12     	; 0xe4a <getMode+0x46>
     e56:	89 81       	ldd	r24, Y+1	; 0x01
     e58:	88 23       	and	r24, r24
     e5a:	b9 f3       	breq	.-18     	; 0xe4a <getMode+0x46>

	return desiredMode;
     e5c:	89 81       	ldd	r24, Y+1	; 0x01
}
     e5e:	0f 90       	pop	r0
     e60:	cf 91       	pop	r28
     e62:	df 91       	pop	r29
     e64:	08 95       	ret

00000e66 <operateMode>:

void operateMode(Calculator_Mode a_mode){
     e66:	df 93       	push	r29
     e68:	cf 93       	push	r28
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
     e6e:	62 97       	sbiw	r28, 0x12	; 18
     e70:	0f b6       	in	r0, 0x3f	; 63
     e72:	f8 94       	cli
     e74:	de bf       	out	0x3e, r29	; 62
     e76:	0f be       	out	0x3f, r0	; 63
     e78:	cd bf       	out	0x3d, r28	; 61
     e7a:	8d 87       	std	Y+13, r24	; 0x0d
	/* Array of 6 pointers to functions to call the required mode */
	void (*ptr_calculatorMode[6])(void) = {normalMode, complexMode, equationMode, matrixMode, vectorMode, tableMode};
     e7c:	ce 01       	movw	r24, r28
     e7e:	01 96       	adiw	r24, 0x01	; 1
     e80:	9f 87       	std	Y+15, r25	; 0x0f
     e82:	8e 87       	std	Y+14, r24	; 0x0e
     e84:	eb e3       	ldi	r30, 0x3B	; 59
     e86:	f2 e0       	ldi	r31, 0x02	; 2
     e88:	f9 8b       	std	Y+17, r31	; 0x11
     e8a:	e8 8b       	std	Y+16, r30	; 0x10
     e8c:	fc e0       	ldi	r31, 0x0C	; 12
     e8e:	fa 8b       	std	Y+18, r31	; 0x12
     e90:	e8 89       	ldd	r30, Y+16	; 0x10
     e92:	f9 89       	ldd	r31, Y+17	; 0x11
     e94:	00 80       	ld	r0, Z
     e96:	88 89       	ldd	r24, Y+16	; 0x10
     e98:	99 89       	ldd	r25, Y+17	; 0x11
     e9a:	01 96       	adiw	r24, 0x01	; 1
     e9c:	99 8b       	std	Y+17, r25	; 0x11
     e9e:	88 8b       	std	Y+16, r24	; 0x10
     ea0:	ee 85       	ldd	r30, Y+14	; 0x0e
     ea2:	ff 85       	ldd	r31, Y+15	; 0x0f
     ea4:	00 82       	st	Z, r0
     ea6:	8e 85       	ldd	r24, Y+14	; 0x0e
     ea8:	9f 85       	ldd	r25, Y+15	; 0x0f
     eaa:	01 96       	adiw	r24, 0x01	; 1
     eac:	9f 87       	std	Y+15, r25	; 0x0f
     eae:	8e 87       	std	Y+14, r24	; 0x0e
     eb0:	9a 89       	ldd	r25, Y+18	; 0x12
     eb2:	91 50       	subi	r25, 0x01	; 1
     eb4:	9a 8b       	std	Y+18, r25	; 0x12
     eb6:	ea 89       	ldd	r30, Y+18	; 0x12
     eb8:	ee 23       	and	r30, r30
     eba:	51 f7       	brne	.-44     	; 0xe90 <operateMode+0x2a>

	ptr_calculatorMode[a_mode-1]();
     ebc:	8d 85       	ldd	r24, Y+13	; 0x0d
     ebe:	88 2f       	mov	r24, r24
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	01 97       	sbiw	r24, 0x01	; 1
     ec4:	9c 01       	movw	r18, r24
     ec6:	22 0f       	add	r18, r18
     ec8:	33 1f       	adc	r19, r19
     eca:	ce 01       	movw	r24, r28
     ecc:	01 96       	adiw	r24, 0x01	; 1
     ece:	fc 01       	movw	r30, r24
     ed0:	e2 0f       	add	r30, r18
     ed2:	f3 1f       	adc	r31, r19
     ed4:	01 90       	ld	r0, Z+
     ed6:	f0 81       	ld	r31, Z
     ed8:	e0 2d       	mov	r30, r0
     eda:	09 95       	icall
}
     edc:	62 96       	adiw	r28, 0x12	; 18
     ede:	0f b6       	in	r0, 0x3f	; 63
     ee0:	f8 94       	cli
     ee2:	de bf       	out	0x3e, r29	; 62
     ee4:	0f be       	out	0x3f, r0	; 63
     ee6:	cd bf       	out	0x3d, r28	; 61
     ee8:	cf 91       	pop	r28
     eea:	df 91       	pop	r29
     eec:	08 95       	ret

00000eee <normalMode>:

void normalMode(void){
     eee:	0f 93       	push	r16
     ef0:	1f 93       	push	r17
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	cd b7       	in	r28, 0x3d	; 61
     ef8:	de b7       	in	r29, 0x3e	; 62
     efa:	cc 58       	subi	r28, 0x8C	; 140
     efc:	d0 40       	sbci	r29, 0x00	; 0
     efe:	0f b6       	in	r0, 0x3f	; 63
     f00:	f8 94       	cli
     f02:	de bf       	out	0x3e, r29	; 62
     f04:	0f be       	out	0x3f, r0	; 63
     f06:	cd bf       	out	0x3d, r28	; 61
	uint8 key, operaterCounter = 0, operandCounter = 0, numCounter = 0;
     f08:	1d 8e       	std	Y+29, r1	; 0x1d
     f0a:	1c 8e       	std	Y+28, r1	; 0x1c
     f0c:	1b 8e       	std	Y+27, r1	; 0x1b
	Key_Type type;
	char num[10] = {'\0'};
     f0e:	8a e0       	ldi	r24, 0x0A	; 10
     f10:	fe 01       	movw	r30, r28
     f12:	7f 96       	adiw	r30, 0x1f	; 31
     f14:	df 01       	movw	r26, r30
     f16:	98 2f       	mov	r25, r24
     f18:	1d 92       	st	X+, r1
     f1a:	9a 95       	dec	r25
     f1c:	e9 f7       	brne	.-6      	; 0xf18 <normalMode+0x2a>
	long double operands[20];
	uint8 operators[20];
	long double totRes = 0;
     f1e:	80 e0       	ldi	r24, 0x00	; 0
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	a0 e0       	ldi	r26, 0x00	; 0
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	8e 8b       	std	Y+22, r24	; 0x16
     f28:	9f 8b       	std	Y+23, r25	; 0x17
     f2a:	a8 8f       	std	Y+24, r26	; 0x18
     f2c:	b9 8f       	std	Y+25, r27	; 0x19
	long double mulDivRes = 1;
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	a0 e8       	ldi	r26, 0x80	; 128
     f34:	bf e3       	ldi	r27, 0x3F	; 63
     f36:	8a 8b       	std	Y+18, r24	; 0x12
     f38:	9b 8b       	std	Y+19, r25	; 0x13
     f3a:	ac 8b       	std	Y+20, r26	; 0x14
     f3c:	bd 8b       	std	Y+21, r27	; 0x15
	operands[0] = '+';
     f3e:	80 e0       	ldi	r24, 0x00	; 0
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	ac e2       	ldi	r26, 0x2C	; 44
     f44:	b2 e4       	ldi	r27, 0x42	; 66
     f46:	89 a7       	std	Y+41, r24	; 0x29
     f48:	9a a7       	std	Y+42, r25	; 0x2a
     f4a:	ab a7       	std	Y+43, r26	; 0x2b
     f4c:	bc a7       	std	Y+44, r27	; 0x2c
	uint8 prev = '+';
     f4e:	8b e2       	ldi	r24, 0x2B	; 43
     f50:	89 8b       	std	Y+17, r24	; 0x11
	uint8 counter = 0;
     f52:	18 8a       	std	Y+16, r1	; 0x10

	LCD_clearScreen();
     f54:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <LCD_clearScreen>
	LCD_displayString("   Normal Mode");
     f58:	8c e9       	ldi	r24, 0x9C	; 156
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <LCD_displayString>
	LCD_moveCursor(1,0);
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	60 e0       	ldi	r22, 0x00	; 0
     f64:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <LCD_moveCursor>


	do {
		key = KEYPAD_getPressedKey();
     f68:	0e 94 74 19 	call	0x32e8	; 0x32e8 <KEYPAD_getPressedKey>
     f6c:	8e 8f       	std	Y+30, r24	; 0x1e
		type = getKeyType(key);
     f6e:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f70:	0e 94 87 0c 	call	0x190e	; 0x190e <getKeyType>
     f74:	8a 8f       	std	Y+26, r24	; 0x1a

		if (counter==16){
     f76:	88 89       	ldd	r24, Y+16	; 0x10
     f78:	80 31       	cpi	r24, 0x10	; 16
     f7a:	21 f4       	brne	.+8      	; 0xf84 <normalMode+0x96>
			LCD_moveCursor(2,0);
     f7c:	82 e0       	ldi	r24, 0x02	; 2
     f7e:	60 e0       	ldi	r22, 0x00	; 0
     f80:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <LCD_moveCursor>
		}
		if (key == ON_KEY){
     f84:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f86:	8d 30       	cpi	r24, 0x0D	; 13
     f88:	09 f4       	brne	.+2      	; 0xf8c <normalMode+0x9e>
     f8a:	af c1       	rjmp	.+862    	; 0x12ea <normalMode+0x3fc>
			return;
		}

		if (type == NUMBER_KEY){
     f8c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     f8e:	88 23       	and	r24, r24
     f90:	a1 f4       	brne	.+40     	; 0xfba <normalMode+0xcc>
			LCD_displayCharacter(key+48);
     f92:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f94:	80 5d       	subi	r24, 0xD0	; 208
     f96:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <LCD_displayCharacter>
			num[numCounter++] = key + 48;
     f9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f9c:	28 2f       	mov	r18, r24
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fa2:	48 2f       	mov	r20, r24
     fa4:	40 5d       	subi	r20, 0xD0	; 208
     fa6:	ce 01       	movw	r24, r28
     fa8:	4f 96       	adiw	r24, 0x1f	; 31
     faa:	fc 01       	movw	r30, r24
     fac:	e2 0f       	add	r30, r18
     fae:	f3 1f       	adc	r31, r19
     fb0:	40 83       	st	Z, r20
     fb2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fb4:	8f 5f       	subi	r24, 0xFF	; 255
     fb6:	8b 8f       	std	Y+27, r24	; 0x1b
     fb8:	6b c0       	rjmp	.+214    	; 0x1090 <normalMode+0x1a2>
		}

		else {
			num[numCounter] = '\0';
     fba:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fbc:	28 2f       	mov	r18, r24
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	ce 01       	movw	r24, r28
     fc2:	4f 96       	adiw	r24, 0x1f	; 31
     fc4:	fc 01       	movw	r30, r24
     fc6:	e2 0f       	add	r30, r18
     fc8:	f3 1f       	adc	r31, r19
     fca:	10 82       	st	Z, r1
			numCounter = 0;
     fcc:	1b 8e       	std	Y+27, r1	; 0x1b
			operands[operandCounter] = atol(num);
     fce:	8c 8d       	ldd	r24, Y+28	; 0x1c
     fd0:	08 2f       	mov	r16, r24
     fd2:	10 e0       	ldi	r17, 0x00	; 0
     fd4:	ce 01       	movw	r24, r28
     fd6:	4f 96       	adiw	r24, 0x1f	; 31
     fd8:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <atol>
     fdc:	dc 01       	movw	r26, r24
     fde:	cb 01       	movw	r24, r22
     fe0:	bc 01       	movw	r22, r24
     fe2:	cd 01       	movw	r24, r26
     fe4:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
     fe8:	ab 01       	movw	r20, r22
     fea:	bc 01       	movw	r22, r24
     fec:	98 01       	movw	r18, r16
     fee:	22 0f       	add	r18, r18
     ff0:	33 1f       	adc	r19, r19
     ff2:	22 0f       	add	r18, r18
     ff4:	33 1f       	adc	r19, r19
     ff6:	ce 01       	movw	r24, r28
     ff8:	01 96       	adiw	r24, 0x01	; 1
     ffa:	82 0f       	add	r24, r18
     ffc:	93 1f       	adc	r25, r19
     ffe:	fc 01       	movw	r30, r24
    1000:	b8 96       	adiw	r30, 0x28	; 40
    1002:	40 83       	st	Z, r20
    1004:	51 83       	std	Z+1, r21	; 0x01
    1006:	62 83       	std	Z+2, r22	; 0x02
    1008:	73 83       	std	Z+3, r23	; 0x03
			if (prev == 45){
    100a:	89 89       	ldd	r24, Y+17	; 0x11
    100c:	8d 32       	cpi	r24, 0x2D	; 45
    100e:	39 f5       	brne	.+78     	; 0x105e <normalMode+0x170>
				operands[operandCounter] *= -1;
    1010:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1012:	08 2f       	mov	r16, r24
    1014:	10 e0       	ldi	r17, 0x00	; 0
    1016:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1018:	88 2f       	mov	r24, r24
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	9c 01       	movw	r18, r24
    101e:	22 0f       	add	r18, r18
    1020:	33 1f       	adc	r19, r19
    1022:	22 0f       	add	r18, r18
    1024:	33 1f       	adc	r19, r19
    1026:	ce 01       	movw	r24, r28
    1028:	01 96       	adiw	r24, 0x01	; 1
    102a:	82 0f       	add	r24, r18
    102c:	93 1f       	adc	r25, r19
    102e:	fc 01       	movw	r30, r24
    1030:	b8 96       	adiw	r30, 0x28	; 40
    1032:	80 81       	ld	r24, Z
    1034:	91 81       	ldd	r25, Z+1	; 0x01
    1036:	a2 81       	ldd	r26, Z+2	; 0x02
    1038:	b3 81       	ldd	r27, Z+3	; 0x03
    103a:	ac 01       	movw	r20, r24
    103c:	bd 01       	movw	r22, r26
    103e:	70 58       	subi	r23, 0x80	; 128
    1040:	98 01       	movw	r18, r16
    1042:	22 0f       	add	r18, r18
    1044:	33 1f       	adc	r19, r19
    1046:	22 0f       	add	r18, r18
    1048:	33 1f       	adc	r19, r19
    104a:	ce 01       	movw	r24, r28
    104c:	01 96       	adiw	r24, 0x01	; 1
    104e:	82 0f       	add	r24, r18
    1050:	93 1f       	adc	r25, r19
    1052:	fc 01       	movw	r30, r24
    1054:	b8 96       	adiw	r30, 0x28	; 40
    1056:	40 83       	st	Z, r20
    1058:	51 83       	std	Z+1, r21	; 0x01
    105a:	62 83       	std	Z+2, r22	; 0x02
    105c:	73 83       	std	Z+3, r23	; 0x03
			}
			operandCounter++;
    105e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1060:	8f 5f       	subi	r24, 0xFF	; 255
    1062:	8c 8f       	std	Y+28, r24	; 0x1c
			prev = key;
    1064:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1066:	89 8b       	std	Y+17, r24	; 0x11

			if (key != '='){
    1068:	8e 8d       	ldd	r24, Y+30	; 0x1e
    106a:	8d 33       	cpi	r24, 0x3D	; 61
    106c:	89 f0       	breq	.+34     	; 0x1090 <normalMode+0x1a2>
				operators [operaterCounter++] = key;
    106e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	ce 01       	movw	r24, r28
    1076:	87 58       	subi	r24, 0x87	; 135
    1078:	9f 4f       	sbci	r25, 0xFF	; 255
    107a:	fc 01       	movw	r30, r24
    107c:	e2 0f       	add	r30, r18
    107e:	f3 1f       	adc	r31, r19
    1080:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1082:	80 83       	st	Z, r24
    1084:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1086:	8f 5f       	subi	r24, 0xFF	; 255
    1088:	8d 8f       	std	Y+29, r24	; 0x1d
				LCD_displayCharacter(key);
    108a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    108c:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <LCD_displayCharacter>
    1090:	80 e0       	ldi	r24, 0x00	; 0
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	aa ef       	ldi	r26, 0xFA	; 250
    1096:	b3 e4       	ldi	r27, 0x43	; 67
    1098:	8b 87       	std	Y+11, r24	; 0x0b
    109a:	9c 87       	std	Y+12, r25	; 0x0c
    109c:	ad 87       	std	Y+13, r26	; 0x0d
    109e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    10a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    10a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    10a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    10a8:	20 e0       	ldi	r18, 0x00	; 0
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	4a e7       	ldi	r20, 0x7A	; 122
    10ae:	53 e4       	ldi	r21, 0x43	; 67
    10b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10b4:	dc 01       	movw	r26, r24
    10b6:	cb 01       	movw	r24, r22
    10b8:	8f 83       	std	Y+7, r24	; 0x07
    10ba:	98 87       	std	Y+8, r25	; 0x08
    10bc:	a9 87       	std	Y+9, r26	; 0x09
    10be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10c0:	6f 81       	ldd	r22, Y+7	; 0x07
    10c2:	78 85       	ldd	r23, Y+8	; 0x08
    10c4:	89 85       	ldd	r24, Y+9	; 0x09
    10c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    10c8:	20 e0       	ldi	r18, 0x00	; 0
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	40 e8       	ldi	r20, 0x80	; 128
    10ce:	5f e3       	ldi	r21, 0x3F	; 63
    10d0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    10d4:	88 23       	and	r24, r24
    10d6:	2c f4       	brge	.+10     	; 0x10e2 <normalMode+0x1f4>
		__ticks = 1;
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	9e 83       	std	Y+6, r25	; 0x06
    10de:	8d 83       	std	Y+5, r24	; 0x05
    10e0:	3f c0       	rjmp	.+126    	; 0x1160 <normalMode+0x272>
	else if (__tmp > 65535)
    10e2:	6f 81       	ldd	r22, Y+7	; 0x07
    10e4:	78 85       	ldd	r23, Y+8	; 0x08
    10e6:	89 85       	ldd	r24, Y+9	; 0x09
    10e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ea:	20 e0       	ldi	r18, 0x00	; 0
    10ec:	3f ef       	ldi	r19, 0xFF	; 255
    10ee:	4f e7       	ldi	r20, 0x7F	; 127
    10f0:	57 e4       	ldi	r21, 0x47	; 71
    10f2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    10f6:	18 16       	cp	r1, r24
    10f8:	4c f5       	brge	.+82     	; 0x114c <normalMode+0x25e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    10fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    10fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1100:	9e 85       	ldd	r25, Y+14	; 0x0e
    1102:	20 e0       	ldi	r18, 0x00	; 0
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	40 e2       	ldi	r20, 0x20	; 32
    1108:	51 e4       	ldi	r21, 0x41	; 65
    110a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    110e:	dc 01       	movw	r26, r24
    1110:	cb 01       	movw	r24, r22
    1112:	bc 01       	movw	r22, r24
    1114:	cd 01       	movw	r24, r26
    1116:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    111a:	dc 01       	movw	r26, r24
    111c:	cb 01       	movw	r24, r22
    111e:	9e 83       	std	Y+6, r25	; 0x06
    1120:	8d 83       	std	Y+5, r24	; 0x05
    1122:	0f c0       	rjmp	.+30     	; 0x1142 <normalMode+0x254>
    1124:	89 e1       	ldi	r24, 0x19	; 25
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	9c 83       	std	Y+4, r25	; 0x04
    112a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    112c:	8b 81       	ldd	r24, Y+3	; 0x03
    112e:	9c 81       	ldd	r25, Y+4	; 0x04
    1130:	01 97       	sbiw	r24, 0x01	; 1
    1132:	f1 f7       	brne	.-4      	; 0x1130 <normalMode+0x242>
    1134:	9c 83       	std	Y+4, r25	; 0x04
    1136:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1138:	8d 81       	ldd	r24, Y+5	; 0x05
    113a:	9e 81       	ldd	r25, Y+6	; 0x06
    113c:	01 97       	sbiw	r24, 0x01	; 1
    113e:	9e 83       	std	Y+6, r25	; 0x06
    1140:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1142:	8d 81       	ldd	r24, Y+5	; 0x05
    1144:	9e 81       	ldd	r25, Y+6	; 0x06
    1146:	00 97       	sbiw	r24, 0x00	; 0
    1148:	69 f7       	brne	.-38     	; 0x1124 <normalMode+0x236>
    114a:	14 c0       	rjmp	.+40     	; 0x1174 <normalMode+0x286>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    114c:	6f 81       	ldd	r22, Y+7	; 0x07
    114e:	78 85       	ldd	r23, Y+8	; 0x08
    1150:	89 85       	ldd	r24, Y+9	; 0x09
    1152:	9a 85       	ldd	r25, Y+10	; 0x0a
    1154:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1158:	dc 01       	movw	r26, r24
    115a:	cb 01       	movw	r24, r22
    115c:	9e 83       	std	Y+6, r25	; 0x06
    115e:	8d 83       	std	Y+5, r24	; 0x05
    1160:	8d 81       	ldd	r24, Y+5	; 0x05
    1162:	9e 81       	ldd	r25, Y+6	; 0x06
    1164:	9a 83       	std	Y+2, r25	; 0x02
    1166:	89 83       	std	Y+1, r24	; 0x01
    1168:	89 81       	ldd	r24, Y+1	; 0x01
    116a:	9a 81       	ldd	r25, Y+2	; 0x02
    116c:	01 97       	sbiw	r24, 0x01	; 1
    116e:	f1 f7       	brne	.-4      	; 0x116c <normalMode+0x27e>
    1170:	9a 83       	std	Y+2, r25	; 0x02
    1172:	89 83       	std	Y+1, r24	; 0x01
			}
		}
		_delay_ms(500);
		counter++;
    1174:	88 89       	ldd	r24, Y+16	; 0x10
    1176:	8f 5f       	subi	r24, 0xFF	; 255
    1178:	88 8b       	std	Y+16, r24	; 0x10
	}
	while (key != '=');
    117a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    117c:	8d 33       	cpi	r24, 0x3D	; 61
    117e:	09 f0       	breq	.+2      	; 0x1182 <normalMode+0x294>
    1180:	f3 ce       	rjmp	.-538    	; 0xf68 <normalMode+0x7a>

	uint8 i = 0;
    1182:	1f 86       	std	Y+15, r1	; 0x0f
    1184:	95 c0       	rjmp	.+298    	; 0x12b0 <normalMode+0x3c2>
	while (i <= operaterCounter){
		mulDivRes = operands[i];
    1186:	8f 85       	ldd	r24, Y+15	; 0x0f
    1188:	88 2f       	mov	r24, r24
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	9c 01       	movw	r18, r24
    118e:	22 0f       	add	r18, r18
    1190:	33 1f       	adc	r19, r19
    1192:	22 0f       	add	r18, r18
    1194:	33 1f       	adc	r19, r19
    1196:	ce 01       	movw	r24, r28
    1198:	01 96       	adiw	r24, 0x01	; 1
    119a:	82 0f       	add	r24, r18
    119c:	93 1f       	adc	r25, r19
    119e:	fc 01       	movw	r30, r24
    11a0:	b8 96       	adiw	r30, 0x28	; 40
    11a2:	80 81       	ld	r24, Z
    11a4:	91 81       	ldd	r25, Z+1	; 0x01
    11a6:	a2 81       	ldd	r26, Z+2	; 0x02
    11a8:	b3 81       	ldd	r27, Z+3	; 0x03
    11aa:	8a 8b       	std	Y+18, r24	; 0x12
    11ac:	9b 8b       	std	Y+19, r25	; 0x13
    11ae:	ac 8b       	std	Y+20, r26	; 0x14
    11b0:	bd 8b       	std	Y+21, r27	; 0x15
		LCD_displayCharacter(' ');
    11b2:	80 e2       	ldi	r24, 0x20	; 32
    11b4:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <LCD_displayCharacter>
    11b8:	4e c0       	rjmp	.+156    	; 0x1256 <normalMode+0x368>
		while(operators[i] == '*' || operators [i] == '%'){
			if (operators[i] == '*'){
    11ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    11bc:	28 2f       	mov	r18, r24
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	ce 01       	movw	r24, r28
    11c2:	87 58       	subi	r24, 0x87	; 135
    11c4:	9f 4f       	sbci	r25, 0xFF	; 255
    11c6:	fc 01       	movw	r30, r24
    11c8:	e2 0f       	add	r30, r18
    11ca:	f3 1f       	adc	r31, r19
    11cc:	80 81       	ld	r24, Z
    11ce:	8a 32       	cpi	r24, 0x2A	; 42
    11d0:	01 f5       	brne	.+64     	; 0x1212 <normalMode+0x324>
				mulDivRes *= operands[i+1];
    11d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    11d4:	88 2f       	mov	r24, r24
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	01 96       	adiw	r24, 0x01	; 1
    11da:	9c 01       	movw	r18, r24
    11dc:	22 0f       	add	r18, r18
    11de:	33 1f       	adc	r19, r19
    11e0:	22 0f       	add	r18, r18
    11e2:	33 1f       	adc	r19, r19
    11e4:	ce 01       	movw	r24, r28
    11e6:	01 96       	adiw	r24, 0x01	; 1
    11e8:	82 0f       	add	r24, r18
    11ea:	93 1f       	adc	r25, r19
    11ec:	fc 01       	movw	r30, r24
    11ee:	b8 96       	adiw	r30, 0x28	; 40
    11f0:	20 81       	ld	r18, Z
    11f2:	31 81       	ldd	r19, Z+1	; 0x01
    11f4:	42 81       	ldd	r20, Z+2	; 0x02
    11f6:	53 81       	ldd	r21, Z+3	; 0x03
    11f8:	6a 89       	ldd	r22, Y+18	; 0x12
    11fa:	7b 89       	ldd	r23, Y+19	; 0x13
    11fc:	8c 89       	ldd	r24, Y+20	; 0x14
    11fe:	9d 89       	ldd	r25, Y+21	; 0x15
    1200:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1204:	dc 01       	movw	r26, r24
    1206:	cb 01       	movw	r24, r22
    1208:	8a 8b       	std	Y+18, r24	; 0x12
    120a:	9b 8b       	std	Y+19, r25	; 0x13
    120c:	ac 8b       	std	Y+20, r26	; 0x14
    120e:	bd 8b       	std	Y+21, r27	; 0x15
    1210:	1f c0       	rjmp	.+62     	; 0x1250 <normalMode+0x362>
			}
			else {
				mulDivRes /= operands[i+1];
    1212:	8f 85       	ldd	r24, Y+15	; 0x0f
    1214:	88 2f       	mov	r24, r24
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	01 96       	adiw	r24, 0x01	; 1
    121a:	9c 01       	movw	r18, r24
    121c:	22 0f       	add	r18, r18
    121e:	33 1f       	adc	r19, r19
    1220:	22 0f       	add	r18, r18
    1222:	33 1f       	adc	r19, r19
    1224:	ce 01       	movw	r24, r28
    1226:	01 96       	adiw	r24, 0x01	; 1
    1228:	82 0f       	add	r24, r18
    122a:	93 1f       	adc	r25, r19
    122c:	fc 01       	movw	r30, r24
    122e:	b8 96       	adiw	r30, 0x28	; 40
    1230:	20 81       	ld	r18, Z
    1232:	31 81       	ldd	r19, Z+1	; 0x01
    1234:	42 81       	ldd	r20, Z+2	; 0x02
    1236:	53 81       	ldd	r21, Z+3	; 0x03
    1238:	6a 89       	ldd	r22, Y+18	; 0x12
    123a:	7b 89       	ldd	r23, Y+19	; 0x13
    123c:	8c 89       	ldd	r24, Y+20	; 0x14
    123e:	9d 89       	ldd	r25, Y+21	; 0x15
    1240:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1244:	dc 01       	movw	r26, r24
    1246:	cb 01       	movw	r24, r22
    1248:	8a 8b       	std	Y+18, r24	; 0x12
    124a:	9b 8b       	std	Y+19, r25	; 0x13
    124c:	ac 8b       	std	Y+20, r26	; 0x14
    124e:	bd 8b       	std	Y+21, r27	; 0x15
			}
			i++;
    1250:	8f 85       	ldd	r24, Y+15	; 0x0f
    1252:	8f 5f       	subi	r24, 0xFF	; 255
    1254:	8f 87       	std	Y+15, r24	; 0x0f

	uint8 i = 0;
	while (i <= operaterCounter){
		mulDivRes = operands[i];
		LCD_displayCharacter(' ');
		while(operators[i] == '*' || operators [i] == '%'){
    1256:	8f 85       	ldd	r24, Y+15	; 0x0f
    1258:	28 2f       	mov	r18, r24
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	ce 01       	movw	r24, r28
    125e:	87 58       	subi	r24, 0x87	; 135
    1260:	9f 4f       	sbci	r25, 0xFF	; 255
    1262:	fc 01       	movw	r30, r24
    1264:	e2 0f       	add	r30, r18
    1266:	f3 1f       	adc	r31, r19
    1268:	80 81       	ld	r24, Z
    126a:	8a 32       	cpi	r24, 0x2A	; 42
    126c:	09 f4       	brne	.+2      	; 0x1270 <normalMode+0x382>
    126e:	a5 cf       	rjmp	.-182    	; 0x11ba <normalMode+0x2cc>
    1270:	8f 85       	ldd	r24, Y+15	; 0x0f
    1272:	28 2f       	mov	r18, r24
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	ce 01       	movw	r24, r28
    1278:	87 58       	subi	r24, 0x87	; 135
    127a:	9f 4f       	sbci	r25, 0xFF	; 255
    127c:	fc 01       	movw	r30, r24
    127e:	e2 0f       	add	r30, r18
    1280:	f3 1f       	adc	r31, r19
    1282:	80 81       	ld	r24, Z
    1284:	85 32       	cpi	r24, 0x25	; 37
    1286:	09 f4       	brne	.+2      	; 0x128a <normalMode+0x39c>
    1288:	98 cf       	rjmp	.-208    	; 0x11ba <normalMode+0x2cc>
			else {
				mulDivRes /= operands[i+1];
			}
			i++;
		}
		totRes += mulDivRes;
    128a:	6e 89       	ldd	r22, Y+22	; 0x16
    128c:	7f 89       	ldd	r23, Y+23	; 0x17
    128e:	88 8d       	ldd	r24, Y+24	; 0x18
    1290:	99 8d       	ldd	r25, Y+25	; 0x19
    1292:	2a 89       	ldd	r18, Y+18	; 0x12
    1294:	3b 89       	ldd	r19, Y+19	; 0x13
    1296:	4c 89       	ldd	r20, Y+20	; 0x14
    1298:	5d 89       	ldd	r21, Y+21	; 0x15
    129a:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    129e:	dc 01       	movw	r26, r24
    12a0:	cb 01       	movw	r24, r22
    12a2:	8e 8b       	std	Y+22, r24	; 0x16
    12a4:	9f 8b       	std	Y+23, r25	; 0x17
    12a6:	a8 8f       	std	Y+24, r26	; 0x18
    12a8:	b9 8f       	std	Y+25, r27	; 0x19
		i++;
    12aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    12ac:	8f 5f       	subi	r24, 0xFF	; 255
    12ae:	8f 87       	std	Y+15, r24	; 0x0f
		counter++;
	}
	while (key != '=');

	uint8 i = 0;
	while (i <= operaterCounter){
    12b0:	9f 85       	ldd	r25, Y+15	; 0x0f
    12b2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12b4:	89 17       	cp	r24, r25
    12b6:	08 f0       	brcs	.+2      	; 0x12ba <normalMode+0x3cc>
    12b8:	66 cf       	rjmp	.-308    	; 0x1186 <normalMode+0x298>
		}
		totRes += mulDivRes;
		i++;
	}

	LCD_moveCursor(3,0);
    12ba:	83 e0       	ldi	r24, 0x03	; 3
    12bc:	60 e0       	ldi	r22, 0x00	; 0
    12be:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <LCD_moveCursor>
	LCD_displayString("=");
    12c2:	8b ea       	ldi	r24, 0xAB	; 171
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <LCD_displayString>
	LCD_intgerToString(totRes);
    12ca:	6e 89       	ldd	r22, Y+22	; 0x16
    12cc:	7f 89       	ldd	r23, Y+23	; 0x17
    12ce:	88 8d       	ldd	r24, Y+24	; 0x18
    12d0:	99 8d       	ldd	r25, Y+25	; 0x19
    12d2:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
    12d6:	dc 01       	movw	r26, r24
    12d8:	cb 01       	movw	r24, r22
    12da:	0e 94 8e 1f 	call	0x3f1c	; 0x3f1c <LCD_intgerToString>

	do {
		key = KEYPAD_getPressedKey();
    12de:	0e 94 74 19 	call	0x32e8	; 0x32e8 <KEYPAD_getPressedKey>
    12e2:	8e 8f       	std	Y+30, r24	; 0x1e
	}
	while (key != ON_KEY);
    12e4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    12e6:	8d 30       	cpi	r24, 0x0D	; 13
    12e8:	d1 f7       	brne	.-12     	; 0x12de <normalMode+0x3f0>
}
    12ea:	c4 57       	subi	r28, 0x74	; 116
    12ec:	df 4f       	sbci	r29, 0xFF	; 255
    12ee:	0f b6       	in	r0, 0x3f	; 63
    12f0:	f8 94       	cli
    12f2:	de bf       	out	0x3e, r29	; 62
    12f4:	0f be       	out	0x3f, r0	; 63
    12f6:	cd bf       	out	0x3d, r28	; 61
    12f8:	cf 91       	pop	r28
    12fa:	df 91       	pop	r29
    12fc:	1f 91       	pop	r17
    12fe:	0f 91       	pop	r16
    1300:	08 95       	ret

00001302 <complexMode>:


void complexMode(void){
    1302:	df 93       	push	r29
    1304:	cf 93       	push	r28
    1306:	cd b7       	in	r28, 0x3d	; 61
    1308:	de b7       	in	r29, 0x3e	; 62
    130a:	2e 97       	sbiw	r28, 0x0e	; 14
    130c:	0f b6       	in	r0, 0x3f	; 63
    130e:	f8 94       	cli
    1310:	de bf       	out	0x3e, r29	; 62
    1312:	0f be       	out	0x3f, r0	; 63
    1314:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    1316:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <LCD_clearScreen>
	LCD_displayString("   Complex Mode");
    131a:	8d ea       	ldi	r24, 0xAD	; 173
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <LCD_displayString>
	LCD_moveCursor(1,0);
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	60 e0       	ldi	r22, 0x00	; 0
    1326:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <LCD_moveCursor>
    132a:	80 e0       	ldi	r24, 0x00	; 0
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	aa e7       	ldi	r26, 0x7A	; 122
    1330:	b4 e4       	ldi	r27, 0x44	; 68
    1332:	8b 87       	std	Y+11, r24	; 0x0b
    1334:	9c 87       	std	Y+12, r25	; 0x0c
    1336:	ad 87       	std	Y+13, r26	; 0x0d
    1338:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    133a:	6b 85       	ldd	r22, Y+11	; 0x0b
    133c:	7c 85       	ldd	r23, Y+12	; 0x0c
    133e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1340:	9e 85       	ldd	r25, Y+14	; 0x0e
    1342:	20 e0       	ldi	r18, 0x00	; 0
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	4a e7       	ldi	r20, 0x7A	; 122
    1348:	53 e4       	ldi	r21, 0x43	; 67
    134a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    134e:	dc 01       	movw	r26, r24
    1350:	cb 01       	movw	r24, r22
    1352:	8f 83       	std	Y+7, r24	; 0x07
    1354:	98 87       	std	Y+8, r25	; 0x08
    1356:	a9 87       	std	Y+9, r26	; 0x09
    1358:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    135a:	6f 81       	ldd	r22, Y+7	; 0x07
    135c:	78 85       	ldd	r23, Y+8	; 0x08
    135e:	89 85       	ldd	r24, Y+9	; 0x09
    1360:	9a 85       	ldd	r25, Y+10	; 0x0a
    1362:	20 e0       	ldi	r18, 0x00	; 0
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	40 e8       	ldi	r20, 0x80	; 128
    1368:	5f e3       	ldi	r21, 0x3F	; 63
    136a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    136e:	88 23       	and	r24, r24
    1370:	2c f4       	brge	.+10     	; 0x137c <complexMode+0x7a>
		__ticks = 1;
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	9e 83       	std	Y+6, r25	; 0x06
    1378:	8d 83       	std	Y+5, r24	; 0x05
    137a:	3f c0       	rjmp	.+126    	; 0x13fa <complexMode+0xf8>
	else if (__tmp > 65535)
    137c:	6f 81       	ldd	r22, Y+7	; 0x07
    137e:	78 85       	ldd	r23, Y+8	; 0x08
    1380:	89 85       	ldd	r24, Y+9	; 0x09
    1382:	9a 85       	ldd	r25, Y+10	; 0x0a
    1384:	20 e0       	ldi	r18, 0x00	; 0
    1386:	3f ef       	ldi	r19, 0xFF	; 255
    1388:	4f e7       	ldi	r20, 0x7F	; 127
    138a:	57 e4       	ldi	r21, 0x47	; 71
    138c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1390:	18 16       	cp	r1, r24
    1392:	4c f5       	brge	.+82     	; 0x13e6 <complexMode+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1394:	6b 85       	ldd	r22, Y+11	; 0x0b
    1396:	7c 85       	ldd	r23, Y+12	; 0x0c
    1398:	8d 85       	ldd	r24, Y+13	; 0x0d
    139a:	9e 85       	ldd	r25, Y+14	; 0x0e
    139c:	20 e0       	ldi	r18, 0x00	; 0
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	40 e2       	ldi	r20, 0x20	; 32
    13a2:	51 e4       	ldi	r21, 0x41	; 65
    13a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13a8:	dc 01       	movw	r26, r24
    13aa:	cb 01       	movw	r24, r22
    13ac:	bc 01       	movw	r22, r24
    13ae:	cd 01       	movw	r24, r26
    13b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13b4:	dc 01       	movw	r26, r24
    13b6:	cb 01       	movw	r24, r22
    13b8:	9e 83       	std	Y+6, r25	; 0x06
    13ba:	8d 83       	std	Y+5, r24	; 0x05
    13bc:	0f c0       	rjmp	.+30     	; 0x13dc <complexMode+0xda>
    13be:	89 e1       	ldi	r24, 0x19	; 25
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	9c 83       	std	Y+4, r25	; 0x04
    13c4:	8b 83       	std	Y+3, r24	; 0x03
    13c6:	8b 81       	ldd	r24, Y+3	; 0x03
    13c8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ca:	01 97       	sbiw	r24, 0x01	; 1
    13cc:	f1 f7       	brne	.-4      	; 0x13ca <complexMode+0xc8>
    13ce:	9c 83       	std	Y+4, r25	; 0x04
    13d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13d2:	8d 81       	ldd	r24, Y+5	; 0x05
    13d4:	9e 81       	ldd	r25, Y+6	; 0x06
    13d6:	01 97       	sbiw	r24, 0x01	; 1
    13d8:	9e 83       	std	Y+6, r25	; 0x06
    13da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13dc:	8d 81       	ldd	r24, Y+5	; 0x05
    13de:	9e 81       	ldd	r25, Y+6	; 0x06
    13e0:	00 97       	sbiw	r24, 0x00	; 0
    13e2:	69 f7       	brne	.-38     	; 0x13be <complexMode+0xbc>
    13e4:	14 c0       	rjmp	.+40     	; 0x140e <complexMode+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13e6:	6f 81       	ldd	r22, Y+7	; 0x07
    13e8:	78 85       	ldd	r23, Y+8	; 0x08
    13ea:	89 85       	ldd	r24, Y+9	; 0x09
    13ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13f2:	dc 01       	movw	r26, r24
    13f4:	cb 01       	movw	r24, r22
    13f6:	9e 83       	std	Y+6, r25	; 0x06
    13f8:	8d 83       	std	Y+5, r24	; 0x05
    13fa:	8d 81       	ldd	r24, Y+5	; 0x05
    13fc:	9e 81       	ldd	r25, Y+6	; 0x06
    13fe:	9a 83       	std	Y+2, r25	; 0x02
    1400:	89 83       	std	Y+1, r24	; 0x01
    1402:	89 81       	ldd	r24, Y+1	; 0x01
    1404:	9a 81       	ldd	r25, Y+2	; 0x02
    1406:	01 97       	sbiw	r24, 0x01	; 1
    1408:	f1 f7       	brne	.-4      	; 0x1406 <complexMode+0x104>
    140a:	9a 83       	std	Y+2, r25	; 0x02
    140c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);

}
    140e:	2e 96       	adiw	r28, 0x0e	; 14
    1410:	0f b6       	in	r0, 0x3f	; 63
    1412:	f8 94       	cli
    1414:	de bf       	out	0x3e, r29	; 62
    1416:	0f be       	out	0x3f, r0	; 63
    1418:	cd bf       	out	0x3d, r28	; 61
    141a:	cf 91       	pop	r28
    141c:	df 91       	pop	r29
    141e:	08 95       	ret

00001420 <equationMode>:


void equationMode(void){
    1420:	df 93       	push	r29
    1422:	cf 93       	push	r28
    1424:	cd b7       	in	r28, 0x3d	; 61
    1426:	de b7       	in	r29, 0x3e	; 62
    1428:	61 97       	sbiw	r28, 0x11	; 17
    142a:	0f b6       	in	r0, 0x3f	; 63
    142c:	f8 94       	cli
    142e:	de bf       	out	0x3e, r29	; 62
    1430:	0f be       	out	0x3f, r0	; 63
    1432:	cd bf       	out	0x3d, r28	; 61
	uint8 eqnType;

	LCD_clearScreen();
    1434:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <LCD_clearScreen>
	LCD_displayString("  Equation Mode");
    1438:	8d eb       	ldi	r24, 0xBD	; 189
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <LCD_displayString>
	LCD_moveCursor(1,0);
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	60 e0       	ldi	r22, 0x00	; 0
    1444:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <LCD_moveCursor>
	LCD_displayString("1:anX+bnY=cn");
    1448:	8d ec       	ldi	r24, 0xCD	; 205
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <LCD_displayString>
	LCD_moveCursor(2,0);
    1450:	82 e0       	ldi	r24, 0x02	; 2
    1452:	60 e0       	ldi	r22, 0x00	; 0
    1454:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <LCD_moveCursor>
	LCD_displayString("2:aX^2+bX+c=0");
    1458:	8a ed       	ldi	r24, 0xDA	; 218
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <LCD_displayString>
	LCD_moveCursor(3,0);
    1460:	83 e0       	ldi	r24, 0x03	; 3
    1462:	60 e0       	ldi	r22, 0x00	; 0
    1464:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <LCD_moveCursor>
	LCD_displayString("3:anX+bnY+cnZ=dn");
    1468:	88 ee       	ldi	r24, 0xE8	; 232
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <LCD_displayString>

	/* Taking equation mode from user */
	do {
		eqnType = KEYPAD_getPressedKey();
    1470:	0e 94 74 19 	call	0x32e8	; 0x32e8 <KEYPAD_getPressedKey>
    1474:	8f 87       	std	Y+15, r24	; 0x0f
    1476:	80 e0       	ldi	r24, 0x00	; 0
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	aa ef       	ldi	r26, 0xFA	; 250
    147c:	b3 e4       	ldi	r27, 0x43	; 67
    147e:	8b 87       	std	Y+11, r24	; 0x0b
    1480:	9c 87       	std	Y+12, r25	; 0x0c
    1482:	ad 87       	std	Y+13, r26	; 0x0d
    1484:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1486:	6b 85       	ldd	r22, Y+11	; 0x0b
    1488:	7c 85       	ldd	r23, Y+12	; 0x0c
    148a:	8d 85       	ldd	r24, Y+13	; 0x0d
    148c:	9e 85       	ldd	r25, Y+14	; 0x0e
    148e:	20 e0       	ldi	r18, 0x00	; 0
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	4a e7       	ldi	r20, 0x7A	; 122
    1494:	53 e4       	ldi	r21, 0x43	; 67
    1496:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    149a:	dc 01       	movw	r26, r24
    149c:	cb 01       	movw	r24, r22
    149e:	8f 83       	std	Y+7, r24	; 0x07
    14a0:	98 87       	std	Y+8, r25	; 0x08
    14a2:	a9 87       	std	Y+9, r26	; 0x09
    14a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14a6:	6f 81       	ldd	r22, Y+7	; 0x07
    14a8:	78 85       	ldd	r23, Y+8	; 0x08
    14aa:	89 85       	ldd	r24, Y+9	; 0x09
    14ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ae:	20 e0       	ldi	r18, 0x00	; 0
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	40 e8       	ldi	r20, 0x80	; 128
    14b4:	5f e3       	ldi	r21, 0x3F	; 63
    14b6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    14ba:	88 23       	and	r24, r24
    14bc:	2c f4       	brge	.+10     	; 0x14c8 <equationMode+0xa8>
		__ticks = 1;
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	9e 83       	std	Y+6, r25	; 0x06
    14c4:	8d 83       	std	Y+5, r24	; 0x05
    14c6:	3f c0       	rjmp	.+126    	; 0x1546 <equationMode+0x126>
	else if (__tmp > 65535)
    14c8:	6f 81       	ldd	r22, Y+7	; 0x07
    14ca:	78 85       	ldd	r23, Y+8	; 0x08
    14cc:	89 85       	ldd	r24, Y+9	; 0x09
    14ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    14d0:	20 e0       	ldi	r18, 0x00	; 0
    14d2:	3f ef       	ldi	r19, 0xFF	; 255
    14d4:	4f e7       	ldi	r20, 0x7F	; 127
    14d6:	57 e4       	ldi	r21, 0x47	; 71
    14d8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    14dc:	18 16       	cp	r1, r24
    14de:	4c f5       	brge	.+82     	; 0x1532 <equationMode+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    14e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    14e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    14e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    14e8:	20 e0       	ldi	r18, 0x00	; 0
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	40 e2       	ldi	r20, 0x20	; 32
    14ee:	51 e4       	ldi	r21, 0x41	; 65
    14f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14f4:	dc 01       	movw	r26, r24
    14f6:	cb 01       	movw	r24, r22
    14f8:	bc 01       	movw	r22, r24
    14fa:	cd 01       	movw	r24, r26
    14fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1500:	dc 01       	movw	r26, r24
    1502:	cb 01       	movw	r24, r22
    1504:	9e 83       	std	Y+6, r25	; 0x06
    1506:	8d 83       	std	Y+5, r24	; 0x05
    1508:	0f c0       	rjmp	.+30     	; 0x1528 <equationMode+0x108>
    150a:	89 e1       	ldi	r24, 0x19	; 25
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	9c 83       	std	Y+4, r25	; 0x04
    1510:	8b 83       	std	Y+3, r24	; 0x03
    1512:	8b 81       	ldd	r24, Y+3	; 0x03
    1514:	9c 81       	ldd	r25, Y+4	; 0x04
    1516:	01 97       	sbiw	r24, 0x01	; 1
    1518:	f1 f7       	brne	.-4      	; 0x1516 <equationMode+0xf6>
    151a:	9c 83       	std	Y+4, r25	; 0x04
    151c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    151e:	8d 81       	ldd	r24, Y+5	; 0x05
    1520:	9e 81       	ldd	r25, Y+6	; 0x06
    1522:	01 97       	sbiw	r24, 0x01	; 1
    1524:	9e 83       	std	Y+6, r25	; 0x06
    1526:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1528:	8d 81       	ldd	r24, Y+5	; 0x05
    152a:	9e 81       	ldd	r25, Y+6	; 0x06
    152c:	00 97       	sbiw	r24, 0x00	; 0
    152e:	69 f7       	brne	.-38     	; 0x150a <equationMode+0xea>
    1530:	14 c0       	rjmp	.+40     	; 0x155a <equationMode+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1532:	6f 81       	ldd	r22, Y+7	; 0x07
    1534:	78 85       	ldd	r23, Y+8	; 0x08
    1536:	89 85       	ldd	r24, Y+9	; 0x09
    1538:	9a 85       	ldd	r25, Y+10	; 0x0a
    153a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    153e:	dc 01       	movw	r26, r24
    1540:	cb 01       	movw	r24, r22
    1542:	9e 83       	std	Y+6, r25	; 0x06
    1544:	8d 83       	std	Y+5, r24	; 0x05
    1546:	8d 81       	ldd	r24, Y+5	; 0x05
    1548:	9e 81       	ldd	r25, Y+6	; 0x06
    154a:	9a 83       	std	Y+2, r25	; 0x02
    154c:	89 83       	std	Y+1, r24	; 0x01
    154e:	89 81       	ldd	r24, Y+1	; 0x01
    1550:	9a 81       	ldd	r25, Y+2	; 0x02
    1552:	01 97       	sbiw	r24, 0x01	; 1
    1554:	f1 f7       	brne	.-4      	; 0x1552 <equationMode+0x132>
    1556:	9a 83       	std	Y+2, r25	; 0x02
    1558:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
	}
	while (eqnType > 3 || eqnType < 1);
    155a:	8f 85       	ldd	r24, Y+15	; 0x0f
    155c:	84 30       	cpi	r24, 0x04	; 4
    155e:	08 f0       	brcs	.+2      	; 0x1562 <equationMode+0x142>
    1560:	87 cf       	rjmp	.-242    	; 0x1470 <equationMode+0x50>
    1562:	8f 85       	ldd	r24, Y+15	; 0x0f
    1564:	88 23       	and	r24, r24
    1566:	09 f4       	brne	.+2      	; 0x156a <equationMode+0x14a>
    1568:	83 cf       	rjmp	.-250    	; 0x1470 <equationMode+0x50>

	switch(eqnType){
    156a:	8f 85       	ldd	r24, Y+15	; 0x0f
    156c:	28 2f       	mov	r18, r24
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	39 8b       	std	Y+17, r19	; 0x11
    1572:	28 8b       	std	Y+16, r18	; 0x10
    1574:	88 89       	ldd	r24, Y+16	; 0x10
    1576:	99 89       	ldd	r25, Y+17	; 0x11
    1578:	82 30       	cpi	r24, 0x02	; 2
    157a:	91 05       	cpc	r25, r1
    157c:	69 f0       	breq	.+26     	; 0x1598 <equationMode+0x178>
    157e:	28 89       	ldd	r18, Y+16	; 0x10
    1580:	39 89       	ldd	r19, Y+17	; 0x11
    1582:	23 30       	cpi	r18, 0x03	; 3
    1584:	31 05       	cpc	r19, r1
    1586:	59 f0       	breq	.+22     	; 0x159e <equationMode+0x17e>
    1588:	88 89       	ldd	r24, Y+16	; 0x10
    158a:	99 89       	ldd	r25, Y+17	; 0x11
    158c:	81 30       	cpi	r24, 0x01	; 1
    158e:	91 05       	cpc	r25, r1
    1590:	41 f4       	brne	.+16     	; 0x15a2 <equationMode+0x182>
	case 1:
		twoInTwoEquation();
    1592:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <twoInTwoEquation>
    1596:	05 c0       	rjmp	.+10     	; 0x15a2 <equationMode+0x182>
		break;
	case 2:
		quadrticEquation();
    1598:	0e 94 9a 0c 	call	0x1934	; 0x1934 <quadrticEquation>
    159c:	02 c0       	rjmp	.+4      	; 0x15a2 <equationMode+0x182>
		break;
	case 3:
		threeInThreeEquation();
    159e:	0e 94 fd 11 	call	0x23fa	; 0x23fa <threeInThreeEquation>
		break;
	}

}
    15a2:	61 96       	adiw	r28, 0x11	; 17
    15a4:	0f b6       	in	r0, 0x3f	; 63
    15a6:	f8 94       	cli
    15a8:	de bf       	out	0x3e, r29	; 62
    15aa:	0f be       	out	0x3f, r0	; 63
    15ac:	cd bf       	out	0x3d, r28	; 61
    15ae:	cf 91       	pop	r28
    15b0:	df 91       	pop	r29
    15b2:	08 95       	ret

000015b4 <matrixMode>:


void matrixMode(void){
    15b4:	df 93       	push	r29
    15b6:	cf 93       	push	r28
    15b8:	cd b7       	in	r28, 0x3d	; 61
    15ba:	de b7       	in	r29, 0x3e	; 62
    15bc:	2e 97       	sbiw	r28, 0x0e	; 14
    15be:	0f b6       	in	r0, 0x3f	; 63
    15c0:	f8 94       	cli
    15c2:	de bf       	out	0x3e, r29	; 62
    15c4:	0f be       	out	0x3f, r0	; 63
    15c6:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    15c8:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <LCD_clearScreen>
	LCD_displayString("   Matrix Mode");
    15cc:	89 ef       	ldi	r24, 0xF9	; 249
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <LCD_displayString>
	LCD_moveCursor(1,0);
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	60 e0       	ldi	r22, 0x00	; 0
    15d8:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <LCD_moveCursor>
    15dc:	80 e0       	ldi	r24, 0x00	; 0
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	aa e7       	ldi	r26, 0x7A	; 122
    15e2:	b4 e4       	ldi	r27, 0x44	; 68
    15e4:	8b 87       	std	Y+11, r24	; 0x0b
    15e6:	9c 87       	std	Y+12, r25	; 0x0c
    15e8:	ad 87       	std	Y+13, r26	; 0x0d
    15ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    15ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    15f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    15f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    15f4:	20 e0       	ldi	r18, 0x00	; 0
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	4a e7       	ldi	r20, 0x7A	; 122
    15fa:	53 e4       	ldi	r21, 0x43	; 67
    15fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1600:	dc 01       	movw	r26, r24
    1602:	cb 01       	movw	r24, r22
    1604:	8f 83       	std	Y+7, r24	; 0x07
    1606:	98 87       	std	Y+8, r25	; 0x08
    1608:	a9 87       	std	Y+9, r26	; 0x09
    160a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    160c:	6f 81       	ldd	r22, Y+7	; 0x07
    160e:	78 85       	ldd	r23, Y+8	; 0x08
    1610:	89 85       	ldd	r24, Y+9	; 0x09
    1612:	9a 85       	ldd	r25, Y+10	; 0x0a
    1614:	20 e0       	ldi	r18, 0x00	; 0
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	40 e8       	ldi	r20, 0x80	; 128
    161a:	5f e3       	ldi	r21, 0x3F	; 63
    161c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1620:	88 23       	and	r24, r24
    1622:	2c f4       	brge	.+10     	; 0x162e <matrixMode+0x7a>
		__ticks = 1;
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	9e 83       	std	Y+6, r25	; 0x06
    162a:	8d 83       	std	Y+5, r24	; 0x05
    162c:	3f c0       	rjmp	.+126    	; 0x16ac <matrixMode+0xf8>
	else if (__tmp > 65535)
    162e:	6f 81       	ldd	r22, Y+7	; 0x07
    1630:	78 85       	ldd	r23, Y+8	; 0x08
    1632:	89 85       	ldd	r24, Y+9	; 0x09
    1634:	9a 85       	ldd	r25, Y+10	; 0x0a
    1636:	20 e0       	ldi	r18, 0x00	; 0
    1638:	3f ef       	ldi	r19, 0xFF	; 255
    163a:	4f e7       	ldi	r20, 0x7F	; 127
    163c:	57 e4       	ldi	r21, 0x47	; 71
    163e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1642:	18 16       	cp	r1, r24
    1644:	4c f5       	brge	.+82     	; 0x1698 <matrixMode+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1646:	6b 85       	ldd	r22, Y+11	; 0x0b
    1648:	7c 85       	ldd	r23, Y+12	; 0x0c
    164a:	8d 85       	ldd	r24, Y+13	; 0x0d
    164c:	9e 85       	ldd	r25, Y+14	; 0x0e
    164e:	20 e0       	ldi	r18, 0x00	; 0
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	40 e2       	ldi	r20, 0x20	; 32
    1654:	51 e4       	ldi	r21, 0x41	; 65
    1656:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    165a:	dc 01       	movw	r26, r24
    165c:	cb 01       	movw	r24, r22
    165e:	bc 01       	movw	r22, r24
    1660:	cd 01       	movw	r24, r26
    1662:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1666:	dc 01       	movw	r26, r24
    1668:	cb 01       	movw	r24, r22
    166a:	9e 83       	std	Y+6, r25	; 0x06
    166c:	8d 83       	std	Y+5, r24	; 0x05
    166e:	0f c0       	rjmp	.+30     	; 0x168e <matrixMode+0xda>
    1670:	89 e1       	ldi	r24, 0x19	; 25
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	9c 83       	std	Y+4, r25	; 0x04
    1676:	8b 83       	std	Y+3, r24	; 0x03
    1678:	8b 81       	ldd	r24, Y+3	; 0x03
    167a:	9c 81       	ldd	r25, Y+4	; 0x04
    167c:	01 97       	sbiw	r24, 0x01	; 1
    167e:	f1 f7       	brne	.-4      	; 0x167c <matrixMode+0xc8>
    1680:	9c 83       	std	Y+4, r25	; 0x04
    1682:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1684:	8d 81       	ldd	r24, Y+5	; 0x05
    1686:	9e 81       	ldd	r25, Y+6	; 0x06
    1688:	01 97       	sbiw	r24, 0x01	; 1
    168a:	9e 83       	std	Y+6, r25	; 0x06
    168c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    168e:	8d 81       	ldd	r24, Y+5	; 0x05
    1690:	9e 81       	ldd	r25, Y+6	; 0x06
    1692:	00 97       	sbiw	r24, 0x00	; 0
    1694:	69 f7       	brne	.-38     	; 0x1670 <matrixMode+0xbc>
    1696:	14 c0       	rjmp	.+40     	; 0x16c0 <matrixMode+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1698:	6f 81       	ldd	r22, Y+7	; 0x07
    169a:	78 85       	ldd	r23, Y+8	; 0x08
    169c:	89 85       	ldd	r24, Y+9	; 0x09
    169e:	9a 85       	ldd	r25, Y+10	; 0x0a
    16a0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16a4:	dc 01       	movw	r26, r24
    16a6:	cb 01       	movw	r24, r22
    16a8:	9e 83       	std	Y+6, r25	; 0x06
    16aa:	8d 83       	std	Y+5, r24	; 0x05
    16ac:	8d 81       	ldd	r24, Y+5	; 0x05
    16ae:	9e 81       	ldd	r25, Y+6	; 0x06
    16b0:	9a 83       	std	Y+2, r25	; 0x02
    16b2:	89 83       	std	Y+1, r24	; 0x01
    16b4:	89 81       	ldd	r24, Y+1	; 0x01
    16b6:	9a 81       	ldd	r25, Y+2	; 0x02
    16b8:	01 97       	sbiw	r24, 0x01	; 1
    16ba:	f1 f7       	brne	.-4      	; 0x16b8 <matrixMode+0x104>
    16bc:	9a 83       	std	Y+2, r25	; 0x02
    16be:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);

}
    16c0:	2e 96       	adiw	r28, 0x0e	; 14
    16c2:	0f b6       	in	r0, 0x3f	; 63
    16c4:	f8 94       	cli
    16c6:	de bf       	out	0x3e, r29	; 62
    16c8:	0f be       	out	0x3f, r0	; 63
    16ca:	cd bf       	out	0x3d, r28	; 61
    16cc:	cf 91       	pop	r28
    16ce:	df 91       	pop	r29
    16d0:	08 95       	ret

000016d2 <vectorMode>:


void vectorMode(void){
    16d2:	df 93       	push	r29
    16d4:	cf 93       	push	r28
    16d6:	cd b7       	in	r28, 0x3d	; 61
    16d8:	de b7       	in	r29, 0x3e	; 62
    16da:	2e 97       	sbiw	r28, 0x0e	; 14
    16dc:	0f b6       	in	r0, 0x3f	; 63
    16de:	f8 94       	cli
    16e0:	de bf       	out	0x3e, r29	; 62
    16e2:	0f be       	out	0x3f, r0	; 63
    16e4:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    16e6:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <LCD_clearScreen>
	LCD_displayString("   Vector Mode");
    16ea:	88 e0       	ldi	r24, 0x08	; 8
    16ec:	91 e0       	ldi	r25, 0x01	; 1
    16ee:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <LCD_displayString>
	LCD_moveCursor(1,0);
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	60 e0       	ldi	r22, 0x00	; 0
    16f6:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <LCD_moveCursor>
    16fa:	80 e0       	ldi	r24, 0x00	; 0
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	aa e7       	ldi	r26, 0x7A	; 122
    1700:	b4 e4       	ldi	r27, 0x44	; 68
    1702:	8b 87       	std	Y+11, r24	; 0x0b
    1704:	9c 87       	std	Y+12, r25	; 0x0c
    1706:	ad 87       	std	Y+13, r26	; 0x0d
    1708:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    170a:	6b 85       	ldd	r22, Y+11	; 0x0b
    170c:	7c 85       	ldd	r23, Y+12	; 0x0c
    170e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1710:	9e 85       	ldd	r25, Y+14	; 0x0e
    1712:	20 e0       	ldi	r18, 0x00	; 0
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	4a e7       	ldi	r20, 0x7A	; 122
    1718:	53 e4       	ldi	r21, 0x43	; 67
    171a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    171e:	dc 01       	movw	r26, r24
    1720:	cb 01       	movw	r24, r22
    1722:	8f 83       	std	Y+7, r24	; 0x07
    1724:	98 87       	std	Y+8, r25	; 0x08
    1726:	a9 87       	std	Y+9, r26	; 0x09
    1728:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    172a:	6f 81       	ldd	r22, Y+7	; 0x07
    172c:	78 85       	ldd	r23, Y+8	; 0x08
    172e:	89 85       	ldd	r24, Y+9	; 0x09
    1730:	9a 85       	ldd	r25, Y+10	; 0x0a
    1732:	20 e0       	ldi	r18, 0x00	; 0
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	40 e8       	ldi	r20, 0x80	; 128
    1738:	5f e3       	ldi	r21, 0x3F	; 63
    173a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    173e:	88 23       	and	r24, r24
    1740:	2c f4       	brge	.+10     	; 0x174c <vectorMode+0x7a>
		__ticks = 1;
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	9e 83       	std	Y+6, r25	; 0x06
    1748:	8d 83       	std	Y+5, r24	; 0x05
    174a:	3f c0       	rjmp	.+126    	; 0x17ca <vectorMode+0xf8>
	else if (__tmp > 65535)
    174c:	6f 81       	ldd	r22, Y+7	; 0x07
    174e:	78 85       	ldd	r23, Y+8	; 0x08
    1750:	89 85       	ldd	r24, Y+9	; 0x09
    1752:	9a 85       	ldd	r25, Y+10	; 0x0a
    1754:	20 e0       	ldi	r18, 0x00	; 0
    1756:	3f ef       	ldi	r19, 0xFF	; 255
    1758:	4f e7       	ldi	r20, 0x7F	; 127
    175a:	57 e4       	ldi	r21, 0x47	; 71
    175c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1760:	18 16       	cp	r1, r24
    1762:	4c f5       	brge	.+82     	; 0x17b6 <vectorMode+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1764:	6b 85       	ldd	r22, Y+11	; 0x0b
    1766:	7c 85       	ldd	r23, Y+12	; 0x0c
    1768:	8d 85       	ldd	r24, Y+13	; 0x0d
    176a:	9e 85       	ldd	r25, Y+14	; 0x0e
    176c:	20 e0       	ldi	r18, 0x00	; 0
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	40 e2       	ldi	r20, 0x20	; 32
    1772:	51 e4       	ldi	r21, 0x41	; 65
    1774:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1778:	dc 01       	movw	r26, r24
    177a:	cb 01       	movw	r24, r22
    177c:	bc 01       	movw	r22, r24
    177e:	cd 01       	movw	r24, r26
    1780:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1784:	dc 01       	movw	r26, r24
    1786:	cb 01       	movw	r24, r22
    1788:	9e 83       	std	Y+6, r25	; 0x06
    178a:	8d 83       	std	Y+5, r24	; 0x05
    178c:	0f c0       	rjmp	.+30     	; 0x17ac <vectorMode+0xda>
    178e:	89 e1       	ldi	r24, 0x19	; 25
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	9c 83       	std	Y+4, r25	; 0x04
    1794:	8b 83       	std	Y+3, r24	; 0x03
    1796:	8b 81       	ldd	r24, Y+3	; 0x03
    1798:	9c 81       	ldd	r25, Y+4	; 0x04
    179a:	01 97       	sbiw	r24, 0x01	; 1
    179c:	f1 f7       	brne	.-4      	; 0x179a <vectorMode+0xc8>
    179e:	9c 83       	std	Y+4, r25	; 0x04
    17a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17a2:	8d 81       	ldd	r24, Y+5	; 0x05
    17a4:	9e 81       	ldd	r25, Y+6	; 0x06
    17a6:	01 97       	sbiw	r24, 0x01	; 1
    17a8:	9e 83       	std	Y+6, r25	; 0x06
    17aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ac:	8d 81       	ldd	r24, Y+5	; 0x05
    17ae:	9e 81       	ldd	r25, Y+6	; 0x06
    17b0:	00 97       	sbiw	r24, 0x00	; 0
    17b2:	69 f7       	brne	.-38     	; 0x178e <vectorMode+0xbc>
    17b4:	14 c0       	rjmp	.+40     	; 0x17de <vectorMode+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17b6:	6f 81       	ldd	r22, Y+7	; 0x07
    17b8:	78 85       	ldd	r23, Y+8	; 0x08
    17ba:	89 85       	ldd	r24, Y+9	; 0x09
    17bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    17be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17c2:	dc 01       	movw	r26, r24
    17c4:	cb 01       	movw	r24, r22
    17c6:	9e 83       	std	Y+6, r25	; 0x06
    17c8:	8d 83       	std	Y+5, r24	; 0x05
    17ca:	8d 81       	ldd	r24, Y+5	; 0x05
    17cc:	9e 81       	ldd	r25, Y+6	; 0x06
    17ce:	9a 83       	std	Y+2, r25	; 0x02
    17d0:	89 83       	std	Y+1, r24	; 0x01
    17d2:	89 81       	ldd	r24, Y+1	; 0x01
    17d4:	9a 81       	ldd	r25, Y+2	; 0x02
    17d6:	01 97       	sbiw	r24, 0x01	; 1
    17d8:	f1 f7       	brne	.-4      	; 0x17d6 <vectorMode+0x104>
    17da:	9a 83       	std	Y+2, r25	; 0x02
    17dc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);

}
    17de:	2e 96       	adiw	r28, 0x0e	; 14
    17e0:	0f b6       	in	r0, 0x3f	; 63
    17e2:	f8 94       	cli
    17e4:	de bf       	out	0x3e, r29	; 62
    17e6:	0f be       	out	0x3f, r0	; 63
    17e8:	cd bf       	out	0x3d, r28	; 61
    17ea:	cf 91       	pop	r28
    17ec:	df 91       	pop	r29
    17ee:	08 95       	ret

000017f0 <tableMode>:


void tableMode(void){
    17f0:	df 93       	push	r29
    17f2:	cf 93       	push	r28
    17f4:	cd b7       	in	r28, 0x3d	; 61
    17f6:	de b7       	in	r29, 0x3e	; 62
    17f8:	2e 97       	sbiw	r28, 0x0e	; 14
    17fa:	0f b6       	in	r0, 0x3f	; 63
    17fc:	f8 94       	cli
    17fe:	de bf       	out	0x3e, r29	; 62
    1800:	0f be       	out	0x3f, r0	; 63
    1802:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    1804:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <LCD_clearScreen>
	LCD_displayString("   Table Mode");
    1808:	87 e1       	ldi	r24, 0x17	; 23
    180a:	91 e0       	ldi	r25, 0x01	; 1
    180c:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <LCD_displayString>
	LCD_moveCursor(1,0);
    1810:	81 e0       	ldi	r24, 0x01	; 1
    1812:	60 e0       	ldi	r22, 0x00	; 0
    1814:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <LCD_moveCursor>
    1818:	80 e0       	ldi	r24, 0x00	; 0
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	aa e7       	ldi	r26, 0x7A	; 122
    181e:	b4 e4       	ldi	r27, 0x44	; 68
    1820:	8b 87       	std	Y+11, r24	; 0x0b
    1822:	9c 87       	std	Y+12, r25	; 0x0c
    1824:	ad 87       	std	Y+13, r26	; 0x0d
    1826:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1828:	6b 85       	ldd	r22, Y+11	; 0x0b
    182a:	7c 85       	ldd	r23, Y+12	; 0x0c
    182c:	8d 85       	ldd	r24, Y+13	; 0x0d
    182e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1830:	20 e0       	ldi	r18, 0x00	; 0
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	4a e7       	ldi	r20, 0x7A	; 122
    1836:	53 e4       	ldi	r21, 0x43	; 67
    1838:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    183c:	dc 01       	movw	r26, r24
    183e:	cb 01       	movw	r24, r22
    1840:	8f 83       	std	Y+7, r24	; 0x07
    1842:	98 87       	std	Y+8, r25	; 0x08
    1844:	a9 87       	std	Y+9, r26	; 0x09
    1846:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1848:	6f 81       	ldd	r22, Y+7	; 0x07
    184a:	78 85       	ldd	r23, Y+8	; 0x08
    184c:	89 85       	ldd	r24, Y+9	; 0x09
    184e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	40 e8       	ldi	r20, 0x80	; 128
    1856:	5f e3       	ldi	r21, 0x3F	; 63
    1858:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    185c:	88 23       	and	r24, r24
    185e:	2c f4       	brge	.+10     	; 0x186a <tableMode+0x7a>
		__ticks = 1;
    1860:	81 e0       	ldi	r24, 0x01	; 1
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	9e 83       	std	Y+6, r25	; 0x06
    1866:	8d 83       	std	Y+5, r24	; 0x05
    1868:	3f c0       	rjmp	.+126    	; 0x18e8 <tableMode+0xf8>
	else if (__tmp > 65535)
    186a:	6f 81       	ldd	r22, Y+7	; 0x07
    186c:	78 85       	ldd	r23, Y+8	; 0x08
    186e:	89 85       	ldd	r24, Y+9	; 0x09
    1870:	9a 85       	ldd	r25, Y+10	; 0x0a
    1872:	20 e0       	ldi	r18, 0x00	; 0
    1874:	3f ef       	ldi	r19, 0xFF	; 255
    1876:	4f e7       	ldi	r20, 0x7F	; 127
    1878:	57 e4       	ldi	r21, 0x47	; 71
    187a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    187e:	18 16       	cp	r1, r24
    1880:	4c f5       	brge	.+82     	; 0x18d4 <tableMode+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1882:	6b 85       	ldd	r22, Y+11	; 0x0b
    1884:	7c 85       	ldd	r23, Y+12	; 0x0c
    1886:	8d 85       	ldd	r24, Y+13	; 0x0d
    1888:	9e 85       	ldd	r25, Y+14	; 0x0e
    188a:	20 e0       	ldi	r18, 0x00	; 0
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	40 e2       	ldi	r20, 0x20	; 32
    1890:	51 e4       	ldi	r21, 0x41	; 65
    1892:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1896:	dc 01       	movw	r26, r24
    1898:	cb 01       	movw	r24, r22
    189a:	bc 01       	movw	r22, r24
    189c:	cd 01       	movw	r24, r26
    189e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18a2:	dc 01       	movw	r26, r24
    18a4:	cb 01       	movw	r24, r22
    18a6:	9e 83       	std	Y+6, r25	; 0x06
    18a8:	8d 83       	std	Y+5, r24	; 0x05
    18aa:	0f c0       	rjmp	.+30     	; 0x18ca <tableMode+0xda>
    18ac:	89 e1       	ldi	r24, 0x19	; 25
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	9c 83       	std	Y+4, r25	; 0x04
    18b2:	8b 83       	std	Y+3, r24	; 0x03
    18b4:	8b 81       	ldd	r24, Y+3	; 0x03
    18b6:	9c 81       	ldd	r25, Y+4	; 0x04
    18b8:	01 97       	sbiw	r24, 0x01	; 1
    18ba:	f1 f7       	brne	.-4      	; 0x18b8 <tableMode+0xc8>
    18bc:	9c 83       	std	Y+4, r25	; 0x04
    18be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18c0:	8d 81       	ldd	r24, Y+5	; 0x05
    18c2:	9e 81       	ldd	r25, Y+6	; 0x06
    18c4:	01 97       	sbiw	r24, 0x01	; 1
    18c6:	9e 83       	std	Y+6, r25	; 0x06
    18c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ca:	8d 81       	ldd	r24, Y+5	; 0x05
    18cc:	9e 81       	ldd	r25, Y+6	; 0x06
    18ce:	00 97       	sbiw	r24, 0x00	; 0
    18d0:	69 f7       	brne	.-38     	; 0x18ac <tableMode+0xbc>
    18d2:	14 c0       	rjmp	.+40     	; 0x18fc <tableMode+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18d4:	6f 81       	ldd	r22, Y+7	; 0x07
    18d6:	78 85       	ldd	r23, Y+8	; 0x08
    18d8:	89 85       	ldd	r24, Y+9	; 0x09
    18da:	9a 85       	ldd	r25, Y+10	; 0x0a
    18dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18e0:	dc 01       	movw	r26, r24
    18e2:	cb 01       	movw	r24, r22
    18e4:	9e 83       	std	Y+6, r25	; 0x06
    18e6:	8d 83       	std	Y+5, r24	; 0x05
    18e8:	8d 81       	ldd	r24, Y+5	; 0x05
    18ea:	9e 81       	ldd	r25, Y+6	; 0x06
    18ec:	9a 83       	std	Y+2, r25	; 0x02
    18ee:	89 83       	std	Y+1, r24	; 0x01
    18f0:	89 81       	ldd	r24, Y+1	; 0x01
    18f2:	9a 81       	ldd	r25, Y+2	; 0x02
    18f4:	01 97       	sbiw	r24, 0x01	; 1
    18f6:	f1 f7       	brne	.-4      	; 0x18f4 <tableMode+0x104>
    18f8:	9a 83       	std	Y+2, r25	; 0x02
    18fa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);

}
    18fc:	2e 96       	adiw	r28, 0x0e	; 14
    18fe:	0f b6       	in	r0, 0x3f	; 63
    1900:	f8 94       	cli
    1902:	de bf       	out	0x3e, r29	; 62
    1904:	0f be       	out	0x3f, r0	; 63
    1906:	cd bf       	out	0x3d, r28	; 61
    1908:	cf 91       	pop	r28
    190a:	df 91       	pop	r29
    190c:	08 95       	ret

0000190e <getKeyType>:

Key_Type getKeyType(uint8 a_key){
    190e:	df 93       	push	r29
    1910:	cf 93       	push	r28
    1912:	00 d0       	rcall	.+0      	; 0x1914 <getKeyType+0x6>
    1914:	cd b7       	in	r28, 0x3d	; 61
    1916:	de b7       	in	r29, 0x3e	; 62
    1918:	89 83       	std	Y+1, r24	; 0x01

	if (a_key <= 9){
    191a:	89 81       	ldd	r24, Y+1	; 0x01
    191c:	8a 30       	cpi	r24, 0x0A	; 10
    191e:	10 f4       	brcc	.+4      	; 0x1924 <getKeyType+0x16>
		return NUMBER_KEY;
    1920:	1a 82       	std	Y+2, r1	; 0x02
    1922:	02 c0       	rjmp	.+4      	; 0x1928 <getKeyType+0x1a>
	}
	else {
		return OPERATION_KEY;
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	8a 83       	std	Y+2, r24	; 0x02
    1928:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    192a:	0f 90       	pop	r0
    192c:	0f 90       	pop	r0
    192e:	cf 91       	pop	r28
    1930:	df 91       	pop	r29
    1932:	08 95       	ret

00001934 <quadrticEquation>:

void quadrticEquation(void){
    1934:	ef 92       	push	r14
    1936:	ff 92       	push	r15
    1938:	0f 93       	push	r16
    193a:	1f 93       	push	r17
    193c:	df 93       	push	r29
    193e:	cf 93       	push	r28
    1940:	cd b7       	in	r28, 0x3d	; 61
    1942:	de b7       	in	r29, 0x3e	; 62
    1944:	ef 97       	sbiw	r28, 0x3f	; 63
    1946:	0f b6       	in	r0, 0x3f	; 63
    1948:	f8 94       	cli
    194a:	de bf       	out	0x3e, r29	; 62
    194c:	0f be       	out	0x3f, r0	; 63
    194e:	cd bf       	out	0x3d, r28	; 61
	long double a, b, c, x1, x2, sqrtPart, realPart, imgPart;
	uint8 i, key, numCounter = 0, sign ='+';
    1950:	19 8a       	std	Y+17, r1	; 0x11
    1952:	8b e2       	ldi	r24, 0x2B	; 43
    1954:	88 8b       	std	Y+16, r24	; 0x10
	Key_Type type;

	char num[10] = {'\0'};
    1956:	8a e0       	ldi	r24, 0x0A	; 10
    1958:	fe 01       	movw	r30, r28
    195a:	f4 96       	adiw	r30, 0x34	; 52
    195c:	df 01       	movw	r26, r30
    195e:	28 2f       	mov	r18, r24
    1960:	1d 92       	st	X+, r1
    1962:	2a 95       	dec	r18
    1964:	e9 f7       	brne	.-6      	; 0x1960 <quadrticEquation+0x2c>

	LCD_clearScreen ();
    1966:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <LCD_clearScreen>
	for (i = 0; i < 3; i++){
    196a:	1b 8a       	std	Y+19, r1	; 0x13
    196c:	3a c1       	rjmp	.+628    	; 0x1be2 <quadrticEquation+0x2ae>
		LCD_moveCursor(i,0);
    196e:	8b 89       	ldd	r24, Y+19	; 0x13
    1970:	60 e0       	ldi	r22, 0x00	; 0
    1972:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <LCD_moveCursor>
		LCD_displayCharacter('a' + i);
    1976:	8b 89       	ldd	r24, Y+19	; 0x13
    1978:	8f 59       	subi	r24, 0x9F	; 159
    197a:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <LCD_displayCharacter>
		LCD_displayCharacter(':');
    197e:	8a e3       	ldi	r24, 0x3A	; 58
    1980:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <LCD_displayCharacter>
		sign = '+';
    1984:	8b e2       	ldi	r24, 0x2B	; 43
    1986:	88 8b       	std	Y+16, r24	; 0x10
		do {
			key = KEYPAD_getPressedKey();
    1988:	0e 94 74 19 	call	0x32e8	; 0x32e8 <KEYPAD_getPressedKey>
    198c:	8a 8b       	std	Y+18, r24	; 0x12
			type = getKeyType(key);
    198e:	8a 89       	ldd	r24, Y+18	; 0x12
    1990:	0e 94 87 0c 	call	0x190e	; 0x190e <getKeyType>
    1994:	8f 87       	std	Y+15, r24	; 0x0f

			if (key == ON_KEY){
    1996:	8a 89       	ldd	r24, Y+18	; 0x12
    1998:	8d 30       	cpi	r24, 0x0D	; 13
    199a:	09 f4       	brne	.+2      	; 0x199e <quadrticEquation+0x6a>
    199c:	65 c2       	rjmp	.+1226   	; 0x1e68 <quadrticEquation+0x534>
				return;
			}

			if (type == NUMBER_KEY){
    199e:	8f 85       	ldd	r24, Y+15	; 0x0f
    19a0:	88 23       	and	r24, r24
    19a2:	a1 f4       	brne	.+40     	; 0x19cc <quadrticEquation+0x98>
				LCD_displayCharacter(key+48);
    19a4:	8a 89       	ldd	r24, Y+18	; 0x12
    19a6:	80 5d       	subi	r24, 0xD0	; 208
    19a8:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <LCD_displayCharacter>
				num[numCounter++] = key + 48;
    19ac:	89 89       	ldd	r24, Y+17	; 0x11
    19ae:	28 2f       	mov	r18, r24
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	8a 89       	ldd	r24, Y+18	; 0x12
    19b4:	48 2f       	mov	r20, r24
    19b6:	40 5d       	subi	r20, 0xD0	; 208
    19b8:	ce 01       	movw	r24, r28
    19ba:	c4 96       	adiw	r24, 0x34	; 52
    19bc:	fc 01       	movw	r30, r24
    19be:	e2 0f       	add	r30, r18
    19c0:	f3 1f       	adc	r31, r19
    19c2:	40 83       	st	Z, r20
    19c4:	89 89       	ldd	r24, Y+17	; 0x11
    19c6:	8f 5f       	subi	r24, 0xFF	; 255
    19c8:	89 8b       	std	Y+17, r24	; 0x11
    19ca:	08 c0       	rjmp	.+16     	; 0x19dc <quadrticEquation+0xa8>
			}
			else {
				if (key != '='){
    19cc:	8a 89       	ldd	r24, Y+18	; 0x12
    19ce:	8d 33       	cpi	r24, 0x3D	; 61
    19d0:	29 f0       	breq	.+10     	; 0x19dc <quadrticEquation+0xa8>
					LCD_displayCharacter(key);
    19d2:	8a 89       	ldd	r24, Y+18	; 0x12
    19d4:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <LCD_displayCharacter>
					sign = key;
    19d8:	8a 89       	ldd	r24, Y+18	; 0x12
    19da:	88 8b       	std	Y+16, r24	; 0x10
    19dc:	80 e0       	ldi	r24, 0x00	; 0
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	aa ef       	ldi	r26, 0xFA	; 250
    19e2:	b3 e4       	ldi	r27, 0x43	; 67
    19e4:	8b 87       	std	Y+11, r24	; 0x0b
    19e6:	9c 87       	std	Y+12, r25	; 0x0c
    19e8:	ad 87       	std	Y+13, r26	; 0x0d
    19ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    19ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    19f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    19f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	4a e7       	ldi	r20, 0x7A	; 122
    19fa:	53 e4       	ldi	r21, 0x43	; 67
    19fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a00:	dc 01       	movw	r26, r24
    1a02:	cb 01       	movw	r24, r22
    1a04:	8f 83       	std	Y+7, r24	; 0x07
    1a06:	98 87       	std	Y+8, r25	; 0x08
    1a08:	a9 87       	std	Y+9, r26	; 0x09
    1a0a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a0c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a0e:	78 85       	ldd	r23, Y+8	; 0x08
    1a10:	89 85       	ldd	r24, Y+9	; 0x09
    1a12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	40 e8       	ldi	r20, 0x80	; 128
    1a1a:	5f e3       	ldi	r21, 0x3F	; 63
    1a1c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a20:	88 23       	and	r24, r24
    1a22:	2c f4       	brge	.+10     	; 0x1a2e <quadrticEquation+0xfa>
		__ticks = 1;
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	9e 83       	std	Y+6, r25	; 0x06
    1a2a:	8d 83       	std	Y+5, r24	; 0x05
    1a2c:	3f c0       	rjmp	.+126    	; 0x1aac <quadrticEquation+0x178>
	else if (__tmp > 65535)
    1a2e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a30:	78 85       	ldd	r23, Y+8	; 0x08
    1a32:	89 85       	ldd	r24, Y+9	; 0x09
    1a34:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a36:	20 e0       	ldi	r18, 0x00	; 0
    1a38:	3f ef       	ldi	r19, 0xFF	; 255
    1a3a:	4f e7       	ldi	r20, 0x7F	; 127
    1a3c:	57 e4       	ldi	r21, 0x47	; 71
    1a3e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a42:	18 16       	cp	r1, r24
    1a44:	4c f5       	brge	.+82     	; 0x1a98 <quadrticEquation+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a46:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a48:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a4e:	20 e0       	ldi	r18, 0x00	; 0
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	40 e2       	ldi	r20, 0x20	; 32
    1a54:	51 e4       	ldi	r21, 0x41	; 65
    1a56:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a5a:	dc 01       	movw	r26, r24
    1a5c:	cb 01       	movw	r24, r22
    1a5e:	bc 01       	movw	r22, r24
    1a60:	cd 01       	movw	r24, r26
    1a62:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a66:	dc 01       	movw	r26, r24
    1a68:	cb 01       	movw	r24, r22
    1a6a:	9e 83       	std	Y+6, r25	; 0x06
    1a6c:	8d 83       	std	Y+5, r24	; 0x05
    1a6e:	0f c0       	rjmp	.+30     	; 0x1a8e <quadrticEquation+0x15a>
    1a70:	89 e1       	ldi	r24, 0x19	; 25
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	9c 83       	std	Y+4, r25	; 0x04
    1a76:	8b 83       	std	Y+3, r24	; 0x03
    1a78:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a7c:	01 97       	sbiw	r24, 0x01	; 1
    1a7e:	f1 f7       	brne	.-4      	; 0x1a7c <quadrticEquation+0x148>
    1a80:	9c 83       	std	Y+4, r25	; 0x04
    1a82:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a84:	8d 81       	ldd	r24, Y+5	; 0x05
    1a86:	9e 81       	ldd	r25, Y+6	; 0x06
    1a88:	01 97       	sbiw	r24, 0x01	; 1
    1a8a:	9e 83       	std	Y+6, r25	; 0x06
    1a8c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a90:	9e 81       	ldd	r25, Y+6	; 0x06
    1a92:	00 97       	sbiw	r24, 0x00	; 0
    1a94:	69 f7       	brne	.-38     	; 0x1a70 <quadrticEquation+0x13c>
    1a96:	14 c0       	rjmp	.+40     	; 0x1ac0 <quadrticEquation+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a98:	6f 81       	ldd	r22, Y+7	; 0x07
    1a9a:	78 85       	ldd	r23, Y+8	; 0x08
    1a9c:	89 85       	ldd	r24, Y+9	; 0x09
    1a9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1aa4:	dc 01       	movw	r26, r24
    1aa6:	cb 01       	movw	r24, r22
    1aa8:	9e 83       	std	Y+6, r25	; 0x06
    1aaa:	8d 83       	std	Y+5, r24	; 0x05
    1aac:	8d 81       	ldd	r24, Y+5	; 0x05
    1aae:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab0:	9a 83       	std	Y+2, r25	; 0x02
    1ab2:	89 83       	std	Y+1, r24	; 0x01
    1ab4:	89 81       	ldd	r24, Y+1	; 0x01
    1ab6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab8:	01 97       	sbiw	r24, 0x01	; 1
    1aba:	f1 f7       	brne	.-4      	; 0x1ab8 <quadrticEquation+0x184>
    1abc:	9a 83       	std	Y+2, r25	; 0x02
    1abe:	89 83       	std	Y+1, r24	; 0x01
				}
			}
			_delay_ms(500);
		}
		while (key != '=');
    1ac0:	8a 89       	ldd	r24, Y+18	; 0x12
    1ac2:	8d 33       	cpi	r24, 0x3D	; 61
    1ac4:	09 f0       	breq	.+2      	; 0x1ac8 <quadrticEquation+0x194>
    1ac6:	60 cf       	rjmp	.-320    	; 0x1988 <quadrticEquation+0x54>

		switch (i){
    1ac8:	8b 89       	ldd	r24, Y+19	; 0x13
    1aca:	a8 2f       	mov	r26, r24
    1acc:	b0 e0       	ldi	r27, 0x00	; 0
    1ace:	bf af       	std	Y+63, r27	; 0x3f
    1ad0:	ae af       	std	Y+62, r26	; 0x3e
    1ad2:	2e ad       	ldd	r18, Y+62	; 0x3e
    1ad4:	3f ad       	ldd	r19, Y+63	; 0x3f
    1ad6:	21 30       	cpi	r18, 0x01	; 1
    1ad8:	31 05       	cpc	r19, r1
    1ada:	99 f1       	breq	.+102    	; 0x1b42 <quadrticEquation+0x20e>
    1adc:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ade:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ae0:	82 30       	cpi	r24, 0x02	; 2
    1ae2:	91 05       	cpc	r25, r1
    1ae4:	09 f4       	brne	.+2      	; 0x1ae8 <quadrticEquation+0x1b4>
    1ae6:	54 c0       	rjmp	.+168    	; 0x1b90 <quadrticEquation+0x25c>
    1ae8:	ae ad       	ldd	r26, Y+62	; 0x3e
    1aea:	bf ad       	ldd	r27, Y+63	; 0x3f
    1aec:	10 97       	sbiw	r26, 0x00	; 0
    1aee:	09 f0       	breq	.+2      	; 0x1af2 <quadrticEquation+0x1be>
    1af0:	75 c0       	rjmp	.+234    	; 0x1bdc <quadrticEquation+0x2a8>
		case 0:
			num[numCounter] = '\0';
    1af2:	89 89       	ldd	r24, Y+17	; 0x11
    1af4:	28 2f       	mov	r18, r24
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	ce 01       	movw	r24, r28
    1afa:	c4 96       	adiw	r24, 0x34	; 52
    1afc:	fc 01       	movw	r30, r24
    1afe:	e2 0f       	add	r30, r18
    1b00:	f3 1f       	adc	r31, r19
    1b02:	10 82       	st	Z, r1
			numCounter = 0;
    1b04:	19 8a       	std	Y+17, r1	; 0x11
			a = atol(num);
    1b06:	ce 01       	movw	r24, r28
    1b08:	c4 96       	adiw	r24, 0x34	; 52
    1b0a:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <atol>
    1b0e:	dc 01       	movw	r26, r24
    1b10:	cb 01       	movw	r24, r22
    1b12:	bc 01       	movw	r22, r24
    1b14:	cd 01       	movw	r24, r26
    1b16:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    1b1a:	dc 01       	movw	r26, r24
    1b1c:	cb 01       	movw	r24, r22
    1b1e:	88 ab       	std	Y+48, r24	; 0x30
    1b20:	99 ab       	std	Y+49, r25	; 0x31
    1b22:	aa ab       	std	Y+50, r26	; 0x32
    1b24:	bb ab       	std	Y+51, r27	; 0x33
			if (sign == 45){
    1b26:	88 89       	ldd	r24, Y+16	; 0x10
    1b28:	8d 32       	cpi	r24, 0x2D	; 45
    1b2a:	09 f0       	breq	.+2      	; 0x1b2e <quadrticEquation+0x1fa>
    1b2c:	57 c0       	rjmp	.+174    	; 0x1bdc <quadrticEquation+0x2a8>
				a *= -1;
    1b2e:	88 a9       	ldd	r24, Y+48	; 0x30
    1b30:	99 a9       	ldd	r25, Y+49	; 0x31
    1b32:	aa a9       	ldd	r26, Y+50	; 0x32
    1b34:	bb a9       	ldd	r27, Y+51	; 0x33
    1b36:	b0 58       	subi	r27, 0x80	; 128
    1b38:	88 ab       	std	Y+48, r24	; 0x30
    1b3a:	99 ab       	std	Y+49, r25	; 0x31
    1b3c:	aa ab       	std	Y+50, r26	; 0x32
    1b3e:	bb ab       	std	Y+51, r27	; 0x33
    1b40:	4d c0       	rjmp	.+154    	; 0x1bdc <quadrticEquation+0x2a8>
			}

			break;
		case 1:
			num[numCounter] = '\0';
    1b42:	89 89       	ldd	r24, Y+17	; 0x11
    1b44:	28 2f       	mov	r18, r24
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	ce 01       	movw	r24, r28
    1b4a:	c4 96       	adiw	r24, 0x34	; 52
    1b4c:	fc 01       	movw	r30, r24
    1b4e:	e2 0f       	add	r30, r18
    1b50:	f3 1f       	adc	r31, r19
    1b52:	10 82       	st	Z, r1
			numCounter = 0;
    1b54:	19 8a       	std	Y+17, r1	; 0x11
			b = atol(num);
    1b56:	ce 01       	movw	r24, r28
    1b58:	c4 96       	adiw	r24, 0x34	; 52
    1b5a:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <atol>
    1b5e:	dc 01       	movw	r26, r24
    1b60:	cb 01       	movw	r24, r22
    1b62:	bc 01       	movw	r22, r24
    1b64:	cd 01       	movw	r24, r26
    1b66:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    1b6a:	dc 01       	movw	r26, r24
    1b6c:	cb 01       	movw	r24, r22
    1b6e:	8c a7       	std	Y+44, r24	; 0x2c
    1b70:	9d a7       	std	Y+45, r25	; 0x2d
    1b72:	ae a7       	std	Y+46, r26	; 0x2e
    1b74:	bf a7       	std	Y+47, r27	; 0x2f
			if (sign == 45){
    1b76:	88 89       	ldd	r24, Y+16	; 0x10
    1b78:	8d 32       	cpi	r24, 0x2D	; 45
    1b7a:	81 f5       	brne	.+96     	; 0x1bdc <quadrticEquation+0x2a8>
				b *= -1;
    1b7c:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b7e:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b80:	ae a5       	ldd	r26, Y+46	; 0x2e
    1b82:	bf a5       	ldd	r27, Y+47	; 0x2f
    1b84:	b0 58       	subi	r27, 0x80	; 128
    1b86:	8c a7       	std	Y+44, r24	; 0x2c
    1b88:	9d a7       	std	Y+45, r25	; 0x2d
    1b8a:	ae a7       	std	Y+46, r26	; 0x2e
    1b8c:	bf a7       	std	Y+47, r27	; 0x2f
    1b8e:	26 c0       	rjmp	.+76     	; 0x1bdc <quadrticEquation+0x2a8>
			}

			break;
		case 2:
			num[numCounter] = '\0';
    1b90:	89 89       	ldd	r24, Y+17	; 0x11
    1b92:	28 2f       	mov	r18, r24
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	ce 01       	movw	r24, r28
    1b98:	c4 96       	adiw	r24, 0x34	; 52
    1b9a:	fc 01       	movw	r30, r24
    1b9c:	e2 0f       	add	r30, r18
    1b9e:	f3 1f       	adc	r31, r19
    1ba0:	10 82       	st	Z, r1
			numCounter = 0;
    1ba2:	19 8a       	std	Y+17, r1	; 0x11
			c = atol(num);
    1ba4:	ce 01       	movw	r24, r28
    1ba6:	c4 96       	adiw	r24, 0x34	; 52
    1ba8:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <atol>
    1bac:	dc 01       	movw	r26, r24
    1bae:	cb 01       	movw	r24, r22
    1bb0:	bc 01       	movw	r22, r24
    1bb2:	cd 01       	movw	r24, r26
    1bb4:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    1bb8:	dc 01       	movw	r26, r24
    1bba:	cb 01       	movw	r24, r22
    1bbc:	88 a7       	std	Y+40, r24	; 0x28
    1bbe:	99 a7       	std	Y+41, r25	; 0x29
    1bc0:	aa a7       	std	Y+42, r26	; 0x2a
    1bc2:	bb a7       	std	Y+43, r27	; 0x2b
			if (sign == 45){
    1bc4:	88 89       	ldd	r24, Y+16	; 0x10
    1bc6:	8d 32       	cpi	r24, 0x2D	; 45
    1bc8:	49 f4       	brne	.+18     	; 0x1bdc <quadrticEquation+0x2a8>
				c *= -1;
    1bca:	88 a5       	ldd	r24, Y+40	; 0x28
    1bcc:	99 a5       	ldd	r25, Y+41	; 0x29
    1bce:	aa a5       	ldd	r26, Y+42	; 0x2a
    1bd0:	bb a5       	ldd	r27, Y+43	; 0x2b
    1bd2:	b0 58       	subi	r27, 0x80	; 128
    1bd4:	88 a7       	std	Y+40, r24	; 0x28
    1bd6:	99 a7       	std	Y+41, r25	; 0x29
    1bd8:	aa a7       	std	Y+42, r26	; 0x2a
    1bda:	bb a7       	std	Y+43, r27	; 0x2b
	Key_Type type;

	char num[10] = {'\0'};

	LCD_clearScreen ();
	for (i = 0; i < 3; i++){
    1bdc:	8b 89       	ldd	r24, Y+19	; 0x13
    1bde:	8f 5f       	subi	r24, 0xFF	; 255
    1be0:	8b 8b       	std	Y+19, r24	; 0x13
    1be2:	8b 89       	ldd	r24, Y+19	; 0x13
    1be4:	83 30       	cpi	r24, 0x03	; 3
    1be6:	08 f4       	brcc	.+2      	; 0x1bea <quadrticEquation+0x2b6>
    1be8:	c2 ce       	rjmp	.-636    	; 0x196e <quadrticEquation+0x3a>
			break;
		}

	}

	sqrtPart = (b*b) - 4 * a * c;
    1bea:	6c a5       	ldd	r22, Y+44	; 0x2c
    1bec:	7d a5       	ldd	r23, Y+45	; 0x2d
    1bee:	8e a5       	ldd	r24, Y+46	; 0x2e
    1bf0:	9f a5       	ldd	r25, Y+47	; 0x2f
    1bf2:	2c a5       	ldd	r18, Y+44	; 0x2c
    1bf4:	3d a5       	ldd	r19, Y+45	; 0x2d
    1bf6:	4e a5       	ldd	r20, Y+46	; 0x2e
    1bf8:	5f a5       	ldd	r21, Y+47	; 0x2f
    1bfa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bfe:	dc 01       	movw	r26, r24
    1c00:	cb 01       	movw	r24, r22
    1c02:	7c 01       	movw	r14, r24
    1c04:	8d 01       	movw	r16, r26
    1c06:	68 a9       	ldd	r22, Y+48	; 0x30
    1c08:	79 a9       	ldd	r23, Y+49	; 0x31
    1c0a:	8a a9       	ldd	r24, Y+50	; 0x32
    1c0c:	9b a9       	ldd	r25, Y+51	; 0x33
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	40 e8       	ldi	r20, 0x80	; 128
    1c14:	50 ec       	ldi	r21, 0xC0	; 192
    1c16:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	bc 01       	movw	r22, r24
    1c20:	cd 01       	movw	r24, r26
    1c22:	28 a5       	ldd	r18, Y+40	; 0x28
    1c24:	39 a5       	ldd	r19, Y+41	; 0x29
    1c26:	4a a5       	ldd	r20, Y+42	; 0x2a
    1c28:	5b a5       	ldd	r21, Y+43	; 0x2b
    1c2a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c2e:	dc 01       	movw	r26, r24
    1c30:	cb 01       	movw	r24, r22
    1c32:	9c 01       	movw	r18, r24
    1c34:	ad 01       	movw	r20, r26
    1c36:	c8 01       	movw	r24, r16
    1c38:	b7 01       	movw	r22, r14
    1c3a:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    1c3e:	dc 01       	movw	r26, r24
    1c40:	cb 01       	movw	r24, r22
    1c42:	8c 8f       	std	Y+28, r24	; 0x1c
    1c44:	9d 8f       	std	Y+29, r25	; 0x1d
    1c46:	ae 8f       	std	Y+30, r26	; 0x1e
    1c48:	bf 8f       	std	Y+31, r27	; 0x1f
	LCD_clearScreen();
    1c4a:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <LCD_clearScreen>
	if (sqrtPart >= 0){
    1c4e:	6c 8d       	ldd	r22, Y+28	; 0x1c
    1c50:	7d 8d       	ldd	r23, Y+29	; 0x1d
    1c52:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c54:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1c56:	20 e0       	ldi	r18, 0x00	; 0
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	40 e0       	ldi	r20, 0x00	; 0
    1c5c:	50 e0       	ldi	r21, 0x00	; 0
    1c5e:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
    1c62:	88 23       	and	r24, r24
    1c64:	0c f4       	brge	.+2      	; 0x1c68 <quadrticEquation+0x334>
    1c66:	7f c0       	rjmp	.+254    	; 0x1d66 <quadrticEquation+0x432>
		x1 = (-1 * b + sqrt(sqrtPart))/(2 * a);
    1c68:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c6a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c6c:	ae 8d       	ldd	r26, Y+30	; 0x1e
    1c6e:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1c70:	bc 01       	movw	r22, r24
    1c72:	cd 01       	movw	r24, r26
    1c74:	0e 94 53 20 	call	0x40a6	; 0x40a6 <sqrt>
    1c78:	dc 01       	movw	r26, r24
    1c7a:	cb 01       	movw	r24, r22
    1c7c:	bc 01       	movw	r22, r24
    1c7e:	cd 01       	movw	r24, r26
    1c80:	2c a5       	ldd	r18, Y+44	; 0x2c
    1c82:	3d a5       	ldd	r19, Y+45	; 0x2d
    1c84:	4e a5       	ldd	r20, Y+46	; 0x2e
    1c86:	5f a5       	ldd	r21, Y+47	; 0x2f
    1c88:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    1c8c:	dc 01       	movw	r26, r24
    1c8e:	cb 01       	movw	r24, r22
    1c90:	7c 01       	movw	r14, r24
    1c92:	8d 01       	movw	r16, r26
    1c94:	28 a9       	ldd	r18, Y+48	; 0x30
    1c96:	39 a9       	ldd	r19, Y+49	; 0x31
    1c98:	4a a9       	ldd	r20, Y+50	; 0x32
    1c9a:	5b a9       	ldd	r21, Y+51	; 0x33
    1c9c:	ca 01       	movw	r24, r20
    1c9e:	b9 01       	movw	r22, r18
    1ca0:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    1ca4:	dc 01       	movw	r26, r24
    1ca6:	cb 01       	movw	r24, r22
    1ca8:	9c 01       	movw	r18, r24
    1caa:	ad 01       	movw	r20, r26
    1cac:	c8 01       	movw	r24, r16
    1cae:	b7 01       	movw	r22, r14
    1cb0:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1cb4:	dc 01       	movw	r26, r24
    1cb6:	cb 01       	movw	r24, r22
    1cb8:	8c a3       	std	Y+36, r24	; 0x24
    1cba:	9d a3       	std	Y+37, r25	; 0x25
    1cbc:	ae a3       	std	Y+38, r26	; 0x26
    1cbe:	bf a3       	std	Y+39, r27	; 0x27
		x2 = (-1 * b - sqrt(sqrtPart))/(2 * a);
    1cc0:	8c a5       	ldd	r24, Y+44	; 0x2c
    1cc2:	9d a5       	ldd	r25, Y+45	; 0x2d
    1cc4:	ae a5       	ldd	r26, Y+46	; 0x2e
    1cc6:	bf a5       	ldd	r27, Y+47	; 0x2f
    1cc8:	7c 01       	movw	r14, r24
    1cca:	8d 01       	movw	r16, r26
    1ccc:	17 fb       	bst	r17, 7
    1cce:	10 95       	com	r17
    1cd0:	17 f9       	bld	r17, 7
    1cd2:	10 95       	com	r17
    1cd4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1cd6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1cd8:	ae 8d       	ldd	r26, Y+30	; 0x1e
    1cda:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1cdc:	bc 01       	movw	r22, r24
    1cde:	cd 01       	movw	r24, r26
    1ce0:	0e 94 53 20 	call	0x40a6	; 0x40a6 <sqrt>
    1ce4:	9b 01       	movw	r18, r22
    1ce6:	ac 01       	movw	r20, r24
    1ce8:	c8 01       	movw	r24, r16
    1cea:	b7 01       	movw	r22, r14
    1cec:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    1cf0:	dc 01       	movw	r26, r24
    1cf2:	cb 01       	movw	r24, r22
    1cf4:	7c 01       	movw	r14, r24
    1cf6:	8d 01       	movw	r16, r26
    1cf8:	28 a9       	ldd	r18, Y+48	; 0x30
    1cfa:	39 a9       	ldd	r19, Y+49	; 0x31
    1cfc:	4a a9       	ldd	r20, Y+50	; 0x32
    1cfe:	5b a9       	ldd	r21, Y+51	; 0x33
    1d00:	ca 01       	movw	r24, r20
    1d02:	b9 01       	movw	r22, r18
    1d04:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    1d08:	dc 01       	movw	r26, r24
    1d0a:	cb 01       	movw	r24, r22
    1d0c:	9c 01       	movw	r18, r24
    1d0e:	ad 01       	movw	r20, r26
    1d10:	c8 01       	movw	r24, r16
    1d12:	b7 01       	movw	r22, r14
    1d14:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	88 a3       	std	Y+32, r24	; 0x20
    1d1e:	99 a3       	std	Y+33, r25	; 0x21
    1d20:	aa a3       	std	Y+34, r26	; 0x22
    1d22:	bb a3       	std	Y+35, r27	; 0x23

		LCD_displayString("X1=");
    1d24:	85 e2       	ldi	r24, 0x25	; 37
    1d26:	91 e0       	ldi	r25, 0x01	; 1
    1d28:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <LCD_displayString>
		LCD_intgerToString(x1);
    1d2c:	6c a1       	ldd	r22, Y+36	; 0x24
    1d2e:	7d a1       	ldd	r23, Y+37	; 0x25
    1d30:	8e a1       	ldd	r24, Y+38	; 0x26
    1d32:	9f a1       	ldd	r25, Y+39	; 0x27
    1d34:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
    1d38:	dc 01       	movw	r26, r24
    1d3a:	cb 01       	movw	r24, r22
    1d3c:	0e 94 8e 1f 	call	0x3f1c	; 0x3f1c <LCD_intgerToString>
		LCD_moveCursor(1, 0);
    1d40:	81 e0       	ldi	r24, 0x01	; 1
    1d42:	60 e0       	ldi	r22, 0x00	; 0
    1d44:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <LCD_moveCursor>
		LCD_displayString("X2=");
    1d48:	89 e2       	ldi	r24, 0x29	; 41
    1d4a:	91 e0       	ldi	r25, 0x01	; 1
    1d4c:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <LCD_displayString>
		LCD_intgerToString(x2);
    1d50:	68 a1       	ldd	r22, Y+32	; 0x20
    1d52:	79 a1       	ldd	r23, Y+33	; 0x21
    1d54:	8a a1       	ldd	r24, Y+34	; 0x22
    1d56:	9b a1       	ldd	r25, Y+35	; 0x23
    1d58:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	cb 01       	movw	r24, r22
    1d60:	0e 94 8e 1f 	call	0x3f1c	; 0x3f1c <LCD_intgerToString>
    1d64:	7b c0       	rjmp	.+246    	; 0x1e5c <quadrticEquation+0x528>
	}
	else {
		realPart = (-1 * b) / (2 * a);
    1d66:	68 a9       	ldd	r22, Y+48	; 0x30
    1d68:	79 a9       	ldd	r23, Y+49	; 0x31
    1d6a:	8a a9       	ldd	r24, Y+50	; 0x32
    1d6c:	9b a9       	ldd	r25, Y+51	; 0x33
    1d6e:	20 e0       	ldi	r18, 0x00	; 0
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	40 e0       	ldi	r20, 0x00	; 0
    1d74:	50 ec       	ldi	r21, 0xC0	; 192
    1d76:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d7a:	dc 01       	movw	r26, r24
    1d7c:	cb 01       	movw	r24, r22
    1d7e:	9c 01       	movw	r18, r24
    1d80:	ad 01       	movw	r20, r26
    1d82:	6c a5       	ldd	r22, Y+44	; 0x2c
    1d84:	7d a5       	ldd	r23, Y+45	; 0x2d
    1d86:	8e a5       	ldd	r24, Y+46	; 0x2e
    1d88:	9f a5       	ldd	r25, Y+47	; 0x2f
    1d8a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1d8e:	dc 01       	movw	r26, r24
    1d90:	cb 01       	movw	r24, r22
    1d92:	88 8f       	std	Y+24, r24	; 0x18
    1d94:	99 8f       	std	Y+25, r25	; 0x19
    1d96:	aa 8f       	std	Y+26, r26	; 0x1a
    1d98:	bb 8f       	std	Y+27, r27	; 0x1b
		imgPart = (sqrt(-1 * sqrtPart)) / (2 * a);
    1d9a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d9c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1d9e:	ae 8d       	ldd	r26, Y+30	; 0x1e
    1da0:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1da2:	b0 58       	subi	r27, 0x80	; 128
    1da4:	bc 01       	movw	r22, r24
    1da6:	cd 01       	movw	r24, r26
    1da8:	0e 94 53 20 	call	0x40a6	; 0x40a6 <sqrt>
    1dac:	7b 01       	movw	r14, r22
    1dae:	8c 01       	movw	r16, r24
    1db0:	28 a9       	ldd	r18, Y+48	; 0x30
    1db2:	39 a9       	ldd	r19, Y+49	; 0x31
    1db4:	4a a9       	ldd	r20, Y+50	; 0x32
    1db6:	5b a9       	ldd	r21, Y+51	; 0x33
    1db8:	ca 01       	movw	r24, r20
    1dba:	b9 01       	movw	r22, r18
    1dbc:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    1dc0:	dc 01       	movw	r26, r24
    1dc2:	cb 01       	movw	r24, r22
    1dc4:	9c 01       	movw	r18, r24
    1dc6:	ad 01       	movw	r20, r26
    1dc8:	c8 01       	movw	r24, r16
    1dca:	b7 01       	movw	r22, r14
    1dcc:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1dd0:	dc 01       	movw	r26, r24
    1dd2:	cb 01       	movw	r24, r22
    1dd4:	8c 8b       	std	Y+20, r24	; 0x14
    1dd6:	9d 8b       	std	Y+21, r25	; 0x15
    1dd8:	ae 8b       	std	Y+22, r26	; 0x16
    1dda:	bf 8b       	std	Y+23, r27	; 0x17

		LCD_displayString("X1=");
    1ddc:	85 e2       	ldi	r24, 0x25	; 37
    1dde:	91 e0       	ldi	r25, 0x01	; 1
    1de0:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <LCD_displayString>
		LCD_intgerToString(realPart);
    1de4:	68 8d       	ldd	r22, Y+24	; 0x18
    1de6:	79 8d       	ldd	r23, Y+25	; 0x19
    1de8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1dea:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1dec:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
    1df0:	dc 01       	movw	r26, r24
    1df2:	cb 01       	movw	r24, r22
    1df4:	0e 94 8e 1f 	call	0x3f1c	; 0x3f1c <LCD_intgerToString>
		LCD_displayCharacter('+');
    1df8:	8b e2       	ldi	r24, 0x2B	; 43
    1dfa:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <LCD_displayCharacter>
		LCD_intgerToString(imgPart);
    1dfe:	6c 89       	ldd	r22, Y+20	; 0x14
    1e00:	7d 89       	ldd	r23, Y+21	; 0x15
    1e02:	8e 89       	ldd	r24, Y+22	; 0x16
    1e04:	9f 89       	ldd	r25, Y+23	; 0x17
    1e06:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	0e 94 8e 1f 	call	0x3f1c	; 0x3f1c <LCD_intgerToString>
		LCD_displayCharacter('i');
    1e12:	89 e6       	ldi	r24, 0x69	; 105
    1e14:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <LCD_displayCharacter>
		LCD_moveCursor(1, 0);
    1e18:	81 e0       	ldi	r24, 0x01	; 1
    1e1a:	60 e0       	ldi	r22, 0x00	; 0
    1e1c:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <LCD_moveCursor>
		LCD_displayString("X2=");
    1e20:	89 e2       	ldi	r24, 0x29	; 41
    1e22:	91 e0       	ldi	r25, 0x01	; 1
    1e24:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <LCD_displayString>
		LCD_intgerToString(realPart);
    1e28:	68 8d       	ldd	r22, Y+24	; 0x18
    1e2a:	79 8d       	ldd	r23, Y+25	; 0x19
    1e2c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e2e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1e30:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
    1e34:	dc 01       	movw	r26, r24
    1e36:	cb 01       	movw	r24, r22
    1e38:	0e 94 8e 1f 	call	0x3f1c	; 0x3f1c <LCD_intgerToString>
		LCD_displayCharacter('-');
    1e3c:	8d e2       	ldi	r24, 0x2D	; 45
    1e3e:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <LCD_displayCharacter>
		LCD_intgerToString(imgPart);
    1e42:	6c 89       	ldd	r22, Y+20	; 0x14
    1e44:	7d 89       	ldd	r23, Y+21	; 0x15
    1e46:	8e 89       	ldd	r24, Y+22	; 0x16
    1e48:	9f 89       	ldd	r25, Y+23	; 0x17
    1e4a:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
    1e4e:	dc 01       	movw	r26, r24
    1e50:	cb 01       	movw	r24, r22
    1e52:	0e 94 8e 1f 	call	0x3f1c	; 0x3f1c <LCD_intgerToString>
		LCD_displayCharacter('i');
    1e56:	89 e6       	ldi	r24, 0x69	; 105
    1e58:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <LCD_displayCharacter>
	}

	do {
		key = KEYPAD_getPressedKey();
    1e5c:	0e 94 74 19 	call	0x32e8	; 0x32e8 <KEYPAD_getPressedKey>
    1e60:	8a 8b       	std	Y+18, r24	; 0x12
	}
	while (key != ON_KEY);
    1e62:	8a 89       	ldd	r24, Y+18	; 0x12
    1e64:	8d 30       	cpi	r24, 0x0D	; 13
    1e66:	d1 f7       	brne	.-12     	; 0x1e5c <quadrticEquation+0x528>
}
    1e68:	ef 96       	adiw	r28, 0x3f	; 63
    1e6a:	0f b6       	in	r0, 0x3f	; 63
    1e6c:	f8 94       	cli
    1e6e:	de bf       	out	0x3e, r29	; 62
    1e70:	0f be       	out	0x3f, r0	; 63
    1e72:	cd bf       	out	0x3d, r28	; 61
    1e74:	cf 91       	pop	r28
    1e76:	df 91       	pop	r29
    1e78:	1f 91       	pop	r17
    1e7a:	0f 91       	pop	r16
    1e7c:	ff 90       	pop	r15
    1e7e:	ef 90       	pop	r14
    1e80:	08 95       	ret

00001e82 <twoInTwoEquation>:

void twoInTwoEquation(void){
    1e82:	ef 92       	push	r14
    1e84:	ff 92       	push	r15
    1e86:	0f 93       	push	r16
    1e88:	1f 93       	push	r17
    1e8a:	df 93       	push	r29
    1e8c:	cf 93       	push	r28
    1e8e:	cd b7       	in	r28, 0x3d	; 61
    1e90:	de b7       	in	r29, 0x3e	; 62
    1e92:	c3 54       	subi	r28, 0x43	; 67
    1e94:	d0 40       	sbci	r29, 0x00	; 0
    1e96:	0f b6       	in	r0, 0x3f	; 63
    1e98:	f8 94       	cli
    1e9a:	de bf       	out	0x3e, r29	; 62
    1e9c:	0f be       	out	0x3f, r0	; 63
    1e9e:	cd bf       	out	0x3d, r28	; 61
	long double a1, b1, c1, a2, b2, c2, x, y, x_r;
	uint8 i, key, numCounter = 0, sign ='+';
    1ea0:	19 8a       	std	Y+17, r1	; 0x11
    1ea2:	8b e2       	ldi	r24, 0x2B	; 43
    1ea4:	88 8b       	std	Y+16, r24	; 0x10
	Key_Type type;

	char num[10] = {'\0'};
    1ea6:	8a e0       	ldi	r24, 0x0A	; 10
    1ea8:	fe 01       	movw	r30, r28
    1eaa:	f8 96       	adiw	r30, 0x38	; 56
    1eac:	df 01       	movw	r26, r30
    1eae:	28 2f       	mov	r18, r24
    1eb0:	1d 92       	st	X+, r1
    1eb2:	2a 95       	dec	r18
    1eb4:	e9 f7       	brne	.-6      	; 0x1eb0 <twoInTwoEquation+0x2e>

	LCD_clearScreen ();
    1eb6:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <LCD_clearScreen>
	for (i = 0; i < 6; i++){
    1eba:	1b 8a       	std	Y+19, r1	; 0x13
    1ebc:	f6 c1       	rjmp	.+1004   	; 0x22aa <twoInTwoEquation+0x428>
		sign = '+';
    1ebe:	8b e2       	ldi	r24, 0x2B	; 43
    1ec0:	88 8b       	std	Y+16, r24	; 0x10

		if (i == 3){
    1ec2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ec4:	83 30       	cpi	r24, 0x03	; 3
    1ec6:	11 f4       	brne	.+4      	; 0x1ecc <twoInTwoEquation+0x4a>
			LCD_clearScreen();
    1ec8:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <LCD_clearScreen>
		}

		if (i >= 3){
    1ecc:	8b 89       	ldd	r24, Y+19	; 0x13
    1ece:	83 30       	cpi	r24, 0x03	; 3
    1ed0:	80 f0       	brcs	.+32     	; 0x1ef2 <twoInTwoEquation+0x70>
			LCD_moveCursor(i-3,0);
    1ed2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ed4:	83 50       	subi	r24, 0x03	; 3
    1ed6:	60 e0       	ldi	r22, 0x00	; 0
    1ed8:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <LCD_moveCursor>
			LCD_displayCharacter('a' + i - 3);
    1edc:	8b 89       	ldd	r24, Y+19	; 0x13
    1ede:	82 5a       	subi	r24, 0xA2	; 162
    1ee0:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <LCD_displayCharacter>
			LCD_displayCharacter('2');
    1ee4:	82 e3       	ldi	r24, 0x32	; 50
    1ee6:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <LCD_displayCharacter>
			LCD_displayCharacter(':');
    1eea:	8a e3       	ldi	r24, 0x3A	; 58
    1eec:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <LCD_displayCharacter>
    1ef0:	0e c0       	rjmp	.+28     	; 0x1f0e <twoInTwoEquation+0x8c>
		}
		else {
			LCD_moveCursor(i,0);
    1ef2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ef4:	60 e0       	ldi	r22, 0x00	; 0
    1ef6:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <LCD_moveCursor>
			LCD_displayCharacter('a' + i);
    1efa:	8b 89       	ldd	r24, Y+19	; 0x13
    1efc:	8f 59       	subi	r24, 0x9F	; 159
    1efe:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <LCD_displayCharacter>
			LCD_displayCharacter('1');
    1f02:	81 e3       	ldi	r24, 0x31	; 49
    1f04:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <LCD_displayCharacter>
			LCD_displayCharacter(':');
    1f08:	8a e3       	ldi	r24, 0x3A	; 58
    1f0a:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <LCD_displayCharacter>
		}


		do {
			key = KEYPAD_getPressedKey();
    1f0e:	0e 94 74 19 	call	0x32e8	; 0x32e8 <KEYPAD_getPressedKey>
    1f12:	8a 8b       	std	Y+18, r24	; 0x12
			type = getKeyType(key);
    1f14:	8a 89       	ldd	r24, Y+18	; 0x12
    1f16:	0e 94 87 0c 	call	0x190e	; 0x190e <getKeyType>
    1f1a:	8f 87       	std	Y+15, r24	; 0x0f

			if (key == ON_KEY){
    1f1c:	8a 89       	ldd	r24, Y+18	; 0x12
    1f1e:	8d 30       	cpi	r24, 0x0D	; 13
    1f20:	09 f4       	brne	.+2      	; 0x1f24 <twoInTwoEquation+0xa2>
    1f22:	5d c2       	rjmp	.+1210   	; 0x23de <twoInTwoEquation+0x55c>
				return;
			}

			if (type == NUMBER_KEY){
    1f24:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f26:	88 23       	and	r24, r24
    1f28:	a1 f4       	brne	.+40     	; 0x1f52 <twoInTwoEquation+0xd0>
				LCD_displayCharacter(key+48);
    1f2a:	8a 89       	ldd	r24, Y+18	; 0x12
    1f2c:	80 5d       	subi	r24, 0xD0	; 208
    1f2e:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <LCD_displayCharacter>
				num[numCounter++] = key + 48;
    1f32:	89 89       	ldd	r24, Y+17	; 0x11
    1f34:	28 2f       	mov	r18, r24
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	8a 89       	ldd	r24, Y+18	; 0x12
    1f3a:	48 2f       	mov	r20, r24
    1f3c:	40 5d       	subi	r20, 0xD0	; 208
    1f3e:	ce 01       	movw	r24, r28
    1f40:	c8 96       	adiw	r24, 0x38	; 56
    1f42:	fc 01       	movw	r30, r24
    1f44:	e2 0f       	add	r30, r18
    1f46:	f3 1f       	adc	r31, r19
    1f48:	40 83       	st	Z, r20
    1f4a:	89 89       	ldd	r24, Y+17	; 0x11
    1f4c:	8f 5f       	subi	r24, 0xFF	; 255
    1f4e:	89 8b       	std	Y+17, r24	; 0x11
    1f50:	08 c0       	rjmp	.+16     	; 0x1f62 <twoInTwoEquation+0xe0>
			}
			else {
				if (key != '='){
    1f52:	8a 89       	ldd	r24, Y+18	; 0x12
    1f54:	8d 33       	cpi	r24, 0x3D	; 61
    1f56:	29 f0       	breq	.+10     	; 0x1f62 <twoInTwoEquation+0xe0>
					LCD_displayCharacter(key);
    1f58:	8a 89       	ldd	r24, Y+18	; 0x12
    1f5a:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <LCD_displayCharacter>
					sign = key;
    1f5e:	8a 89       	ldd	r24, Y+18	; 0x12
    1f60:	88 8b       	std	Y+16, r24	; 0x10
    1f62:	80 e0       	ldi	r24, 0x00	; 0
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	aa ef       	ldi	r26, 0xFA	; 250
    1f68:	b3 e4       	ldi	r27, 0x43	; 67
    1f6a:	8b 87       	std	Y+11, r24	; 0x0b
    1f6c:	9c 87       	std	Y+12, r25	; 0x0c
    1f6e:	ad 87       	std	Y+13, r26	; 0x0d
    1f70:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f72:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f74:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f76:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f78:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f7a:	20 e0       	ldi	r18, 0x00	; 0
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	4a e7       	ldi	r20, 0x7A	; 122
    1f80:	53 e4       	ldi	r21, 0x43	; 67
    1f82:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f86:	dc 01       	movw	r26, r24
    1f88:	cb 01       	movw	r24, r22
    1f8a:	8f 83       	std	Y+7, r24	; 0x07
    1f8c:	98 87       	std	Y+8, r25	; 0x08
    1f8e:	a9 87       	std	Y+9, r26	; 0x09
    1f90:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f92:	6f 81       	ldd	r22, Y+7	; 0x07
    1f94:	78 85       	ldd	r23, Y+8	; 0x08
    1f96:	89 85       	ldd	r24, Y+9	; 0x09
    1f98:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f9a:	20 e0       	ldi	r18, 0x00	; 0
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	40 e8       	ldi	r20, 0x80	; 128
    1fa0:	5f e3       	ldi	r21, 0x3F	; 63
    1fa2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1fa6:	88 23       	and	r24, r24
    1fa8:	2c f4       	brge	.+10     	; 0x1fb4 <twoInTwoEquation+0x132>
		__ticks = 1;
    1faa:	81 e0       	ldi	r24, 0x01	; 1
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	9e 83       	std	Y+6, r25	; 0x06
    1fb0:	8d 83       	std	Y+5, r24	; 0x05
    1fb2:	3f c0       	rjmp	.+126    	; 0x2032 <twoInTwoEquation+0x1b0>
	else if (__tmp > 65535)
    1fb4:	6f 81       	ldd	r22, Y+7	; 0x07
    1fb6:	78 85       	ldd	r23, Y+8	; 0x08
    1fb8:	89 85       	ldd	r24, Y+9	; 0x09
    1fba:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fbc:	20 e0       	ldi	r18, 0x00	; 0
    1fbe:	3f ef       	ldi	r19, 0xFF	; 255
    1fc0:	4f e7       	ldi	r20, 0x7F	; 127
    1fc2:	57 e4       	ldi	r21, 0x47	; 71
    1fc4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1fc8:	18 16       	cp	r1, r24
    1fca:	4c f5       	brge	.+82     	; 0x201e <twoInTwoEquation+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fcc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fce:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fd2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fd4:	20 e0       	ldi	r18, 0x00	; 0
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	40 e2       	ldi	r20, 0x20	; 32
    1fda:	51 e4       	ldi	r21, 0x41	; 65
    1fdc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fe0:	dc 01       	movw	r26, r24
    1fe2:	cb 01       	movw	r24, r22
    1fe4:	bc 01       	movw	r22, r24
    1fe6:	cd 01       	movw	r24, r26
    1fe8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fec:	dc 01       	movw	r26, r24
    1fee:	cb 01       	movw	r24, r22
    1ff0:	9e 83       	std	Y+6, r25	; 0x06
    1ff2:	8d 83       	std	Y+5, r24	; 0x05
    1ff4:	0f c0       	rjmp	.+30     	; 0x2014 <twoInTwoEquation+0x192>
    1ff6:	89 e1       	ldi	r24, 0x19	; 25
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	9c 83       	std	Y+4, r25	; 0x04
    1ffc:	8b 83       	std	Y+3, r24	; 0x03
    1ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    2000:	9c 81       	ldd	r25, Y+4	; 0x04
    2002:	01 97       	sbiw	r24, 0x01	; 1
    2004:	f1 f7       	brne	.-4      	; 0x2002 <twoInTwoEquation+0x180>
    2006:	9c 83       	std	Y+4, r25	; 0x04
    2008:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    200a:	8d 81       	ldd	r24, Y+5	; 0x05
    200c:	9e 81       	ldd	r25, Y+6	; 0x06
    200e:	01 97       	sbiw	r24, 0x01	; 1
    2010:	9e 83       	std	Y+6, r25	; 0x06
    2012:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2014:	8d 81       	ldd	r24, Y+5	; 0x05
    2016:	9e 81       	ldd	r25, Y+6	; 0x06
    2018:	00 97       	sbiw	r24, 0x00	; 0
    201a:	69 f7       	brne	.-38     	; 0x1ff6 <twoInTwoEquation+0x174>
    201c:	14 c0       	rjmp	.+40     	; 0x2046 <twoInTwoEquation+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    201e:	6f 81       	ldd	r22, Y+7	; 0x07
    2020:	78 85       	ldd	r23, Y+8	; 0x08
    2022:	89 85       	ldd	r24, Y+9	; 0x09
    2024:	9a 85       	ldd	r25, Y+10	; 0x0a
    2026:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    202a:	dc 01       	movw	r26, r24
    202c:	cb 01       	movw	r24, r22
    202e:	9e 83       	std	Y+6, r25	; 0x06
    2030:	8d 83       	std	Y+5, r24	; 0x05
    2032:	8d 81       	ldd	r24, Y+5	; 0x05
    2034:	9e 81       	ldd	r25, Y+6	; 0x06
    2036:	9a 83       	std	Y+2, r25	; 0x02
    2038:	89 83       	std	Y+1, r24	; 0x01
    203a:	89 81       	ldd	r24, Y+1	; 0x01
    203c:	9a 81       	ldd	r25, Y+2	; 0x02
    203e:	01 97       	sbiw	r24, 0x01	; 1
    2040:	f1 f7       	brne	.-4      	; 0x203e <twoInTwoEquation+0x1bc>
    2042:	9a 83       	std	Y+2, r25	; 0x02
    2044:	89 83       	std	Y+1, r24	; 0x01
				}
			}
			_delay_ms(500);
		}
		while (key != '=');
    2046:	8a 89       	ldd	r24, Y+18	; 0x12
    2048:	8d 33       	cpi	r24, 0x3D	; 61
    204a:	09 f0       	breq	.+2      	; 0x204e <twoInTwoEquation+0x1cc>
    204c:	60 cf       	rjmp	.-320    	; 0x1f0e <twoInTwoEquation+0x8c>

		switch (i){
    204e:	8b 89       	ldd	r24, Y+19	; 0x13
    2050:	a8 2f       	mov	r26, r24
    2052:	b0 e0       	ldi	r27, 0x00	; 0
    2054:	24 96       	adiw	r28, 0x04	; 4
    2056:	bf af       	std	Y+63, r27	; 0x3f
    2058:	ae af       	std	Y+62, r26	; 0x3e
    205a:	24 97       	sbiw	r28, 0x04	; 4
    205c:	24 96       	adiw	r28, 0x04	; 4
    205e:	2e ad       	ldd	r18, Y+62	; 0x3e
    2060:	3f ad       	ldd	r19, Y+63	; 0x3f
    2062:	24 97       	sbiw	r28, 0x04	; 4
    2064:	22 30       	cpi	r18, 0x02	; 2
    2066:	31 05       	cpc	r19, r1
    2068:	09 f4       	brne	.+2      	; 0x206c <twoInTwoEquation+0x1ea>
    206a:	7f c0       	rjmp	.+254    	; 0x216a <twoInTwoEquation+0x2e8>
    206c:	24 96       	adiw	r28, 0x04	; 4
    206e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2070:	9f ad       	ldd	r25, Y+63	; 0x3f
    2072:	24 97       	sbiw	r28, 0x04	; 4
    2074:	83 30       	cpi	r24, 0x03	; 3
    2076:	91 05       	cpc	r25, r1
    2078:	7c f4       	brge	.+30     	; 0x2098 <twoInTwoEquation+0x216>
    207a:	24 96       	adiw	r28, 0x04	; 4
    207c:	ae ad       	ldd	r26, Y+62	; 0x3e
    207e:	bf ad       	ldd	r27, Y+63	; 0x3f
    2080:	24 97       	sbiw	r28, 0x04	; 4
    2082:	10 97       	sbiw	r26, 0x00	; 0
    2084:	11 f1       	breq	.+68     	; 0x20ca <twoInTwoEquation+0x248>
    2086:	24 96       	adiw	r28, 0x04	; 4
    2088:	2e ad       	ldd	r18, Y+62	; 0x3e
    208a:	3f ad       	ldd	r19, Y+63	; 0x3f
    208c:	24 97       	sbiw	r28, 0x04	; 4
    208e:	21 30       	cpi	r18, 0x01	; 1
    2090:	31 05       	cpc	r19, r1
    2092:	09 f4       	brne	.+2      	; 0x2096 <twoInTwoEquation+0x214>
    2094:	42 c0       	rjmp	.+132    	; 0x211a <twoInTwoEquation+0x298>
    2096:	06 c1       	rjmp	.+524    	; 0x22a4 <twoInTwoEquation+0x422>
    2098:	24 96       	adiw	r28, 0x04	; 4
    209a:	8e ad       	ldd	r24, Y+62	; 0x3e
    209c:	9f ad       	ldd	r25, Y+63	; 0x3f
    209e:	24 97       	sbiw	r28, 0x04	; 4
    20a0:	84 30       	cpi	r24, 0x04	; 4
    20a2:	91 05       	cpc	r25, r1
    20a4:	09 f4       	brne	.+2      	; 0x20a8 <twoInTwoEquation+0x226>
    20a6:	b1 c0       	rjmp	.+354    	; 0x220a <twoInTwoEquation+0x388>
    20a8:	24 96       	adiw	r28, 0x04	; 4
    20aa:	ae ad       	ldd	r26, Y+62	; 0x3e
    20ac:	bf ad       	ldd	r27, Y+63	; 0x3f
    20ae:	24 97       	sbiw	r28, 0x04	; 4
    20b0:	a4 30       	cpi	r26, 0x04	; 4
    20b2:	b1 05       	cpc	r27, r1
    20b4:	0c f4       	brge	.+2      	; 0x20b8 <twoInTwoEquation+0x236>
    20b6:	81 c0       	rjmp	.+258    	; 0x21ba <twoInTwoEquation+0x338>
    20b8:	24 96       	adiw	r28, 0x04	; 4
    20ba:	2e ad       	ldd	r18, Y+62	; 0x3e
    20bc:	3f ad       	ldd	r19, Y+63	; 0x3f
    20be:	24 97       	sbiw	r28, 0x04	; 4
    20c0:	25 30       	cpi	r18, 0x05	; 5
    20c2:	31 05       	cpc	r19, r1
    20c4:	09 f4       	brne	.+2      	; 0x20c8 <twoInTwoEquation+0x246>
    20c6:	c8 c0       	rjmp	.+400    	; 0x2258 <twoInTwoEquation+0x3d6>
    20c8:	ed c0       	rjmp	.+474    	; 0x22a4 <twoInTwoEquation+0x422>
		case 0:
			num[numCounter] = '\0';
    20ca:	89 89       	ldd	r24, Y+17	; 0x11
    20cc:	28 2f       	mov	r18, r24
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	ce 01       	movw	r24, r28
    20d2:	c8 96       	adiw	r24, 0x38	; 56
    20d4:	fc 01       	movw	r30, r24
    20d6:	e2 0f       	add	r30, r18
    20d8:	f3 1f       	adc	r31, r19
    20da:	10 82       	st	Z, r1
			numCounter = 0;
    20dc:	19 8a       	std	Y+17, r1	; 0x11
			a1 = atol(num);
    20de:	ce 01       	movw	r24, r28
    20e0:	c8 96       	adiw	r24, 0x38	; 56
    20e2:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <atol>
    20e6:	dc 01       	movw	r26, r24
    20e8:	cb 01       	movw	r24, r22
    20ea:	bc 01       	movw	r22, r24
    20ec:	cd 01       	movw	r24, r26
    20ee:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    20f2:	dc 01       	movw	r26, r24
    20f4:	cb 01       	movw	r24, r22
    20f6:	8c ab       	std	Y+52, r24	; 0x34
    20f8:	9d ab       	std	Y+53, r25	; 0x35
    20fa:	ae ab       	std	Y+54, r26	; 0x36
    20fc:	bf ab       	std	Y+55, r27	; 0x37
			if (sign == 45){
    20fe:	88 89       	ldd	r24, Y+16	; 0x10
    2100:	8d 32       	cpi	r24, 0x2D	; 45
    2102:	09 f0       	breq	.+2      	; 0x2106 <twoInTwoEquation+0x284>
    2104:	cf c0       	rjmp	.+414    	; 0x22a4 <twoInTwoEquation+0x422>
				a1 *= -1;
    2106:	8c a9       	ldd	r24, Y+52	; 0x34
    2108:	9d a9       	ldd	r25, Y+53	; 0x35
    210a:	ae a9       	ldd	r26, Y+54	; 0x36
    210c:	bf a9       	ldd	r27, Y+55	; 0x37
    210e:	b0 58       	subi	r27, 0x80	; 128
    2110:	8c ab       	std	Y+52, r24	; 0x34
    2112:	9d ab       	std	Y+53, r25	; 0x35
    2114:	ae ab       	std	Y+54, r26	; 0x36
    2116:	bf ab       	std	Y+55, r27	; 0x37
    2118:	c5 c0       	rjmp	.+394    	; 0x22a4 <twoInTwoEquation+0x422>
			}

			break;
		case 1:
			num[numCounter] = '\0';
    211a:	89 89       	ldd	r24, Y+17	; 0x11
    211c:	28 2f       	mov	r18, r24
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	ce 01       	movw	r24, r28
    2122:	c8 96       	adiw	r24, 0x38	; 56
    2124:	fc 01       	movw	r30, r24
    2126:	e2 0f       	add	r30, r18
    2128:	f3 1f       	adc	r31, r19
    212a:	10 82       	st	Z, r1
			numCounter = 0;
    212c:	19 8a       	std	Y+17, r1	; 0x11
			b1 = atol(num);
    212e:	ce 01       	movw	r24, r28
    2130:	c8 96       	adiw	r24, 0x38	; 56
    2132:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <atol>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	bc 01       	movw	r22, r24
    213c:	cd 01       	movw	r24, r26
    213e:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    2142:	dc 01       	movw	r26, r24
    2144:	cb 01       	movw	r24, r22
    2146:	88 ab       	std	Y+48, r24	; 0x30
    2148:	99 ab       	std	Y+49, r25	; 0x31
    214a:	aa ab       	std	Y+50, r26	; 0x32
    214c:	bb ab       	std	Y+51, r27	; 0x33
			if (sign == 45){
    214e:	88 89       	ldd	r24, Y+16	; 0x10
    2150:	8d 32       	cpi	r24, 0x2D	; 45
    2152:	09 f0       	breq	.+2      	; 0x2156 <twoInTwoEquation+0x2d4>
    2154:	a7 c0       	rjmp	.+334    	; 0x22a4 <twoInTwoEquation+0x422>
				b1 *= -1;
    2156:	88 a9       	ldd	r24, Y+48	; 0x30
    2158:	99 a9       	ldd	r25, Y+49	; 0x31
    215a:	aa a9       	ldd	r26, Y+50	; 0x32
    215c:	bb a9       	ldd	r27, Y+51	; 0x33
    215e:	b0 58       	subi	r27, 0x80	; 128
    2160:	88 ab       	std	Y+48, r24	; 0x30
    2162:	99 ab       	std	Y+49, r25	; 0x31
    2164:	aa ab       	std	Y+50, r26	; 0x32
    2166:	bb ab       	std	Y+51, r27	; 0x33
    2168:	9d c0       	rjmp	.+314    	; 0x22a4 <twoInTwoEquation+0x422>
			}

			break;
		case 2:
			num[numCounter] = '\0';
    216a:	89 89       	ldd	r24, Y+17	; 0x11
    216c:	28 2f       	mov	r18, r24
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	ce 01       	movw	r24, r28
    2172:	c8 96       	adiw	r24, 0x38	; 56
    2174:	fc 01       	movw	r30, r24
    2176:	e2 0f       	add	r30, r18
    2178:	f3 1f       	adc	r31, r19
    217a:	10 82       	st	Z, r1
			numCounter = 0;
    217c:	19 8a       	std	Y+17, r1	; 0x11
			c1 = atol(num);
    217e:	ce 01       	movw	r24, r28
    2180:	c8 96       	adiw	r24, 0x38	; 56
    2182:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <atol>
    2186:	dc 01       	movw	r26, r24
    2188:	cb 01       	movw	r24, r22
    218a:	bc 01       	movw	r22, r24
    218c:	cd 01       	movw	r24, r26
    218e:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    2192:	dc 01       	movw	r26, r24
    2194:	cb 01       	movw	r24, r22
    2196:	8c a7       	std	Y+44, r24	; 0x2c
    2198:	9d a7       	std	Y+45, r25	; 0x2d
    219a:	ae a7       	std	Y+46, r26	; 0x2e
    219c:	bf a7       	std	Y+47, r27	; 0x2f
			if (sign == 45){
    219e:	88 89       	ldd	r24, Y+16	; 0x10
    21a0:	8d 32       	cpi	r24, 0x2D	; 45
    21a2:	09 f0       	breq	.+2      	; 0x21a6 <twoInTwoEquation+0x324>
    21a4:	7f c0       	rjmp	.+254    	; 0x22a4 <twoInTwoEquation+0x422>
				c1 *= -1;
    21a6:	8c a5       	ldd	r24, Y+44	; 0x2c
    21a8:	9d a5       	ldd	r25, Y+45	; 0x2d
    21aa:	ae a5       	ldd	r26, Y+46	; 0x2e
    21ac:	bf a5       	ldd	r27, Y+47	; 0x2f
    21ae:	b0 58       	subi	r27, 0x80	; 128
    21b0:	8c a7       	std	Y+44, r24	; 0x2c
    21b2:	9d a7       	std	Y+45, r25	; 0x2d
    21b4:	ae a7       	std	Y+46, r26	; 0x2e
    21b6:	bf a7       	std	Y+47, r27	; 0x2f
    21b8:	75 c0       	rjmp	.+234    	; 0x22a4 <twoInTwoEquation+0x422>
			}

			break;
		case 3:
			num[numCounter] = '\0';
    21ba:	89 89       	ldd	r24, Y+17	; 0x11
    21bc:	28 2f       	mov	r18, r24
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	ce 01       	movw	r24, r28
    21c2:	c8 96       	adiw	r24, 0x38	; 56
    21c4:	fc 01       	movw	r30, r24
    21c6:	e2 0f       	add	r30, r18
    21c8:	f3 1f       	adc	r31, r19
    21ca:	10 82       	st	Z, r1
			numCounter = 0;
    21cc:	19 8a       	std	Y+17, r1	; 0x11
			a2 = atol(num);
    21ce:	ce 01       	movw	r24, r28
    21d0:	c8 96       	adiw	r24, 0x38	; 56
    21d2:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <atol>
    21d6:	dc 01       	movw	r26, r24
    21d8:	cb 01       	movw	r24, r22
    21da:	bc 01       	movw	r22, r24
    21dc:	cd 01       	movw	r24, r26
    21de:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    21e2:	dc 01       	movw	r26, r24
    21e4:	cb 01       	movw	r24, r22
    21e6:	88 a7       	std	Y+40, r24	; 0x28
    21e8:	99 a7       	std	Y+41, r25	; 0x29
    21ea:	aa a7       	std	Y+42, r26	; 0x2a
    21ec:	bb a7       	std	Y+43, r27	; 0x2b
			if (sign == 45){
    21ee:	88 89       	ldd	r24, Y+16	; 0x10
    21f0:	8d 32       	cpi	r24, 0x2D	; 45
    21f2:	09 f0       	breq	.+2      	; 0x21f6 <twoInTwoEquation+0x374>
    21f4:	57 c0       	rjmp	.+174    	; 0x22a4 <twoInTwoEquation+0x422>
				a2 *= -1;
    21f6:	88 a5       	ldd	r24, Y+40	; 0x28
    21f8:	99 a5       	ldd	r25, Y+41	; 0x29
    21fa:	aa a5       	ldd	r26, Y+42	; 0x2a
    21fc:	bb a5       	ldd	r27, Y+43	; 0x2b
    21fe:	b0 58       	subi	r27, 0x80	; 128
    2200:	88 a7       	std	Y+40, r24	; 0x28
    2202:	99 a7       	std	Y+41, r25	; 0x29
    2204:	aa a7       	std	Y+42, r26	; 0x2a
    2206:	bb a7       	std	Y+43, r27	; 0x2b
    2208:	4d c0       	rjmp	.+154    	; 0x22a4 <twoInTwoEquation+0x422>
			}

			break;
		case 4:
			num[numCounter] = '\0';
    220a:	89 89       	ldd	r24, Y+17	; 0x11
    220c:	28 2f       	mov	r18, r24
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	ce 01       	movw	r24, r28
    2212:	c8 96       	adiw	r24, 0x38	; 56
    2214:	fc 01       	movw	r30, r24
    2216:	e2 0f       	add	r30, r18
    2218:	f3 1f       	adc	r31, r19
    221a:	10 82       	st	Z, r1
			numCounter = 0;
    221c:	19 8a       	std	Y+17, r1	; 0x11
			b2 = atol(num);
    221e:	ce 01       	movw	r24, r28
    2220:	c8 96       	adiw	r24, 0x38	; 56
    2222:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <atol>
    2226:	dc 01       	movw	r26, r24
    2228:	cb 01       	movw	r24, r22
    222a:	bc 01       	movw	r22, r24
    222c:	cd 01       	movw	r24, r26
    222e:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    2232:	dc 01       	movw	r26, r24
    2234:	cb 01       	movw	r24, r22
    2236:	8c a3       	std	Y+36, r24	; 0x24
    2238:	9d a3       	std	Y+37, r25	; 0x25
    223a:	ae a3       	std	Y+38, r26	; 0x26
    223c:	bf a3       	std	Y+39, r27	; 0x27
			if (sign == 45){
    223e:	88 89       	ldd	r24, Y+16	; 0x10
    2240:	8d 32       	cpi	r24, 0x2D	; 45
    2242:	81 f5       	brne	.+96     	; 0x22a4 <twoInTwoEquation+0x422>
				b2 *= -1;
    2244:	8c a1       	ldd	r24, Y+36	; 0x24
    2246:	9d a1       	ldd	r25, Y+37	; 0x25
    2248:	ae a1       	ldd	r26, Y+38	; 0x26
    224a:	bf a1       	ldd	r27, Y+39	; 0x27
    224c:	b0 58       	subi	r27, 0x80	; 128
    224e:	8c a3       	std	Y+36, r24	; 0x24
    2250:	9d a3       	std	Y+37, r25	; 0x25
    2252:	ae a3       	std	Y+38, r26	; 0x26
    2254:	bf a3       	std	Y+39, r27	; 0x27
    2256:	26 c0       	rjmp	.+76     	; 0x22a4 <twoInTwoEquation+0x422>
			}

			break;
		case 5:
			num[numCounter] = '\0';
    2258:	89 89       	ldd	r24, Y+17	; 0x11
    225a:	28 2f       	mov	r18, r24
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	ce 01       	movw	r24, r28
    2260:	c8 96       	adiw	r24, 0x38	; 56
    2262:	fc 01       	movw	r30, r24
    2264:	e2 0f       	add	r30, r18
    2266:	f3 1f       	adc	r31, r19
    2268:	10 82       	st	Z, r1
			numCounter = 0;
    226a:	19 8a       	std	Y+17, r1	; 0x11
			c2 = atol(num);
    226c:	ce 01       	movw	r24, r28
    226e:	c8 96       	adiw	r24, 0x38	; 56
    2270:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <atol>
    2274:	dc 01       	movw	r26, r24
    2276:	cb 01       	movw	r24, r22
    2278:	bc 01       	movw	r22, r24
    227a:	cd 01       	movw	r24, r26
    227c:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    2280:	dc 01       	movw	r26, r24
    2282:	cb 01       	movw	r24, r22
    2284:	88 a3       	std	Y+32, r24	; 0x20
    2286:	99 a3       	std	Y+33, r25	; 0x21
    2288:	aa a3       	std	Y+34, r26	; 0x22
    228a:	bb a3       	std	Y+35, r27	; 0x23
			if (sign == 45){
    228c:	88 89       	ldd	r24, Y+16	; 0x10
    228e:	8d 32       	cpi	r24, 0x2D	; 45
    2290:	49 f4       	brne	.+18     	; 0x22a4 <twoInTwoEquation+0x422>
				c2 *= -1;
    2292:	88 a1       	ldd	r24, Y+32	; 0x20
    2294:	99 a1       	ldd	r25, Y+33	; 0x21
    2296:	aa a1       	ldd	r26, Y+34	; 0x22
    2298:	bb a1       	ldd	r27, Y+35	; 0x23
    229a:	b0 58       	subi	r27, 0x80	; 128
    229c:	88 a3       	std	Y+32, r24	; 0x20
    229e:	99 a3       	std	Y+33, r25	; 0x21
    22a0:	aa a3       	std	Y+34, r26	; 0x22
    22a2:	bb a3       	std	Y+35, r27	; 0x23
	Key_Type type;

	char num[10] = {'\0'};

	LCD_clearScreen ();
	for (i = 0; i < 6; i++){
    22a4:	8b 89       	ldd	r24, Y+19	; 0x13
    22a6:	8f 5f       	subi	r24, 0xFF	; 255
    22a8:	8b 8b       	std	Y+19, r24	; 0x13
    22aa:	8b 89       	ldd	r24, Y+19	; 0x13
    22ac:	86 30       	cpi	r24, 0x06	; 6
    22ae:	08 f4       	brcc	.+2      	; 0x22b2 <twoInTwoEquation+0x430>
    22b0:	06 ce       	rjmp	.-1012   	; 0x1ebe <twoInTwoEquation+0x3c>
			break;
		}

	}

	x_r = (float)(a1 / a2);
    22b2:	6c a9       	ldd	r22, Y+52	; 0x34
    22b4:	7d a9       	ldd	r23, Y+53	; 0x35
    22b6:	8e a9       	ldd	r24, Y+54	; 0x36
    22b8:	9f a9       	ldd	r25, Y+55	; 0x37
    22ba:	28 a5       	ldd	r18, Y+40	; 0x28
    22bc:	39 a5       	ldd	r19, Y+41	; 0x29
    22be:	4a a5       	ldd	r20, Y+42	; 0x2a
    22c0:	5b a5       	ldd	r21, Y+43	; 0x2b
    22c2:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    22c6:	dc 01       	movw	r26, r24
    22c8:	cb 01       	movw	r24, r22
    22ca:	8c 8b       	std	Y+20, r24	; 0x14
    22cc:	9d 8b       	std	Y+21, r25	; 0x15
    22ce:	ae 8b       	std	Y+22, r26	; 0x16
    22d0:	bf 8b       	std	Y+23, r27	; 0x17
	y = (float)(c1 - x_r * c2) / (b1 - x_r * b2);
    22d2:	6c 89       	ldd	r22, Y+20	; 0x14
    22d4:	7d 89       	ldd	r23, Y+21	; 0x15
    22d6:	8e 89       	ldd	r24, Y+22	; 0x16
    22d8:	9f 89       	ldd	r25, Y+23	; 0x17
    22da:	28 a1       	ldd	r18, Y+32	; 0x20
    22dc:	39 a1       	ldd	r19, Y+33	; 0x21
    22de:	4a a1       	ldd	r20, Y+34	; 0x22
    22e0:	5b a1       	ldd	r21, Y+35	; 0x23
    22e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22e6:	dc 01       	movw	r26, r24
    22e8:	cb 01       	movw	r24, r22
    22ea:	9c 01       	movw	r18, r24
    22ec:	ad 01       	movw	r20, r26
    22ee:	6c a5       	ldd	r22, Y+44	; 0x2c
    22f0:	7d a5       	ldd	r23, Y+45	; 0x2d
    22f2:	8e a5       	ldd	r24, Y+46	; 0x2e
    22f4:	9f a5       	ldd	r25, Y+47	; 0x2f
    22f6:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    22fa:	dc 01       	movw	r26, r24
    22fc:	cb 01       	movw	r24, r22
    22fe:	7c 01       	movw	r14, r24
    2300:	8d 01       	movw	r16, r26
    2302:	6c 89       	ldd	r22, Y+20	; 0x14
    2304:	7d 89       	ldd	r23, Y+21	; 0x15
    2306:	8e 89       	ldd	r24, Y+22	; 0x16
    2308:	9f 89       	ldd	r25, Y+23	; 0x17
    230a:	2c a1       	ldd	r18, Y+36	; 0x24
    230c:	3d a1       	ldd	r19, Y+37	; 0x25
    230e:	4e a1       	ldd	r20, Y+38	; 0x26
    2310:	5f a1       	ldd	r21, Y+39	; 0x27
    2312:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2316:	dc 01       	movw	r26, r24
    2318:	cb 01       	movw	r24, r22
    231a:	9c 01       	movw	r18, r24
    231c:	ad 01       	movw	r20, r26
    231e:	68 a9       	ldd	r22, Y+48	; 0x30
    2320:	79 a9       	ldd	r23, Y+49	; 0x31
    2322:	8a a9       	ldd	r24, Y+50	; 0x32
    2324:	9b a9       	ldd	r25, Y+51	; 0x33
    2326:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    232a:	dc 01       	movw	r26, r24
    232c:	cb 01       	movw	r24, r22
    232e:	9c 01       	movw	r18, r24
    2330:	ad 01       	movw	r20, r26
    2332:	c8 01       	movw	r24, r16
    2334:	b7 01       	movw	r22, r14
    2336:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    233a:	dc 01       	movw	r26, r24
    233c:	cb 01       	movw	r24, r22
    233e:	88 8f       	std	Y+24, r24	; 0x18
    2340:	99 8f       	std	Y+25, r25	; 0x19
    2342:	aa 8f       	std	Y+26, r26	; 0x1a
    2344:	bb 8f       	std	Y+27, r27	; 0x1b
	x = (float)(c1 - b1 * y) / a1;
    2346:	68 a9       	ldd	r22, Y+48	; 0x30
    2348:	79 a9       	ldd	r23, Y+49	; 0x31
    234a:	8a a9       	ldd	r24, Y+50	; 0x32
    234c:	9b a9       	ldd	r25, Y+51	; 0x33
    234e:	28 8d       	ldd	r18, Y+24	; 0x18
    2350:	39 8d       	ldd	r19, Y+25	; 0x19
    2352:	4a 8d       	ldd	r20, Y+26	; 0x1a
    2354:	5b 8d       	ldd	r21, Y+27	; 0x1b
    2356:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    235a:	dc 01       	movw	r26, r24
    235c:	cb 01       	movw	r24, r22
    235e:	9c 01       	movw	r18, r24
    2360:	ad 01       	movw	r20, r26
    2362:	6c a5       	ldd	r22, Y+44	; 0x2c
    2364:	7d a5       	ldd	r23, Y+45	; 0x2d
    2366:	8e a5       	ldd	r24, Y+46	; 0x2e
    2368:	9f a5       	ldd	r25, Y+47	; 0x2f
    236a:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	bc 01       	movw	r22, r24
    2374:	cd 01       	movw	r24, r26
    2376:	2c a9       	ldd	r18, Y+52	; 0x34
    2378:	3d a9       	ldd	r19, Y+53	; 0x35
    237a:	4e a9       	ldd	r20, Y+54	; 0x36
    237c:	5f a9       	ldd	r21, Y+55	; 0x37
    237e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2382:	dc 01       	movw	r26, r24
    2384:	cb 01       	movw	r24, r22
    2386:	8c 8f       	std	Y+28, r24	; 0x1c
    2388:	9d 8f       	std	Y+29, r25	; 0x1d
    238a:	ae 8f       	std	Y+30, r26	; 0x1e
    238c:	bf 8f       	std	Y+31, r27	; 0x1f

	LCD_clearScreen();
    238e:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <LCD_clearScreen>
	LCD_displayString("X=");
    2392:	8d e2       	ldi	r24, 0x2D	; 45
    2394:	91 e0       	ldi	r25, 0x01	; 1
    2396:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <LCD_displayString>
	LCD_intgerToString(x);
    239a:	6c 8d       	ldd	r22, Y+28	; 0x1c
    239c:	7d 8d       	ldd	r23, Y+29	; 0x1d
    239e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23a0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    23a2:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
    23a6:	dc 01       	movw	r26, r24
    23a8:	cb 01       	movw	r24, r22
    23aa:	0e 94 8e 1f 	call	0x3f1c	; 0x3f1c <LCD_intgerToString>
	LCD_moveCursor(1, 0);
    23ae:	81 e0       	ldi	r24, 0x01	; 1
    23b0:	60 e0       	ldi	r22, 0x00	; 0
    23b2:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <LCD_moveCursor>
	LCD_displayString("Y=");
    23b6:	80 e3       	ldi	r24, 0x30	; 48
    23b8:	91 e0       	ldi	r25, 0x01	; 1
    23ba:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <LCD_displayString>
	LCD_intgerToString(y);
    23be:	68 8d       	ldd	r22, Y+24	; 0x18
    23c0:	79 8d       	ldd	r23, Y+25	; 0x19
    23c2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    23c4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    23c6:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
    23ca:	dc 01       	movw	r26, r24
    23cc:	cb 01       	movw	r24, r22
    23ce:	0e 94 8e 1f 	call	0x3f1c	; 0x3f1c <LCD_intgerToString>

	do {
		key = KEYPAD_getPressedKey();
    23d2:	0e 94 74 19 	call	0x32e8	; 0x32e8 <KEYPAD_getPressedKey>
    23d6:	8a 8b       	std	Y+18, r24	; 0x12
	}
	while (key != ON_KEY);
    23d8:	8a 89       	ldd	r24, Y+18	; 0x12
    23da:	8d 30       	cpi	r24, 0x0D	; 13
    23dc:	d1 f7       	brne	.-12     	; 0x23d2 <twoInTwoEquation+0x550>
}
    23de:	cd 5b       	subi	r28, 0xBD	; 189
    23e0:	df 4f       	sbci	r29, 0xFF	; 255
    23e2:	0f b6       	in	r0, 0x3f	; 63
    23e4:	f8 94       	cli
    23e6:	de bf       	out	0x3e, r29	; 62
    23e8:	0f be       	out	0x3f, r0	; 63
    23ea:	cd bf       	out	0x3d, r28	; 61
    23ec:	cf 91       	pop	r28
    23ee:	df 91       	pop	r29
    23f0:	1f 91       	pop	r17
    23f2:	0f 91       	pop	r16
    23f4:	ff 90       	pop	r15
    23f6:	ef 90       	pop	r14
    23f8:	08 95       	ret

000023fa <threeInThreeEquation>:

void threeInThreeEquation(void){
    23fa:	0f 93       	push	r16
    23fc:	1f 93       	push	r17
    23fe:	df 93       	push	r29
    2400:	cf 93       	push	r28
    2402:	cd b7       	in	r28, 0x3d	; 61
    2404:	de b7       	in	r29, 0x3e	; 62
    2406:	c5 57       	subi	r28, 0x75	; 117
    2408:	d0 40       	sbci	r29, 0x00	; 0
    240a:	0f b6       	in	r0, 0x3f	; 63
    240c:	f8 94       	cli
    240e:	de bf       	out	0x3e, r29	; 62
    2410:	0f be       	out	0x3f, r0	; 63
    2412:	cd bf       	out	0x3d, r28	; 61
	long double a1, b1, c1, d1, a2, b2, c2, d2, a3, b3, c3, d3, x, y, z, A1, B1, C1, A2, B2, C2, x_r;
	uint8 i, key, numCounter = 0, sign ='+';
    2414:	19 8a       	std	Y+17, r1	; 0x11
    2416:	8b e2       	ldi	r24, 0x2B	; 43
    2418:	88 8b       	std	Y+16, r24	; 0x10
	Key_Type type;

	char num[10] = {'\0'};
    241a:	ce 01       	movw	r24, r28
    241c:	84 59       	subi	r24, 0x94	; 148
    241e:	9f 4f       	sbci	r25, 0xFF	; 255
    2420:	2a e0       	ldi	r18, 0x0A	; 10
    2422:	fc 01       	movw	r30, r24
    2424:	df 01       	movw	r26, r30
    2426:	82 2f       	mov	r24, r18
    2428:	1d 92       	st	X+, r1
    242a:	8a 95       	dec	r24
    242c:	e9 f7       	brne	.-6      	; 0x2428 <threeInThreeEquation+0x2e>

	LCD_clearScreen ();
    242e:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <LCD_clearScreen>
	for (i = 0; i < 12; i++){
    2432:	1b 8a       	std	Y+19, r1	; 0x13
    2434:	40 c3       	rjmp	.+1664   	; 0x2ab6 <threeInThreeEquation+0x6bc>
		sign = '+';
    2436:	8b e2       	ldi	r24, 0x2B	; 43
    2438:	88 8b       	std	Y+16, r24	; 0x10

		if (i == 4 || i == 8){
    243a:	8b 89       	ldd	r24, Y+19	; 0x13
    243c:	84 30       	cpi	r24, 0x04	; 4
    243e:	19 f0       	breq	.+6      	; 0x2446 <threeInThreeEquation+0x4c>
    2440:	8b 89       	ldd	r24, Y+19	; 0x13
    2442:	88 30       	cpi	r24, 0x08	; 8
    2444:	11 f4       	brne	.+4      	; 0x244a <threeInThreeEquation+0x50>
			LCD_clearScreen();
    2446:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <LCD_clearScreen>
		}

		if (i >= 8){
    244a:	8b 89       	ldd	r24, Y+19	; 0x13
    244c:	88 30       	cpi	r24, 0x08	; 8
    244e:	80 f0       	brcs	.+32     	; 0x2470 <threeInThreeEquation+0x76>
			LCD_moveCursor(i-8,0);
    2450:	8b 89       	ldd	r24, Y+19	; 0x13
    2452:	88 50       	subi	r24, 0x08	; 8
    2454:	60 e0       	ldi	r22, 0x00	; 0
    2456:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <LCD_moveCursor>
			LCD_displayCharacter('a' + i - 8);
    245a:	8b 89       	ldd	r24, Y+19	; 0x13
    245c:	87 5a       	subi	r24, 0xA7	; 167
    245e:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <LCD_displayCharacter>
			LCD_displayCharacter('3');
    2462:	83 e3       	ldi	r24, 0x33	; 51
    2464:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <LCD_displayCharacter>
			LCD_displayCharacter(':');
    2468:	8a e3       	ldi	r24, 0x3A	; 58
    246a:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <LCD_displayCharacter>
    246e:	21 c0       	rjmp	.+66     	; 0x24b2 <threeInThreeEquation+0xb8>
		}
		else if (i >= 4){
    2470:	8b 89       	ldd	r24, Y+19	; 0x13
    2472:	84 30       	cpi	r24, 0x04	; 4
    2474:	80 f0       	brcs	.+32     	; 0x2496 <threeInThreeEquation+0x9c>
			LCD_moveCursor(i-4,0);
    2476:	8b 89       	ldd	r24, Y+19	; 0x13
    2478:	84 50       	subi	r24, 0x04	; 4
    247a:	60 e0       	ldi	r22, 0x00	; 0
    247c:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <LCD_moveCursor>
			LCD_displayCharacter('a' + i - 4);
    2480:	8b 89       	ldd	r24, Y+19	; 0x13
    2482:	83 5a       	subi	r24, 0xA3	; 163
    2484:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <LCD_displayCharacter>
			LCD_displayCharacter('2');
    2488:	82 e3       	ldi	r24, 0x32	; 50
    248a:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <LCD_displayCharacter>
			LCD_displayCharacter(':');
    248e:	8a e3       	ldi	r24, 0x3A	; 58
    2490:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <LCD_displayCharacter>
    2494:	0e c0       	rjmp	.+28     	; 0x24b2 <threeInThreeEquation+0xb8>
		}
		else {
			LCD_moveCursor(i,0);
    2496:	8b 89       	ldd	r24, Y+19	; 0x13
    2498:	60 e0       	ldi	r22, 0x00	; 0
    249a:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <LCD_moveCursor>
			LCD_displayCharacter('a' + i);
    249e:	8b 89       	ldd	r24, Y+19	; 0x13
    24a0:	8f 59       	subi	r24, 0x9F	; 159
    24a2:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <LCD_displayCharacter>
			LCD_displayCharacter('1');
    24a6:	81 e3       	ldi	r24, 0x31	; 49
    24a8:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <LCD_displayCharacter>
			LCD_displayCharacter(':');
    24ac:	8a e3       	ldi	r24, 0x3A	; 58
    24ae:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <LCD_displayCharacter>
		}


		do {
			key = KEYPAD_getPressedKey();
    24b2:	0e 94 74 19 	call	0x32e8	; 0x32e8 <KEYPAD_getPressedKey>
    24b6:	8a 8b       	std	Y+18, r24	; 0x12
			type = getKeyType(key);
    24b8:	8a 89       	ldd	r24, Y+18	; 0x12
    24ba:	0e 94 87 0c 	call	0x190e	; 0x190e <getKeyType>
    24be:	8f 87       	std	Y+15, r24	; 0x0f

			if (key == ON_KEY){
    24c0:	8a 89       	ldd	r24, Y+18	; 0x12
    24c2:	8d 30       	cpi	r24, 0x0D	; 13
    24c4:	09 f4       	brne	.+2      	; 0x24c8 <threeInThreeEquation+0xce>
    24c6:	c6 c3       	rjmp	.+1932   	; 0x2c54 <threeInThreeEquation+0x85a>
				return;
			}

			if (type == NUMBER_KEY){
    24c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    24ca:	88 23       	and	r24, r24
    24cc:	a9 f4       	brne	.+42     	; 0x24f8 <threeInThreeEquation+0xfe>
				LCD_displayCharacter(key+48);
    24ce:	8a 89       	ldd	r24, Y+18	; 0x12
    24d0:	80 5d       	subi	r24, 0xD0	; 208
    24d2:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <LCD_displayCharacter>
				num[numCounter++] = key + 48;
    24d6:	89 89       	ldd	r24, Y+17	; 0x11
    24d8:	28 2f       	mov	r18, r24
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	8a 89       	ldd	r24, Y+18	; 0x12
    24de:	48 2f       	mov	r20, r24
    24e0:	40 5d       	subi	r20, 0xD0	; 208
    24e2:	ce 01       	movw	r24, r28
    24e4:	84 59       	subi	r24, 0x94	; 148
    24e6:	9f 4f       	sbci	r25, 0xFF	; 255
    24e8:	fc 01       	movw	r30, r24
    24ea:	e2 0f       	add	r30, r18
    24ec:	f3 1f       	adc	r31, r19
    24ee:	40 83       	st	Z, r20
    24f0:	89 89       	ldd	r24, Y+17	; 0x11
    24f2:	8f 5f       	subi	r24, 0xFF	; 255
    24f4:	89 8b       	std	Y+17, r24	; 0x11
    24f6:	08 c0       	rjmp	.+16     	; 0x2508 <threeInThreeEquation+0x10e>
			}
			else {
				if (key != '='){
    24f8:	8a 89       	ldd	r24, Y+18	; 0x12
    24fa:	8d 33       	cpi	r24, 0x3D	; 61
    24fc:	29 f0       	breq	.+10     	; 0x2508 <threeInThreeEquation+0x10e>
					LCD_displayCharacter(key);
    24fe:	8a 89       	ldd	r24, Y+18	; 0x12
    2500:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <LCD_displayCharacter>
					sign = key;
    2504:	8a 89       	ldd	r24, Y+18	; 0x12
    2506:	88 8b       	std	Y+16, r24	; 0x10
    2508:	80 e0       	ldi	r24, 0x00	; 0
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	aa ef       	ldi	r26, 0xFA	; 250
    250e:	b3 e4       	ldi	r27, 0x43	; 67
    2510:	8b 87       	std	Y+11, r24	; 0x0b
    2512:	9c 87       	std	Y+12, r25	; 0x0c
    2514:	ad 87       	std	Y+13, r26	; 0x0d
    2516:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2518:	6b 85       	ldd	r22, Y+11	; 0x0b
    251a:	7c 85       	ldd	r23, Y+12	; 0x0c
    251c:	8d 85       	ldd	r24, Y+13	; 0x0d
    251e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2520:	20 e0       	ldi	r18, 0x00	; 0
    2522:	30 e0       	ldi	r19, 0x00	; 0
    2524:	4a e7       	ldi	r20, 0x7A	; 122
    2526:	53 e4       	ldi	r21, 0x43	; 67
    2528:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    252c:	dc 01       	movw	r26, r24
    252e:	cb 01       	movw	r24, r22
    2530:	8f 83       	std	Y+7, r24	; 0x07
    2532:	98 87       	std	Y+8, r25	; 0x08
    2534:	a9 87       	std	Y+9, r26	; 0x09
    2536:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2538:	6f 81       	ldd	r22, Y+7	; 0x07
    253a:	78 85       	ldd	r23, Y+8	; 0x08
    253c:	89 85       	ldd	r24, Y+9	; 0x09
    253e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2540:	20 e0       	ldi	r18, 0x00	; 0
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	40 e8       	ldi	r20, 0x80	; 128
    2546:	5f e3       	ldi	r21, 0x3F	; 63
    2548:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    254c:	88 23       	and	r24, r24
    254e:	2c f4       	brge	.+10     	; 0x255a <threeInThreeEquation+0x160>
		__ticks = 1;
    2550:	81 e0       	ldi	r24, 0x01	; 1
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	9e 83       	std	Y+6, r25	; 0x06
    2556:	8d 83       	std	Y+5, r24	; 0x05
    2558:	3f c0       	rjmp	.+126    	; 0x25d8 <threeInThreeEquation+0x1de>
	else if (__tmp > 65535)
    255a:	6f 81       	ldd	r22, Y+7	; 0x07
    255c:	78 85       	ldd	r23, Y+8	; 0x08
    255e:	89 85       	ldd	r24, Y+9	; 0x09
    2560:	9a 85       	ldd	r25, Y+10	; 0x0a
    2562:	20 e0       	ldi	r18, 0x00	; 0
    2564:	3f ef       	ldi	r19, 0xFF	; 255
    2566:	4f e7       	ldi	r20, 0x7F	; 127
    2568:	57 e4       	ldi	r21, 0x47	; 71
    256a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    256e:	18 16       	cp	r1, r24
    2570:	4c f5       	brge	.+82     	; 0x25c4 <threeInThreeEquation+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2572:	6b 85       	ldd	r22, Y+11	; 0x0b
    2574:	7c 85       	ldd	r23, Y+12	; 0x0c
    2576:	8d 85       	ldd	r24, Y+13	; 0x0d
    2578:	9e 85       	ldd	r25, Y+14	; 0x0e
    257a:	20 e0       	ldi	r18, 0x00	; 0
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	40 e2       	ldi	r20, 0x20	; 32
    2580:	51 e4       	ldi	r21, 0x41	; 65
    2582:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2586:	dc 01       	movw	r26, r24
    2588:	cb 01       	movw	r24, r22
    258a:	bc 01       	movw	r22, r24
    258c:	cd 01       	movw	r24, r26
    258e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2592:	dc 01       	movw	r26, r24
    2594:	cb 01       	movw	r24, r22
    2596:	9e 83       	std	Y+6, r25	; 0x06
    2598:	8d 83       	std	Y+5, r24	; 0x05
    259a:	0f c0       	rjmp	.+30     	; 0x25ba <threeInThreeEquation+0x1c0>
    259c:	89 e1       	ldi	r24, 0x19	; 25
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	9c 83       	std	Y+4, r25	; 0x04
    25a2:	8b 83       	std	Y+3, r24	; 0x03
    25a4:	8b 81       	ldd	r24, Y+3	; 0x03
    25a6:	9c 81       	ldd	r25, Y+4	; 0x04
    25a8:	01 97       	sbiw	r24, 0x01	; 1
    25aa:	f1 f7       	brne	.-4      	; 0x25a8 <threeInThreeEquation+0x1ae>
    25ac:	9c 83       	std	Y+4, r25	; 0x04
    25ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25b0:	8d 81       	ldd	r24, Y+5	; 0x05
    25b2:	9e 81       	ldd	r25, Y+6	; 0x06
    25b4:	01 97       	sbiw	r24, 0x01	; 1
    25b6:	9e 83       	std	Y+6, r25	; 0x06
    25b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ba:	8d 81       	ldd	r24, Y+5	; 0x05
    25bc:	9e 81       	ldd	r25, Y+6	; 0x06
    25be:	00 97       	sbiw	r24, 0x00	; 0
    25c0:	69 f7       	brne	.-38     	; 0x259c <threeInThreeEquation+0x1a2>
    25c2:	14 c0       	rjmp	.+40     	; 0x25ec <threeInThreeEquation+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25c4:	6f 81       	ldd	r22, Y+7	; 0x07
    25c6:	78 85       	ldd	r23, Y+8	; 0x08
    25c8:	89 85       	ldd	r24, Y+9	; 0x09
    25ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    25cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25d0:	dc 01       	movw	r26, r24
    25d2:	cb 01       	movw	r24, r22
    25d4:	9e 83       	std	Y+6, r25	; 0x06
    25d6:	8d 83       	std	Y+5, r24	; 0x05
    25d8:	8d 81       	ldd	r24, Y+5	; 0x05
    25da:	9e 81       	ldd	r25, Y+6	; 0x06
    25dc:	9a 83       	std	Y+2, r25	; 0x02
    25de:	89 83       	std	Y+1, r24	; 0x01
    25e0:	89 81       	ldd	r24, Y+1	; 0x01
    25e2:	9a 81       	ldd	r25, Y+2	; 0x02
    25e4:	01 97       	sbiw	r24, 0x01	; 1
    25e6:	f1 f7       	brne	.-4      	; 0x25e4 <threeInThreeEquation+0x1ea>
    25e8:	9a 83       	std	Y+2, r25	; 0x02
    25ea:	89 83       	std	Y+1, r24	; 0x01
				}
			}
			_delay_ms(500);
		}
		while (key != '=');
    25ec:	8a 89       	ldd	r24, Y+18	; 0x12
    25ee:	8d 33       	cpi	r24, 0x3D	; 61
    25f0:	09 f0       	breq	.+2      	; 0x25f4 <threeInThreeEquation+0x1fa>
    25f2:	5f cf       	rjmp	.-322    	; 0x24b2 <threeInThreeEquation+0xb8>
		if (i == 0){
    25f4:	8b 89       	ldd	r24, Y+19	; 0x13
    25f6:	88 23       	and	r24, r24
    25f8:	09 f4       	brne	.+2      	; 0x25fc <threeInThreeEquation+0x202>
    25fa:	5a c2       	rjmp	.+1204   	; 0x2ab0 <threeInThreeEquation+0x6b6>

		}
		else if (i == 1){
    25fc:	8b 89       	ldd	r24, Y+19	; 0x13
    25fe:	81 30       	cpi	r24, 0x01	; 1
    2600:	a9 f5       	brne	.+106    	; 0x266c <threeInThreeEquation+0x272>
			num[numCounter] = '\0';
    2602:	89 89       	ldd	r24, Y+17	; 0x11
    2604:	28 2f       	mov	r18, r24
    2606:	30 e0       	ldi	r19, 0x00	; 0
    2608:	ce 01       	movw	r24, r28
    260a:	84 59       	subi	r24, 0x94	; 148
    260c:	9f 4f       	sbci	r25, 0xFF	; 255
    260e:	fc 01       	movw	r30, r24
    2610:	e2 0f       	add	r30, r18
    2612:	f3 1f       	adc	r31, r19
    2614:	10 82       	st	Z, r1
			numCounter = 0;
    2616:	19 8a       	std	Y+17, r1	; 0x11
			b1 = atol(num);
    2618:	ce 01       	movw	r24, r28
    261a:	84 59       	subi	r24, 0x94	; 148
    261c:	9f 4f       	sbci	r25, 0xFF	; 255
    261e:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <atol>
    2622:	dc 01       	movw	r26, r24
    2624:	cb 01       	movw	r24, r22
    2626:	8e 01       	movw	r16, r28
    2628:	0c 59       	subi	r16, 0x9C	; 156
    262a:	1f 4f       	sbci	r17, 0xFF	; 255
    262c:	bc 01       	movw	r22, r24
    262e:	cd 01       	movw	r24, r26
    2630:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    2634:	dc 01       	movw	r26, r24
    2636:	cb 01       	movw	r24, r22
    2638:	f8 01       	movw	r30, r16
    263a:	80 83       	st	Z, r24
    263c:	91 83       	std	Z+1, r25	; 0x01
    263e:	a2 83       	std	Z+2, r26	; 0x02
    2640:	b3 83       	std	Z+3, r27	; 0x03
			if (sign == 45){
    2642:	88 89       	ldd	r24, Y+16	; 0x10
    2644:	8d 32       	cpi	r24, 0x2D	; 45
    2646:	09 f0       	breq	.+2      	; 0x264a <threeInThreeEquation+0x250>
    2648:	33 c2       	rjmp	.+1126   	; 0x2ab0 <threeInThreeEquation+0x6b6>
				b1 *= -1;
    264a:	9e 01       	movw	r18, r28
    264c:	2c 59       	subi	r18, 0x9C	; 156
    264e:	3f 4f       	sbci	r19, 0xFF	; 255
    2650:	fe 01       	movw	r30, r28
    2652:	ec 59       	subi	r30, 0x9C	; 156
    2654:	ff 4f       	sbci	r31, 0xFF	; 255
    2656:	80 81       	ld	r24, Z
    2658:	91 81       	ldd	r25, Z+1	; 0x01
    265a:	a2 81       	ldd	r26, Z+2	; 0x02
    265c:	b3 81       	ldd	r27, Z+3	; 0x03
    265e:	b0 58       	subi	r27, 0x80	; 128
    2660:	f9 01       	movw	r30, r18
    2662:	80 83       	st	Z, r24
    2664:	91 83       	std	Z+1, r25	; 0x01
    2666:	a2 83       	std	Z+2, r26	; 0x02
    2668:	b3 83       	std	Z+3, r27	; 0x03
    266a:	22 c2       	rjmp	.+1092   	; 0x2ab0 <threeInThreeEquation+0x6b6>
			}
		}
		else if (i == 2){
    266c:	8b 89       	ldd	r24, Y+19	; 0x13
    266e:	82 30       	cpi	r24, 0x02	; 2
    2670:	a9 f5       	brne	.+106    	; 0x26dc <threeInThreeEquation+0x2e2>
			num[numCounter] = '\0';
    2672:	89 89       	ldd	r24, Y+17	; 0x11
    2674:	28 2f       	mov	r18, r24
    2676:	30 e0       	ldi	r19, 0x00	; 0
    2678:	ce 01       	movw	r24, r28
    267a:	84 59       	subi	r24, 0x94	; 148
    267c:	9f 4f       	sbci	r25, 0xFF	; 255
    267e:	fc 01       	movw	r30, r24
    2680:	e2 0f       	add	r30, r18
    2682:	f3 1f       	adc	r31, r19
    2684:	10 82       	st	Z, r1
			numCounter = 0;
    2686:	19 8a       	std	Y+17, r1	; 0x11
			c1 = atol(num);
    2688:	ce 01       	movw	r24, r28
    268a:	84 59       	subi	r24, 0x94	; 148
    268c:	9f 4f       	sbci	r25, 0xFF	; 255
    268e:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <atol>
    2692:	dc 01       	movw	r26, r24
    2694:	cb 01       	movw	r24, r22
    2696:	8e 01       	movw	r16, r28
    2698:	00 5a       	subi	r16, 0xA0	; 160
    269a:	1f 4f       	sbci	r17, 0xFF	; 255
    269c:	bc 01       	movw	r22, r24
    269e:	cd 01       	movw	r24, r26
    26a0:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    26a4:	dc 01       	movw	r26, r24
    26a6:	cb 01       	movw	r24, r22
    26a8:	f8 01       	movw	r30, r16
    26aa:	80 83       	st	Z, r24
    26ac:	91 83       	std	Z+1, r25	; 0x01
    26ae:	a2 83       	std	Z+2, r26	; 0x02
    26b0:	b3 83       	std	Z+3, r27	; 0x03
			if (sign == 45){
    26b2:	88 89       	ldd	r24, Y+16	; 0x10
    26b4:	8d 32       	cpi	r24, 0x2D	; 45
    26b6:	09 f0       	breq	.+2      	; 0x26ba <threeInThreeEquation+0x2c0>
    26b8:	fb c1       	rjmp	.+1014   	; 0x2ab0 <threeInThreeEquation+0x6b6>
				c1 *= -1;
    26ba:	9e 01       	movw	r18, r28
    26bc:	20 5a       	subi	r18, 0xA0	; 160
    26be:	3f 4f       	sbci	r19, 0xFF	; 255
    26c0:	fe 01       	movw	r30, r28
    26c2:	e0 5a       	subi	r30, 0xA0	; 160
    26c4:	ff 4f       	sbci	r31, 0xFF	; 255
    26c6:	80 81       	ld	r24, Z
    26c8:	91 81       	ldd	r25, Z+1	; 0x01
    26ca:	a2 81       	ldd	r26, Z+2	; 0x02
    26cc:	b3 81       	ldd	r27, Z+3	; 0x03
    26ce:	b0 58       	subi	r27, 0x80	; 128
    26d0:	f9 01       	movw	r30, r18
    26d2:	80 83       	st	Z, r24
    26d4:	91 83       	std	Z+1, r25	; 0x01
    26d6:	a2 83       	std	Z+2, r26	; 0x02
    26d8:	b3 83       	std	Z+3, r27	; 0x03
    26da:	ea c1       	rjmp	.+980    	; 0x2ab0 <threeInThreeEquation+0x6b6>
			}
		}
		else if (i == 3){
    26dc:	8b 89       	ldd	r24, Y+19	; 0x13
    26de:	83 30       	cpi	r24, 0x03	; 3
    26e0:	a9 f5       	brne	.+106    	; 0x274c <threeInThreeEquation+0x352>
			num[numCounter] = '\0';
    26e2:	89 89       	ldd	r24, Y+17	; 0x11
    26e4:	28 2f       	mov	r18, r24
    26e6:	30 e0       	ldi	r19, 0x00	; 0
    26e8:	ce 01       	movw	r24, r28
    26ea:	84 59       	subi	r24, 0x94	; 148
    26ec:	9f 4f       	sbci	r25, 0xFF	; 255
    26ee:	fc 01       	movw	r30, r24
    26f0:	e2 0f       	add	r30, r18
    26f2:	f3 1f       	adc	r31, r19
    26f4:	10 82       	st	Z, r1
			numCounter = 0;
    26f6:	19 8a       	std	Y+17, r1	; 0x11
			d1 = atol(num);
    26f8:	ce 01       	movw	r24, r28
    26fa:	84 59       	subi	r24, 0x94	; 148
    26fc:	9f 4f       	sbci	r25, 0xFF	; 255
    26fe:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <atol>
    2702:	dc 01       	movw	r26, r24
    2704:	cb 01       	movw	r24, r22
    2706:	8e 01       	movw	r16, r28
    2708:	04 5a       	subi	r16, 0xA4	; 164
    270a:	1f 4f       	sbci	r17, 0xFF	; 255
    270c:	bc 01       	movw	r22, r24
    270e:	cd 01       	movw	r24, r26
    2710:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    2714:	dc 01       	movw	r26, r24
    2716:	cb 01       	movw	r24, r22
    2718:	f8 01       	movw	r30, r16
    271a:	80 83       	st	Z, r24
    271c:	91 83       	std	Z+1, r25	; 0x01
    271e:	a2 83       	std	Z+2, r26	; 0x02
    2720:	b3 83       	std	Z+3, r27	; 0x03
			if (sign == 45){
    2722:	88 89       	ldd	r24, Y+16	; 0x10
    2724:	8d 32       	cpi	r24, 0x2D	; 45
    2726:	09 f0       	breq	.+2      	; 0x272a <threeInThreeEquation+0x330>
    2728:	c3 c1       	rjmp	.+902    	; 0x2ab0 <threeInThreeEquation+0x6b6>
				d1 *= -1;
    272a:	9e 01       	movw	r18, r28
    272c:	24 5a       	subi	r18, 0xA4	; 164
    272e:	3f 4f       	sbci	r19, 0xFF	; 255
    2730:	fe 01       	movw	r30, r28
    2732:	e4 5a       	subi	r30, 0xA4	; 164
    2734:	ff 4f       	sbci	r31, 0xFF	; 255
    2736:	80 81       	ld	r24, Z
    2738:	91 81       	ldd	r25, Z+1	; 0x01
    273a:	a2 81       	ldd	r26, Z+2	; 0x02
    273c:	b3 81       	ldd	r27, Z+3	; 0x03
    273e:	b0 58       	subi	r27, 0x80	; 128
    2740:	f9 01       	movw	r30, r18
    2742:	80 83       	st	Z, r24
    2744:	91 83       	std	Z+1, r25	; 0x01
    2746:	a2 83       	std	Z+2, r26	; 0x02
    2748:	b3 83       	std	Z+3, r27	; 0x03
    274a:	b2 c1       	rjmp	.+868    	; 0x2ab0 <threeInThreeEquation+0x6b6>
			}
		}
		else if (i == 4){
    274c:	8b 89       	ldd	r24, Y+19	; 0x13
    274e:	84 30       	cpi	r24, 0x04	; 4
    2750:	a9 f5       	brne	.+106    	; 0x27bc <threeInThreeEquation+0x3c2>
			num[numCounter] = '\0';
    2752:	89 89       	ldd	r24, Y+17	; 0x11
    2754:	28 2f       	mov	r18, r24
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	ce 01       	movw	r24, r28
    275a:	84 59       	subi	r24, 0x94	; 148
    275c:	9f 4f       	sbci	r25, 0xFF	; 255
    275e:	fc 01       	movw	r30, r24
    2760:	e2 0f       	add	r30, r18
    2762:	f3 1f       	adc	r31, r19
    2764:	10 82       	st	Z, r1
			numCounter = 0;
    2766:	19 8a       	std	Y+17, r1	; 0x11
			a2 = atol(num);
    2768:	ce 01       	movw	r24, r28
    276a:	84 59       	subi	r24, 0x94	; 148
    276c:	9f 4f       	sbci	r25, 0xFF	; 255
    276e:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <atol>
    2772:	dc 01       	movw	r26, r24
    2774:	cb 01       	movw	r24, r22
    2776:	8e 01       	movw	r16, r28
    2778:	08 5a       	subi	r16, 0xA8	; 168
    277a:	1f 4f       	sbci	r17, 0xFF	; 255
    277c:	bc 01       	movw	r22, r24
    277e:	cd 01       	movw	r24, r26
    2780:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    2784:	dc 01       	movw	r26, r24
    2786:	cb 01       	movw	r24, r22
    2788:	f8 01       	movw	r30, r16
    278a:	80 83       	st	Z, r24
    278c:	91 83       	std	Z+1, r25	; 0x01
    278e:	a2 83       	std	Z+2, r26	; 0x02
    2790:	b3 83       	std	Z+3, r27	; 0x03
			if (sign == 45){
    2792:	88 89       	ldd	r24, Y+16	; 0x10
    2794:	8d 32       	cpi	r24, 0x2D	; 45
    2796:	09 f0       	breq	.+2      	; 0x279a <threeInThreeEquation+0x3a0>
    2798:	8b c1       	rjmp	.+790    	; 0x2ab0 <threeInThreeEquation+0x6b6>
				a2 *= -1;
    279a:	9e 01       	movw	r18, r28
    279c:	28 5a       	subi	r18, 0xA8	; 168
    279e:	3f 4f       	sbci	r19, 0xFF	; 255
    27a0:	fe 01       	movw	r30, r28
    27a2:	e8 5a       	subi	r30, 0xA8	; 168
    27a4:	ff 4f       	sbci	r31, 0xFF	; 255
    27a6:	80 81       	ld	r24, Z
    27a8:	91 81       	ldd	r25, Z+1	; 0x01
    27aa:	a2 81       	ldd	r26, Z+2	; 0x02
    27ac:	b3 81       	ldd	r27, Z+3	; 0x03
    27ae:	b0 58       	subi	r27, 0x80	; 128
    27b0:	f9 01       	movw	r30, r18
    27b2:	80 83       	st	Z, r24
    27b4:	91 83       	std	Z+1, r25	; 0x01
    27b6:	a2 83       	std	Z+2, r26	; 0x02
    27b8:	b3 83       	std	Z+3, r27	; 0x03
    27ba:	7a c1       	rjmp	.+756    	; 0x2ab0 <threeInThreeEquation+0x6b6>
			}
		}
		else if (i == 5){
    27bc:	8b 89       	ldd	r24, Y+19	; 0x13
    27be:	85 30       	cpi	r24, 0x05	; 5
    27c0:	a9 f5       	brne	.+106    	; 0x282c <threeInThreeEquation+0x432>
			num[numCounter] = '\0';
    27c2:	89 89       	ldd	r24, Y+17	; 0x11
    27c4:	28 2f       	mov	r18, r24
    27c6:	30 e0       	ldi	r19, 0x00	; 0
    27c8:	ce 01       	movw	r24, r28
    27ca:	84 59       	subi	r24, 0x94	; 148
    27cc:	9f 4f       	sbci	r25, 0xFF	; 255
    27ce:	fc 01       	movw	r30, r24
    27d0:	e2 0f       	add	r30, r18
    27d2:	f3 1f       	adc	r31, r19
    27d4:	10 82       	st	Z, r1
			numCounter = 0;
    27d6:	19 8a       	std	Y+17, r1	; 0x11
			b2 = atol(num);
    27d8:	ce 01       	movw	r24, r28
    27da:	84 59       	subi	r24, 0x94	; 148
    27dc:	9f 4f       	sbci	r25, 0xFF	; 255
    27de:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <atol>
    27e2:	dc 01       	movw	r26, r24
    27e4:	cb 01       	movw	r24, r22
    27e6:	8e 01       	movw	r16, r28
    27e8:	0c 5a       	subi	r16, 0xAC	; 172
    27ea:	1f 4f       	sbci	r17, 0xFF	; 255
    27ec:	bc 01       	movw	r22, r24
    27ee:	cd 01       	movw	r24, r26
    27f0:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    27f4:	dc 01       	movw	r26, r24
    27f6:	cb 01       	movw	r24, r22
    27f8:	f8 01       	movw	r30, r16
    27fa:	80 83       	st	Z, r24
    27fc:	91 83       	std	Z+1, r25	; 0x01
    27fe:	a2 83       	std	Z+2, r26	; 0x02
    2800:	b3 83       	std	Z+3, r27	; 0x03
			if (sign == 45){
    2802:	88 89       	ldd	r24, Y+16	; 0x10
    2804:	8d 32       	cpi	r24, 0x2D	; 45
    2806:	09 f0       	breq	.+2      	; 0x280a <threeInThreeEquation+0x410>
    2808:	53 c1       	rjmp	.+678    	; 0x2ab0 <threeInThreeEquation+0x6b6>
				b2 *= -1;
    280a:	9e 01       	movw	r18, r28
    280c:	2c 5a       	subi	r18, 0xAC	; 172
    280e:	3f 4f       	sbci	r19, 0xFF	; 255
    2810:	fe 01       	movw	r30, r28
    2812:	ec 5a       	subi	r30, 0xAC	; 172
    2814:	ff 4f       	sbci	r31, 0xFF	; 255
    2816:	80 81       	ld	r24, Z
    2818:	91 81       	ldd	r25, Z+1	; 0x01
    281a:	a2 81       	ldd	r26, Z+2	; 0x02
    281c:	b3 81       	ldd	r27, Z+3	; 0x03
    281e:	b0 58       	subi	r27, 0x80	; 128
    2820:	f9 01       	movw	r30, r18
    2822:	80 83       	st	Z, r24
    2824:	91 83       	std	Z+1, r25	; 0x01
    2826:	a2 83       	std	Z+2, r26	; 0x02
    2828:	b3 83       	std	Z+3, r27	; 0x03
    282a:	42 c1       	rjmp	.+644    	; 0x2ab0 <threeInThreeEquation+0x6b6>
			}
		}
		else if (i == 6){
    282c:	8b 89       	ldd	r24, Y+19	; 0x13
    282e:	86 30       	cpi	r24, 0x06	; 6
    2830:	a9 f5       	brne	.+106    	; 0x289c <threeInThreeEquation+0x4a2>
			num[numCounter] = '\0';
    2832:	89 89       	ldd	r24, Y+17	; 0x11
    2834:	28 2f       	mov	r18, r24
    2836:	30 e0       	ldi	r19, 0x00	; 0
    2838:	ce 01       	movw	r24, r28
    283a:	84 59       	subi	r24, 0x94	; 148
    283c:	9f 4f       	sbci	r25, 0xFF	; 255
    283e:	fc 01       	movw	r30, r24
    2840:	e2 0f       	add	r30, r18
    2842:	f3 1f       	adc	r31, r19
    2844:	10 82       	st	Z, r1
			numCounter = 0;
    2846:	19 8a       	std	Y+17, r1	; 0x11
			c2 = atol(num);
    2848:	ce 01       	movw	r24, r28
    284a:	84 59       	subi	r24, 0x94	; 148
    284c:	9f 4f       	sbci	r25, 0xFF	; 255
    284e:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <atol>
    2852:	dc 01       	movw	r26, r24
    2854:	cb 01       	movw	r24, r22
    2856:	8e 01       	movw	r16, r28
    2858:	00 5b       	subi	r16, 0xB0	; 176
    285a:	1f 4f       	sbci	r17, 0xFF	; 255
    285c:	bc 01       	movw	r22, r24
    285e:	cd 01       	movw	r24, r26
    2860:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    2864:	dc 01       	movw	r26, r24
    2866:	cb 01       	movw	r24, r22
    2868:	f8 01       	movw	r30, r16
    286a:	80 83       	st	Z, r24
    286c:	91 83       	std	Z+1, r25	; 0x01
    286e:	a2 83       	std	Z+2, r26	; 0x02
    2870:	b3 83       	std	Z+3, r27	; 0x03
			if (sign == 45){
    2872:	88 89       	ldd	r24, Y+16	; 0x10
    2874:	8d 32       	cpi	r24, 0x2D	; 45
    2876:	09 f0       	breq	.+2      	; 0x287a <threeInThreeEquation+0x480>
    2878:	1b c1       	rjmp	.+566    	; 0x2ab0 <threeInThreeEquation+0x6b6>
				c2 *= -1;
    287a:	9e 01       	movw	r18, r28
    287c:	20 5b       	subi	r18, 0xB0	; 176
    287e:	3f 4f       	sbci	r19, 0xFF	; 255
    2880:	fe 01       	movw	r30, r28
    2882:	e0 5b       	subi	r30, 0xB0	; 176
    2884:	ff 4f       	sbci	r31, 0xFF	; 255
    2886:	80 81       	ld	r24, Z
    2888:	91 81       	ldd	r25, Z+1	; 0x01
    288a:	a2 81       	ldd	r26, Z+2	; 0x02
    288c:	b3 81       	ldd	r27, Z+3	; 0x03
    288e:	b0 58       	subi	r27, 0x80	; 128
    2890:	f9 01       	movw	r30, r18
    2892:	80 83       	st	Z, r24
    2894:	91 83       	std	Z+1, r25	; 0x01
    2896:	a2 83       	std	Z+2, r26	; 0x02
    2898:	b3 83       	std	Z+3, r27	; 0x03
    289a:	0a c1       	rjmp	.+532    	; 0x2ab0 <threeInThreeEquation+0x6b6>
			}
		}
		else if (i == 7){
    289c:	8b 89       	ldd	r24, Y+19	; 0x13
    289e:	87 30       	cpi	r24, 0x07	; 7
    28a0:	a9 f5       	brne	.+106    	; 0x290c <threeInThreeEquation+0x512>
			num[numCounter] = '\0';
    28a2:	89 89       	ldd	r24, Y+17	; 0x11
    28a4:	28 2f       	mov	r18, r24
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    28a8:	ce 01       	movw	r24, r28
    28aa:	84 59       	subi	r24, 0x94	; 148
    28ac:	9f 4f       	sbci	r25, 0xFF	; 255
    28ae:	fc 01       	movw	r30, r24
    28b0:	e2 0f       	add	r30, r18
    28b2:	f3 1f       	adc	r31, r19
    28b4:	10 82       	st	Z, r1
			numCounter = 0;
    28b6:	19 8a       	std	Y+17, r1	; 0x11
			d2 = atol(num);
    28b8:	ce 01       	movw	r24, r28
    28ba:	84 59       	subi	r24, 0x94	; 148
    28bc:	9f 4f       	sbci	r25, 0xFF	; 255
    28be:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <atol>
    28c2:	dc 01       	movw	r26, r24
    28c4:	cb 01       	movw	r24, r22
    28c6:	8e 01       	movw	r16, r28
    28c8:	04 5b       	subi	r16, 0xB4	; 180
    28ca:	1f 4f       	sbci	r17, 0xFF	; 255
    28cc:	bc 01       	movw	r22, r24
    28ce:	cd 01       	movw	r24, r26
    28d0:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    28d4:	dc 01       	movw	r26, r24
    28d6:	cb 01       	movw	r24, r22
    28d8:	f8 01       	movw	r30, r16
    28da:	80 83       	st	Z, r24
    28dc:	91 83       	std	Z+1, r25	; 0x01
    28de:	a2 83       	std	Z+2, r26	; 0x02
    28e0:	b3 83       	std	Z+3, r27	; 0x03
			if (sign == 45){
    28e2:	88 89       	ldd	r24, Y+16	; 0x10
    28e4:	8d 32       	cpi	r24, 0x2D	; 45
    28e6:	09 f0       	breq	.+2      	; 0x28ea <threeInThreeEquation+0x4f0>
    28e8:	e3 c0       	rjmp	.+454    	; 0x2ab0 <threeInThreeEquation+0x6b6>
				d2 *= -1;
    28ea:	9e 01       	movw	r18, r28
    28ec:	24 5b       	subi	r18, 0xB4	; 180
    28ee:	3f 4f       	sbci	r19, 0xFF	; 255
    28f0:	fe 01       	movw	r30, r28
    28f2:	e4 5b       	subi	r30, 0xB4	; 180
    28f4:	ff 4f       	sbci	r31, 0xFF	; 255
    28f6:	80 81       	ld	r24, Z
    28f8:	91 81       	ldd	r25, Z+1	; 0x01
    28fa:	a2 81       	ldd	r26, Z+2	; 0x02
    28fc:	b3 81       	ldd	r27, Z+3	; 0x03
    28fe:	b0 58       	subi	r27, 0x80	; 128
    2900:	f9 01       	movw	r30, r18
    2902:	80 83       	st	Z, r24
    2904:	91 83       	std	Z+1, r25	; 0x01
    2906:	a2 83       	std	Z+2, r26	; 0x02
    2908:	b3 83       	std	Z+3, r27	; 0x03
    290a:	d2 c0       	rjmp	.+420    	; 0x2ab0 <threeInThreeEquation+0x6b6>
			}
		}
		else if (i == 8){
    290c:	8b 89       	ldd	r24, Y+19	; 0x13
    290e:	88 30       	cpi	r24, 0x08	; 8
    2910:	a9 f5       	brne	.+106    	; 0x297c <threeInThreeEquation+0x582>
			num[numCounter] = '\0';
    2912:	89 89       	ldd	r24, Y+17	; 0x11
    2914:	28 2f       	mov	r18, r24
    2916:	30 e0       	ldi	r19, 0x00	; 0
    2918:	ce 01       	movw	r24, r28
    291a:	84 59       	subi	r24, 0x94	; 148
    291c:	9f 4f       	sbci	r25, 0xFF	; 255
    291e:	fc 01       	movw	r30, r24
    2920:	e2 0f       	add	r30, r18
    2922:	f3 1f       	adc	r31, r19
    2924:	10 82       	st	Z, r1
			numCounter = 0;
    2926:	19 8a       	std	Y+17, r1	; 0x11
			a3 = atol(num);
    2928:	ce 01       	movw	r24, r28
    292a:	84 59       	subi	r24, 0x94	; 148
    292c:	9f 4f       	sbci	r25, 0xFF	; 255
    292e:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <atol>
    2932:	dc 01       	movw	r26, r24
    2934:	cb 01       	movw	r24, r22
    2936:	8e 01       	movw	r16, r28
    2938:	08 5b       	subi	r16, 0xB8	; 184
    293a:	1f 4f       	sbci	r17, 0xFF	; 255
    293c:	bc 01       	movw	r22, r24
    293e:	cd 01       	movw	r24, r26
    2940:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    2944:	dc 01       	movw	r26, r24
    2946:	cb 01       	movw	r24, r22
    2948:	f8 01       	movw	r30, r16
    294a:	80 83       	st	Z, r24
    294c:	91 83       	std	Z+1, r25	; 0x01
    294e:	a2 83       	std	Z+2, r26	; 0x02
    2950:	b3 83       	std	Z+3, r27	; 0x03
			if (sign == 45){
    2952:	88 89       	ldd	r24, Y+16	; 0x10
    2954:	8d 32       	cpi	r24, 0x2D	; 45
    2956:	09 f0       	breq	.+2      	; 0x295a <threeInThreeEquation+0x560>
    2958:	ab c0       	rjmp	.+342    	; 0x2ab0 <threeInThreeEquation+0x6b6>
				a3 *= -1;
    295a:	9e 01       	movw	r18, r28
    295c:	28 5b       	subi	r18, 0xB8	; 184
    295e:	3f 4f       	sbci	r19, 0xFF	; 255
    2960:	fe 01       	movw	r30, r28
    2962:	e8 5b       	subi	r30, 0xB8	; 184
    2964:	ff 4f       	sbci	r31, 0xFF	; 255
    2966:	80 81       	ld	r24, Z
    2968:	91 81       	ldd	r25, Z+1	; 0x01
    296a:	a2 81       	ldd	r26, Z+2	; 0x02
    296c:	b3 81       	ldd	r27, Z+3	; 0x03
    296e:	b0 58       	subi	r27, 0x80	; 128
    2970:	f9 01       	movw	r30, r18
    2972:	80 83       	st	Z, r24
    2974:	91 83       	std	Z+1, r25	; 0x01
    2976:	a2 83       	std	Z+2, r26	; 0x02
    2978:	b3 83       	std	Z+3, r27	; 0x03
    297a:	9a c0       	rjmp	.+308    	; 0x2ab0 <threeInThreeEquation+0x6b6>
			}
		}
		else if (i == 9){
    297c:	8b 89       	ldd	r24, Y+19	; 0x13
    297e:	89 30       	cpi	r24, 0x09	; 9
    2980:	a9 f5       	brne	.+106    	; 0x29ec <threeInThreeEquation+0x5f2>
			num[numCounter] = '\0';
    2982:	89 89       	ldd	r24, Y+17	; 0x11
    2984:	28 2f       	mov	r18, r24
    2986:	30 e0       	ldi	r19, 0x00	; 0
    2988:	ce 01       	movw	r24, r28
    298a:	84 59       	subi	r24, 0x94	; 148
    298c:	9f 4f       	sbci	r25, 0xFF	; 255
    298e:	fc 01       	movw	r30, r24
    2990:	e2 0f       	add	r30, r18
    2992:	f3 1f       	adc	r31, r19
    2994:	10 82       	st	Z, r1
			numCounter = 0;
    2996:	19 8a       	std	Y+17, r1	; 0x11
			b3 = atol(num);
    2998:	ce 01       	movw	r24, r28
    299a:	84 59       	subi	r24, 0x94	; 148
    299c:	9f 4f       	sbci	r25, 0xFF	; 255
    299e:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <atol>
    29a2:	dc 01       	movw	r26, r24
    29a4:	cb 01       	movw	r24, r22
    29a6:	8e 01       	movw	r16, r28
    29a8:	0c 5b       	subi	r16, 0xBC	; 188
    29aa:	1f 4f       	sbci	r17, 0xFF	; 255
    29ac:	bc 01       	movw	r22, r24
    29ae:	cd 01       	movw	r24, r26
    29b0:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    29b4:	dc 01       	movw	r26, r24
    29b6:	cb 01       	movw	r24, r22
    29b8:	f8 01       	movw	r30, r16
    29ba:	80 83       	st	Z, r24
    29bc:	91 83       	std	Z+1, r25	; 0x01
    29be:	a2 83       	std	Z+2, r26	; 0x02
    29c0:	b3 83       	std	Z+3, r27	; 0x03
			if (sign == 45){
    29c2:	88 89       	ldd	r24, Y+16	; 0x10
    29c4:	8d 32       	cpi	r24, 0x2D	; 45
    29c6:	09 f0       	breq	.+2      	; 0x29ca <threeInThreeEquation+0x5d0>
    29c8:	73 c0       	rjmp	.+230    	; 0x2ab0 <threeInThreeEquation+0x6b6>
				b3 *= -1;
    29ca:	9e 01       	movw	r18, r28
    29cc:	2c 5b       	subi	r18, 0xBC	; 188
    29ce:	3f 4f       	sbci	r19, 0xFF	; 255
    29d0:	fe 01       	movw	r30, r28
    29d2:	ec 5b       	subi	r30, 0xBC	; 188
    29d4:	ff 4f       	sbci	r31, 0xFF	; 255
    29d6:	80 81       	ld	r24, Z
    29d8:	91 81       	ldd	r25, Z+1	; 0x01
    29da:	a2 81       	ldd	r26, Z+2	; 0x02
    29dc:	b3 81       	ldd	r27, Z+3	; 0x03
    29de:	b0 58       	subi	r27, 0x80	; 128
    29e0:	f9 01       	movw	r30, r18
    29e2:	80 83       	st	Z, r24
    29e4:	91 83       	std	Z+1, r25	; 0x01
    29e6:	a2 83       	std	Z+2, r26	; 0x02
    29e8:	b3 83       	std	Z+3, r27	; 0x03
    29ea:	62 c0       	rjmp	.+196    	; 0x2ab0 <threeInThreeEquation+0x6b6>
			}
		}
		else if (i == 10){
    29ec:	8b 89       	ldd	r24, Y+19	; 0x13
    29ee:	8a 30       	cpi	r24, 0x0A	; 10
    29f0:	a1 f5       	brne	.+104    	; 0x2a5a <threeInThreeEquation+0x660>
			num[numCounter] = '\0';
    29f2:	89 89       	ldd	r24, Y+17	; 0x11
    29f4:	28 2f       	mov	r18, r24
    29f6:	30 e0       	ldi	r19, 0x00	; 0
    29f8:	ce 01       	movw	r24, r28
    29fa:	84 59       	subi	r24, 0x94	; 148
    29fc:	9f 4f       	sbci	r25, 0xFF	; 255
    29fe:	fc 01       	movw	r30, r24
    2a00:	e2 0f       	add	r30, r18
    2a02:	f3 1f       	adc	r31, r19
    2a04:	10 82       	st	Z, r1
			numCounter = 0;
    2a06:	19 8a       	std	Y+17, r1	; 0x11
			c3 = atol(num);
    2a08:	ce 01       	movw	r24, r28
    2a0a:	84 59       	subi	r24, 0x94	; 148
    2a0c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a0e:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <atol>
    2a12:	dc 01       	movw	r26, r24
    2a14:	cb 01       	movw	r24, r22
    2a16:	8e 01       	movw	r16, r28
    2a18:	00 5c       	subi	r16, 0xC0	; 192
    2a1a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a1c:	bc 01       	movw	r22, r24
    2a1e:	cd 01       	movw	r24, r26
    2a20:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    2a24:	dc 01       	movw	r26, r24
    2a26:	cb 01       	movw	r24, r22
    2a28:	f8 01       	movw	r30, r16
    2a2a:	80 83       	st	Z, r24
    2a2c:	91 83       	std	Z+1, r25	; 0x01
    2a2e:	a2 83       	std	Z+2, r26	; 0x02
    2a30:	b3 83       	std	Z+3, r27	; 0x03
			if (sign == 45){
    2a32:	88 89       	ldd	r24, Y+16	; 0x10
    2a34:	8d 32       	cpi	r24, 0x2D	; 45
    2a36:	e1 f5       	brne	.+120    	; 0x2ab0 <threeInThreeEquation+0x6b6>
				c3 *= -1;
    2a38:	9e 01       	movw	r18, r28
    2a3a:	20 5c       	subi	r18, 0xC0	; 192
    2a3c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a3e:	fe 01       	movw	r30, r28
    2a40:	e0 5c       	subi	r30, 0xC0	; 192
    2a42:	ff 4f       	sbci	r31, 0xFF	; 255
    2a44:	80 81       	ld	r24, Z
    2a46:	91 81       	ldd	r25, Z+1	; 0x01
    2a48:	a2 81       	ldd	r26, Z+2	; 0x02
    2a4a:	b3 81       	ldd	r27, Z+3	; 0x03
    2a4c:	b0 58       	subi	r27, 0x80	; 128
    2a4e:	f9 01       	movw	r30, r18
    2a50:	80 83       	st	Z, r24
    2a52:	91 83       	std	Z+1, r25	; 0x01
    2a54:	a2 83       	std	Z+2, r26	; 0x02
    2a56:	b3 83       	std	Z+3, r27	; 0x03
    2a58:	2b c0       	rjmp	.+86     	; 0x2ab0 <threeInThreeEquation+0x6b6>
			}
		}
		else if (i == 11){
    2a5a:	8b 89       	ldd	r24, Y+19	; 0x13
    2a5c:	8b 30       	cpi	r24, 0x0B	; 11
    2a5e:	41 f5       	brne	.+80     	; 0x2ab0 <threeInThreeEquation+0x6b6>
			num[numCounter] = '\0';
    2a60:	89 89       	ldd	r24, Y+17	; 0x11
    2a62:	28 2f       	mov	r18, r24
    2a64:	30 e0       	ldi	r19, 0x00	; 0
    2a66:	ce 01       	movw	r24, r28
    2a68:	84 59       	subi	r24, 0x94	; 148
    2a6a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a6c:	fc 01       	movw	r30, r24
    2a6e:	e2 0f       	add	r30, r18
    2a70:	f3 1f       	adc	r31, r19
    2a72:	10 82       	st	Z, r1
			numCounter = 0;
    2a74:	19 8a       	std	Y+17, r1	; 0x11
			d3 = atol(num);
    2a76:	ce 01       	movw	r24, r28
    2a78:	84 59       	subi	r24, 0x94	; 148
    2a7a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a7c:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <atol>
    2a80:	dc 01       	movw	r26, r24
    2a82:	cb 01       	movw	r24, r22
    2a84:	bc 01       	movw	r22, r24
    2a86:	cd 01       	movw	r24, r26
    2a88:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    2a8c:	dc 01       	movw	r26, r24
    2a8e:	cb 01       	movw	r24, r22
    2a90:	8c af       	std	Y+60, r24	; 0x3c
    2a92:	9d af       	std	Y+61, r25	; 0x3d
    2a94:	ae af       	std	Y+62, r26	; 0x3e
    2a96:	bf af       	std	Y+63, r27	; 0x3f
			if (sign == 45){
    2a98:	88 89       	ldd	r24, Y+16	; 0x10
    2a9a:	8d 32       	cpi	r24, 0x2D	; 45
    2a9c:	49 f4       	brne	.+18     	; 0x2ab0 <threeInThreeEquation+0x6b6>
				d3 *= -1;
    2a9e:	8c ad       	ldd	r24, Y+60	; 0x3c
    2aa0:	9d ad       	ldd	r25, Y+61	; 0x3d
    2aa2:	ae ad       	ldd	r26, Y+62	; 0x3e
    2aa4:	bf ad       	ldd	r27, Y+63	; 0x3f
    2aa6:	b0 58       	subi	r27, 0x80	; 128
    2aa8:	8c af       	std	Y+60, r24	; 0x3c
    2aaa:	9d af       	std	Y+61, r25	; 0x3d
    2aac:	ae af       	std	Y+62, r26	; 0x3e
    2aae:	bf af       	std	Y+63, r27	; 0x3f
	Key_Type type;

	char num[10] = {'\0'};

	LCD_clearScreen ();
	for (i = 0; i < 12; i++){
    2ab0:	8b 89       	ldd	r24, Y+19	; 0x13
    2ab2:	8f 5f       	subi	r24, 0xFF	; 255
    2ab4:	8b 8b       	std	Y+19, r24	; 0x13
    2ab6:	8b 89       	ldd	r24, Y+19	; 0x13
    2ab8:	8c 30       	cpi	r24, 0x0C	; 12
    2aba:	08 f4       	brcc	.+2      	; 0x2abe <threeInThreeEquation+0x6c4>
    2abc:	bc cc       	rjmp	.-1672   	; 0x2436 <threeInThreeEquation+0x3c>
				d3 *= -1;
			}
		}
	}

	LCD_displayCharacter(a1);
    2abe:	fe 01       	movw	r30, r28
    2ac0:	e8 59       	subi	r30, 0x98	; 152
    2ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac4:	60 81       	ld	r22, Z
    2ac6:	71 81       	ldd	r23, Z+1	; 0x01
    2ac8:	82 81       	ldd	r24, Z+2	; 0x02
    2aca:	93 81       	ldd	r25, Z+3	; 0x03
    2acc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ad0:	dc 01       	movw	r26, r24
    2ad2:	cb 01       	movw	r24, r22
    2ad4:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <LCD_displayCharacter>
	LCD_displayCharacter(' ');
    2ad8:	80 e2       	ldi	r24, 0x20	; 32
    2ada:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <LCD_displayCharacter>
	LCD_displayCharacter(b1);
    2ade:	fe 01       	movw	r30, r28
    2ae0:	ec 59       	subi	r30, 0x9C	; 156
    2ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae4:	60 81       	ld	r22, Z
    2ae6:	71 81       	ldd	r23, Z+1	; 0x01
    2ae8:	82 81       	ldd	r24, Z+2	; 0x02
    2aea:	93 81       	ldd	r25, Z+3	; 0x03
    2aec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2af0:	dc 01       	movw	r26, r24
    2af2:	cb 01       	movw	r24, r22
    2af4:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <LCD_displayCharacter>
	LCD_displayCharacter(' ');
    2af8:	80 e2       	ldi	r24, 0x20	; 32
    2afa:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <LCD_displayCharacter>
	LCD_displayCharacter(c1);
    2afe:	fe 01       	movw	r30, r28
    2b00:	e0 5a       	subi	r30, 0xA0	; 160
    2b02:	ff 4f       	sbci	r31, 0xFF	; 255
    2b04:	60 81       	ld	r22, Z
    2b06:	71 81       	ldd	r23, Z+1	; 0x01
    2b08:	82 81       	ldd	r24, Z+2	; 0x02
    2b0a:	93 81       	ldd	r25, Z+3	; 0x03
    2b0c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b10:	dc 01       	movw	r26, r24
    2b12:	cb 01       	movw	r24, r22
    2b14:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <LCD_displayCharacter>
	LCD_displayCharacter(' ');
    2b18:	80 e2       	ldi	r24, 0x20	; 32
    2b1a:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <LCD_displayCharacter>
	LCD_displayCharacter(d1);
    2b1e:	fe 01       	movw	r30, r28
    2b20:	e4 5a       	subi	r30, 0xA4	; 164
    2b22:	ff 4f       	sbci	r31, 0xFF	; 255
    2b24:	60 81       	ld	r22, Z
    2b26:	71 81       	ldd	r23, Z+1	; 0x01
    2b28:	82 81       	ldd	r24, Z+2	; 0x02
    2b2a:	93 81       	ldd	r25, Z+3	; 0x03
    2b2c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b30:	dc 01       	movw	r26, r24
    2b32:	cb 01       	movw	r24, r22
    2b34:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <LCD_displayCharacter>
	LCD_displayCharacter(' ');
    2b38:	80 e2       	ldi	r24, 0x20	; 32
    2b3a:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <LCD_displayCharacter>
	LCD_moveCursor(1,0);
    2b3e:	81 e0       	ldi	r24, 0x01	; 1
    2b40:	60 e0       	ldi	r22, 0x00	; 0
    2b42:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <LCD_moveCursor>
	LCD_displayCharacter(a2);
    2b46:	fe 01       	movw	r30, r28
    2b48:	e8 5a       	subi	r30, 0xA8	; 168
    2b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4c:	60 81       	ld	r22, Z
    2b4e:	71 81       	ldd	r23, Z+1	; 0x01
    2b50:	82 81       	ldd	r24, Z+2	; 0x02
    2b52:	93 81       	ldd	r25, Z+3	; 0x03
    2b54:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b58:	dc 01       	movw	r26, r24
    2b5a:	cb 01       	movw	r24, r22
    2b5c:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <LCD_displayCharacter>
	LCD_displayCharacter(' ');
    2b60:	80 e2       	ldi	r24, 0x20	; 32
    2b62:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <LCD_displayCharacter>
	LCD_displayCharacter(b2);
    2b66:	fe 01       	movw	r30, r28
    2b68:	ec 5a       	subi	r30, 0xAC	; 172
    2b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6c:	60 81       	ld	r22, Z
    2b6e:	71 81       	ldd	r23, Z+1	; 0x01
    2b70:	82 81       	ldd	r24, Z+2	; 0x02
    2b72:	93 81       	ldd	r25, Z+3	; 0x03
    2b74:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b78:	dc 01       	movw	r26, r24
    2b7a:	cb 01       	movw	r24, r22
    2b7c:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <LCD_displayCharacter>
	LCD_displayCharacter(' ');
    2b80:	80 e2       	ldi	r24, 0x20	; 32
    2b82:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <LCD_displayCharacter>
	LCD_displayCharacter(c2);
    2b86:	fe 01       	movw	r30, r28
    2b88:	e0 5b       	subi	r30, 0xB0	; 176
    2b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b8c:	60 81       	ld	r22, Z
    2b8e:	71 81       	ldd	r23, Z+1	; 0x01
    2b90:	82 81       	ldd	r24, Z+2	; 0x02
    2b92:	93 81       	ldd	r25, Z+3	; 0x03
    2b94:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b98:	dc 01       	movw	r26, r24
    2b9a:	cb 01       	movw	r24, r22
    2b9c:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <LCD_displayCharacter>
	LCD_displayCharacter(' ');
    2ba0:	80 e2       	ldi	r24, 0x20	; 32
    2ba2:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <LCD_displayCharacter>
	LCD_displayCharacter(d2);
    2ba6:	fe 01       	movw	r30, r28
    2ba8:	e4 5b       	subi	r30, 0xB4	; 180
    2baa:	ff 4f       	sbci	r31, 0xFF	; 255
    2bac:	60 81       	ld	r22, Z
    2bae:	71 81       	ldd	r23, Z+1	; 0x01
    2bb0:	82 81       	ldd	r24, Z+2	; 0x02
    2bb2:	93 81       	ldd	r25, Z+3	; 0x03
    2bb4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bb8:	dc 01       	movw	r26, r24
    2bba:	cb 01       	movw	r24, r22
    2bbc:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <LCD_displayCharacter>
	LCD_displayCharacter(' ');
    2bc0:	80 e2       	ldi	r24, 0x20	; 32
    2bc2:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <LCD_displayCharacter>
	LCD_moveCursor(2,0);
    2bc6:	82 e0       	ldi	r24, 0x02	; 2
    2bc8:	60 e0       	ldi	r22, 0x00	; 0
    2bca:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <LCD_moveCursor>
	LCD_displayCharacter(a3);
    2bce:	fe 01       	movw	r30, r28
    2bd0:	e8 5b       	subi	r30, 0xB8	; 184
    2bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd4:	60 81       	ld	r22, Z
    2bd6:	71 81       	ldd	r23, Z+1	; 0x01
    2bd8:	82 81       	ldd	r24, Z+2	; 0x02
    2bda:	93 81       	ldd	r25, Z+3	; 0x03
    2bdc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2be0:	dc 01       	movw	r26, r24
    2be2:	cb 01       	movw	r24, r22
    2be4:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <LCD_displayCharacter>
	LCD_displayCharacter(' ');
    2be8:	80 e2       	ldi	r24, 0x20	; 32
    2bea:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <LCD_displayCharacter>
	LCD_displayCharacter(b3);
    2bee:	fe 01       	movw	r30, r28
    2bf0:	ec 5b       	subi	r30, 0xBC	; 188
    2bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf4:	60 81       	ld	r22, Z
    2bf6:	71 81       	ldd	r23, Z+1	; 0x01
    2bf8:	82 81       	ldd	r24, Z+2	; 0x02
    2bfa:	93 81       	ldd	r25, Z+3	; 0x03
    2bfc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c00:	dc 01       	movw	r26, r24
    2c02:	cb 01       	movw	r24, r22
    2c04:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <LCD_displayCharacter>
	LCD_displayCharacter(' ');
    2c08:	80 e2       	ldi	r24, 0x20	; 32
    2c0a:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <LCD_displayCharacter>
	LCD_displayCharacter(c3);
    2c0e:	fe 01       	movw	r30, r28
    2c10:	e0 5c       	subi	r30, 0xC0	; 192
    2c12:	ff 4f       	sbci	r31, 0xFF	; 255
    2c14:	60 81       	ld	r22, Z
    2c16:	71 81       	ldd	r23, Z+1	; 0x01
    2c18:	82 81       	ldd	r24, Z+2	; 0x02
    2c1a:	93 81       	ldd	r25, Z+3	; 0x03
    2c1c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c20:	dc 01       	movw	r26, r24
    2c22:	cb 01       	movw	r24, r22
    2c24:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <LCD_displayCharacter>
	LCD_displayCharacter(' ');
    2c28:	80 e2       	ldi	r24, 0x20	; 32
    2c2a:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <LCD_displayCharacter>
	LCD_displayCharacter(d3);
    2c2e:	6c ad       	ldd	r22, Y+60	; 0x3c
    2c30:	7d ad       	ldd	r23, Y+61	; 0x3d
    2c32:	8e ad       	ldd	r24, Y+62	; 0x3e
    2c34:	9f ad       	ldd	r25, Y+63	; 0x3f
    2c36:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c3a:	dc 01       	movw	r26, r24
    2c3c:	cb 01       	movw	r24, r22
    2c3e:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <LCD_displayCharacter>
	LCD_displayCharacter(' ');
    2c42:	80 e2       	ldi	r24, 0x20	; 32
    2c44:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <LCD_displayCharacter>

	do {
		key = KEYPAD_getPressedKey();
    2c48:	0e 94 74 19 	call	0x32e8	; 0x32e8 <KEYPAD_getPressedKey>
    2c4c:	8a 8b       	std	Y+18, r24	; 0x12
	}
	while (key != ON_KEY);
    2c4e:	8a 89       	ldd	r24, Y+18	; 0x12
    2c50:	8d 30       	cpi	r24, 0x0D	; 13
    2c52:	d1 f7       	brne	.-12     	; 0x2c48 <threeInThreeEquation+0x84e>
}
    2c54:	cb 58       	subi	r28, 0x8B	; 139
    2c56:	df 4f       	sbci	r29, 0xFF	; 255
    2c58:	0f b6       	in	r0, 0x3f	; 63
    2c5a:	f8 94       	cli
    2c5c:	de bf       	out	0x3e, r29	; 62
    2c5e:	0f be       	out	0x3f, r0	; 63
    2c60:	cd bf       	out	0x3d, r28	; 61
    2c62:	cf 91       	pop	r28
    2c64:	df 91       	pop	r29
    2c66:	1f 91       	pop	r17
    2c68:	0f 91       	pop	r16
    2c6a:	08 95       	ret

00002c6c <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    2c6c:	df 93       	push	r29
    2c6e:	cf 93       	push	r28
    2c70:	00 d0       	rcall	.+0      	; 0x2c72 <GPIO_setupPinDirection+0x6>
    2c72:	00 d0       	rcall	.+0      	; 0x2c74 <GPIO_setupPinDirection+0x8>
    2c74:	0f 92       	push	r0
    2c76:	cd b7       	in	r28, 0x3d	; 61
    2c78:	de b7       	in	r29, 0x3e	; 62
    2c7a:	89 83       	std	Y+1, r24	; 0x01
    2c7c:	6a 83       	std	Y+2, r22	; 0x02
    2c7e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2c80:	8a 81       	ldd	r24, Y+2	; 0x02
    2c82:	88 30       	cpi	r24, 0x08	; 8
    2c84:	08 f0       	brcs	.+2      	; 0x2c88 <GPIO_setupPinDirection+0x1c>
    2c86:	d5 c0       	rjmp	.+426    	; 0x2e32 <GPIO_setupPinDirection+0x1c6>
    2c88:	89 81       	ldd	r24, Y+1	; 0x01
    2c8a:	84 30       	cpi	r24, 0x04	; 4
    2c8c:	08 f0       	brcs	.+2      	; 0x2c90 <GPIO_setupPinDirection+0x24>
    2c8e:	d1 c0       	rjmp	.+418    	; 0x2e32 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    2c90:	89 81       	ldd	r24, Y+1	; 0x01
    2c92:	28 2f       	mov	r18, r24
    2c94:	30 e0       	ldi	r19, 0x00	; 0
    2c96:	3d 83       	std	Y+5, r19	; 0x05
    2c98:	2c 83       	std	Y+4, r18	; 0x04
    2c9a:	8c 81       	ldd	r24, Y+4	; 0x04
    2c9c:	9d 81       	ldd	r25, Y+5	; 0x05
    2c9e:	81 30       	cpi	r24, 0x01	; 1
    2ca0:	91 05       	cpc	r25, r1
    2ca2:	09 f4       	brne	.+2      	; 0x2ca6 <GPIO_setupPinDirection+0x3a>
    2ca4:	43 c0       	rjmp	.+134    	; 0x2d2c <GPIO_setupPinDirection+0xc0>
    2ca6:	2c 81       	ldd	r18, Y+4	; 0x04
    2ca8:	3d 81       	ldd	r19, Y+5	; 0x05
    2caa:	22 30       	cpi	r18, 0x02	; 2
    2cac:	31 05       	cpc	r19, r1
    2cae:	2c f4       	brge	.+10     	; 0x2cba <GPIO_setupPinDirection+0x4e>
    2cb0:	8c 81       	ldd	r24, Y+4	; 0x04
    2cb2:	9d 81       	ldd	r25, Y+5	; 0x05
    2cb4:	00 97       	sbiw	r24, 0x00	; 0
    2cb6:	71 f0       	breq	.+28     	; 0x2cd4 <GPIO_setupPinDirection+0x68>
    2cb8:	bc c0       	rjmp	.+376    	; 0x2e32 <GPIO_setupPinDirection+0x1c6>
    2cba:	2c 81       	ldd	r18, Y+4	; 0x04
    2cbc:	3d 81       	ldd	r19, Y+5	; 0x05
    2cbe:	22 30       	cpi	r18, 0x02	; 2
    2cc0:	31 05       	cpc	r19, r1
    2cc2:	09 f4       	brne	.+2      	; 0x2cc6 <GPIO_setupPinDirection+0x5a>
    2cc4:	5f c0       	rjmp	.+190    	; 0x2d84 <GPIO_setupPinDirection+0x118>
    2cc6:	8c 81       	ldd	r24, Y+4	; 0x04
    2cc8:	9d 81       	ldd	r25, Y+5	; 0x05
    2cca:	83 30       	cpi	r24, 0x03	; 3
    2ccc:	91 05       	cpc	r25, r1
    2cce:	09 f4       	brne	.+2      	; 0x2cd2 <GPIO_setupPinDirection+0x66>
    2cd0:	85 c0       	rjmp	.+266    	; 0x2ddc <GPIO_setupPinDirection+0x170>
    2cd2:	af c0       	rjmp	.+350    	; 0x2e32 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    2cd4:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd6:	81 30       	cpi	r24, 0x01	; 1
    2cd8:	a1 f4       	brne	.+40     	; 0x2d02 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    2cda:	aa e3       	ldi	r26, 0x3A	; 58
    2cdc:	b0 e0       	ldi	r27, 0x00	; 0
    2cde:	ea e3       	ldi	r30, 0x3A	; 58
    2ce0:	f0 e0       	ldi	r31, 0x00	; 0
    2ce2:	80 81       	ld	r24, Z
    2ce4:	48 2f       	mov	r20, r24
    2ce6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ce8:	28 2f       	mov	r18, r24
    2cea:	30 e0       	ldi	r19, 0x00	; 0
    2cec:	81 e0       	ldi	r24, 0x01	; 1
    2cee:	90 e0       	ldi	r25, 0x00	; 0
    2cf0:	02 2e       	mov	r0, r18
    2cf2:	02 c0       	rjmp	.+4      	; 0x2cf8 <GPIO_setupPinDirection+0x8c>
    2cf4:	88 0f       	add	r24, r24
    2cf6:	99 1f       	adc	r25, r25
    2cf8:	0a 94       	dec	r0
    2cfa:	e2 f7       	brpl	.-8      	; 0x2cf4 <GPIO_setupPinDirection+0x88>
    2cfc:	84 2b       	or	r24, r20
    2cfe:	8c 93       	st	X, r24
    2d00:	98 c0       	rjmp	.+304    	; 0x2e32 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    2d02:	aa e3       	ldi	r26, 0x3A	; 58
    2d04:	b0 e0       	ldi	r27, 0x00	; 0
    2d06:	ea e3       	ldi	r30, 0x3A	; 58
    2d08:	f0 e0       	ldi	r31, 0x00	; 0
    2d0a:	80 81       	ld	r24, Z
    2d0c:	48 2f       	mov	r20, r24
    2d0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d10:	28 2f       	mov	r18, r24
    2d12:	30 e0       	ldi	r19, 0x00	; 0
    2d14:	81 e0       	ldi	r24, 0x01	; 1
    2d16:	90 e0       	ldi	r25, 0x00	; 0
    2d18:	02 2e       	mov	r0, r18
    2d1a:	02 c0       	rjmp	.+4      	; 0x2d20 <GPIO_setupPinDirection+0xb4>
    2d1c:	88 0f       	add	r24, r24
    2d1e:	99 1f       	adc	r25, r25
    2d20:	0a 94       	dec	r0
    2d22:	e2 f7       	brpl	.-8      	; 0x2d1c <GPIO_setupPinDirection+0xb0>
    2d24:	80 95       	com	r24
    2d26:	84 23       	and	r24, r20
    2d28:	8c 93       	st	X, r24
    2d2a:	83 c0       	rjmp	.+262    	; 0x2e32 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    2d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d2e:	81 30       	cpi	r24, 0x01	; 1
    2d30:	a1 f4       	brne	.+40     	; 0x2d5a <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    2d32:	a7 e3       	ldi	r26, 0x37	; 55
    2d34:	b0 e0       	ldi	r27, 0x00	; 0
    2d36:	e7 e3       	ldi	r30, 0x37	; 55
    2d38:	f0 e0       	ldi	r31, 0x00	; 0
    2d3a:	80 81       	ld	r24, Z
    2d3c:	48 2f       	mov	r20, r24
    2d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d40:	28 2f       	mov	r18, r24
    2d42:	30 e0       	ldi	r19, 0x00	; 0
    2d44:	81 e0       	ldi	r24, 0x01	; 1
    2d46:	90 e0       	ldi	r25, 0x00	; 0
    2d48:	02 2e       	mov	r0, r18
    2d4a:	02 c0       	rjmp	.+4      	; 0x2d50 <GPIO_setupPinDirection+0xe4>
    2d4c:	88 0f       	add	r24, r24
    2d4e:	99 1f       	adc	r25, r25
    2d50:	0a 94       	dec	r0
    2d52:	e2 f7       	brpl	.-8      	; 0x2d4c <GPIO_setupPinDirection+0xe0>
    2d54:	84 2b       	or	r24, r20
    2d56:	8c 93       	st	X, r24
    2d58:	6c c0       	rjmp	.+216    	; 0x2e32 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    2d5a:	a7 e3       	ldi	r26, 0x37	; 55
    2d5c:	b0 e0       	ldi	r27, 0x00	; 0
    2d5e:	e7 e3       	ldi	r30, 0x37	; 55
    2d60:	f0 e0       	ldi	r31, 0x00	; 0
    2d62:	80 81       	ld	r24, Z
    2d64:	48 2f       	mov	r20, r24
    2d66:	8a 81       	ldd	r24, Y+2	; 0x02
    2d68:	28 2f       	mov	r18, r24
    2d6a:	30 e0       	ldi	r19, 0x00	; 0
    2d6c:	81 e0       	ldi	r24, 0x01	; 1
    2d6e:	90 e0       	ldi	r25, 0x00	; 0
    2d70:	02 2e       	mov	r0, r18
    2d72:	02 c0       	rjmp	.+4      	; 0x2d78 <GPIO_setupPinDirection+0x10c>
    2d74:	88 0f       	add	r24, r24
    2d76:	99 1f       	adc	r25, r25
    2d78:	0a 94       	dec	r0
    2d7a:	e2 f7       	brpl	.-8      	; 0x2d74 <GPIO_setupPinDirection+0x108>
    2d7c:	80 95       	com	r24
    2d7e:	84 23       	and	r24, r20
    2d80:	8c 93       	st	X, r24
    2d82:	57 c0       	rjmp	.+174    	; 0x2e32 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    2d84:	8b 81       	ldd	r24, Y+3	; 0x03
    2d86:	81 30       	cpi	r24, 0x01	; 1
    2d88:	a1 f4       	brne	.+40     	; 0x2db2 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    2d8a:	a4 e3       	ldi	r26, 0x34	; 52
    2d8c:	b0 e0       	ldi	r27, 0x00	; 0
    2d8e:	e4 e3       	ldi	r30, 0x34	; 52
    2d90:	f0 e0       	ldi	r31, 0x00	; 0
    2d92:	80 81       	ld	r24, Z
    2d94:	48 2f       	mov	r20, r24
    2d96:	8a 81       	ldd	r24, Y+2	; 0x02
    2d98:	28 2f       	mov	r18, r24
    2d9a:	30 e0       	ldi	r19, 0x00	; 0
    2d9c:	81 e0       	ldi	r24, 0x01	; 1
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	02 2e       	mov	r0, r18
    2da2:	02 c0       	rjmp	.+4      	; 0x2da8 <GPIO_setupPinDirection+0x13c>
    2da4:	88 0f       	add	r24, r24
    2da6:	99 1f       	adc	r25, r25
    2da8:	0a 94       	dec	r0
    2daa:	e2 f7       	brpl	.-8      	; 0x2da4 <GPIO_setupPinDirection+0x138>
    2dac:	84 2b       	or	r24, r20
    2dae:	8c 93       	st	X, r24
    2db0:	40 c0       	rjmp	.+128    	; 0x2e32 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    2db2:	a4 e3       	ldi	r26, 0x34	; 52
    2db4:	b0 e0       	ldi	r27, 0x00	; 0
    2db6:	e4 e3       	ldi	r30, 0x34	; 52
    2db8:	f0 e0       	ldi	r31, 0x00	; 0
    2dba:	80 81       	ld	r24, Z
    2dbc:	48 2f       	mov	r20, r24
    2dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    2dc0:	28 2f       	mov	r18, r24
    2dc2:	30 e0       	ldi	r19, 0x00	; 0
    2dc4:	81 e0       	ldi	r24, 0x01	; 1
    2dc6:	90 e0       	ldi	r25, 0x00	; 0
    2dc8:	02 2e       	mov	r0, r18
    2dca:	02 c0       	rjmp	.+4      	; 0x2dd0 <GPIO_setupPinDirection+0x164>
    2dcc:	88 0f       	add	r24, r24
    2dce:	99 1f       	adc	r25, r25
    2dd0:	0a 94       	dec	r0
    2dd2:	e2 f7       	brpl	.-8      	; 0x2dcc <GPIO_setupPinDirection+0x160>
    2dd4:	80 95       	com	r24
    2dd6:	84 23       	and	r24, r20
    2dd8:	8c 93       	st	X, r24
    2dda:	2b c0       	rjmp	.+86     	; 0x2e32 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    2ddc:	8b 81       	ldd	r24, Y+3	; 0x03
    2dde:	81 30       	cpi	r24, 0x01	; 1
    2de0:	a1 f4       	brne	.+40     	; 0x2e0a <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    2de2:	a1 e3       	ldi	r26, 0x31	; 49
    2de4:	b0 e0       	ldi	r27, 0x00	; 0
    2de6:	e1 e3       	ldi	r30, 0x31	; 49
    2de8:	f0 e0       	ldi	r31, 0x00	; 0
    2dea:	80 81       	ld	r24, Z
    2dec:	48 2f       	mov	r20, r24
    2dee:	8a 81       	ldd	r24, Y+2	; 0x02
    2df0:	28 2f       	mov	r18, r24
    2df2:	30 e0       	ldi	r19, 0x00	; 0
    2df4:	81 e0       	ldi	r24, 0x01	; 1
    2df6:	90 e0       	ldi	r25, 0x00	; 0
    2df8:	02 2e       	mov	r0, r18
    2dfa:	02 c0       	rjmp	.+4      	; 0x2e00 <GPIO_setupPinDirection+0x194>
    2dfc:	88 0f       	add	r24, r24
    2dfe:	99 1f       	adc	r25, r25
    2e00:	0a 94       	dec	r0
    2e02:	e2 f7       	brpl	.-8      	; 0x2dfc <GPIO_setupPinDirection+0x190>
    2e04:	84 2b       	or	r24, r20
    2e06:	8c 93       	st	X, r24
    2e08:	14 c0       	rjmp	.+40     	; 0x2e32 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    2e0a:	a1 e3       	ldi	r26, 0x31	; 49
    2e0c:	b0 e0       	ldi	r27, 0x00	; 0
    2e0e:	e1 e3       	ldi	r30, 0x31	; 49
    2e10:	f0 e0       	ldi	r31, 0x00	; 0
    2e12:	80 81       	ld	r24, Z
    2e14:	48 2f       	mov	r20, r24
    2e16:	8a 81       	ldd	r24, Y+2	; 0x02
    2e18:	28 2f       	mov	r18, r24
    2e1a:	30 e0       	ldi	r19, 0x00	; 0
    2e1c:	81 e0       	ldi	r24, 0x01	; 1
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	02 2e       	mov	r0, r18
    2e22:	02 c0       	rjmp	.+4      	; 0x2e28 <GPIO_setupPinDirection+0x1bc>
    2e24:	88 0f       	add	r24, r24
    2e26:	99 1f       	adc	r25, r25
    2e28:	0a 94       	dec	r0
    2e2a:	e2 f7       	brpl	.-8      	; 0x2e24 <GPIO_setupPinDirection+0x1b8>
    2e2c:	80 95       	com	r24
    2e2e:	84 23       	and	r24, r20
    2e30:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2e32:	0f 90       	pop	r0
    2e34:	0f 90       	pop	r0
    2e36:	0f 90       	pop	r0
    2e38:	0f 90       	pop	r0
    2e3a:	0f 90       	pop	r0
    2e3c:	cf 91       	pop	r28
    2e3e:	df 91       	pop	r29
    2e40:	08 95       	ret

00002e42 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    2e42:	df 93       	push	r29
    2e44:	cf 93       	push	r28
    2e46:	00 d0       	rcall	.+0      	; 0x2e48 <GPIO_writePin+0x6>
    2e48:	00 d0       	rcall	.+0      	; 0x2e4a <GPIO_writePin+0x8>
    2e4a:	0f 92       	push	r0
    2e4c:	cd b7       	in	r28, 0x3d	; 61
    2e4e:	de b7       	in	r29, 0x3e	; 62
    2e50:	89 83       	std	Y+1, r24	; 0x01
    2e52:	6a 83       	std	Y+2, r22	; 0x02
    2e54:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2e56:	8a 81       	ldd	r24, Y+2	; 0x02
    2e58:	88 30       	cpi	r24, 0x08	; 8
    2e5a:	08 f0       	brcs	.+2      	; 0x2e5e <GPIO_writePin+0x1c>
    2e5c:	d5 c0       	rjmp	.+426    	; 0x3008 <GPIO_writePin+0x1c6>
    2e5e:	89 81       	ldd	r24, Y+1	; 0x01
    2e60:	84 30       	cpi	r24, 0x04	; 4
    2e62:	08 f0       	brcs	.+2      	; 0x2e66 <GPIO_writePin+0x24>
    2e64:	d1 c0       	rjmp	.+418    	; 0x3008 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    2e66:	89 81       	ldd	r24, Y+1	; 0x01
    2e68:	28 2f       	mov	r18, r24
    2e6a:	30 e0       	ldi	r19, 0x00	; 0
    2e6c:	3d 83       	std	Y+5, r19	; 0x05
    2e6e:	2c 83       	std	Y+4, r18	; 0x04
    2e70:	8c 81       	ldd	r24, Y+4	; 0x04
    2e72:	9d 81       	ldd	r25, Y+5	; 0x05
    2e74:	81 30       	cpi	r24, 0x01	; 1
    2e76:	91 05       	cpc	r25, r1
    2e78:	09 f4       	brne	.+2      	; 0x2e7c <GPIO_writePin+0x3a>
    2e7a:	43 c0       	rjmp	.+134    	; 0x2f02 <GPIO_writePin+0xc0>
    2e7c:	2c 81       	ldd	r18, Y+4	; 0x04
    2e7e:	3d 81       	ldd	r19, Y+5	; 0x05
    2e80:	22 30       	cpi	r18, 0x02	; 2
    2e82:	31 05       	cpc	r19, r1
    2e84:	2c f4       	brge	.+10     	; 0x2e90 <GPIO_writePin+0x4e>
    2e86:	8c 81       	ldd	r24, Y+4	; 0x04
    2e88:	9d 81       	ldd	r25, Y+5	; 0x05
    2e8a:	00 97       	sbiw	r24, 0x00	; 0
    2e8c:	71 f0       	breq	.+28     	; 0x2eaa <GPIO_writePin+0x68>
    2e8e:	bc c0       	rjmp	.+376    	; 0x3008 <GPIO_writePin+0x1c6>
    2e90:	2c 81       	ldd	r18, Y+4	; 0x04
    2e92:	3d 81       	ldd	r19, Y+5	; 0x05
    2e94:	22 30       	cpi	r18, 0x02	; 2
    2e96:	31 05       	cpc	r19, r1
    2e98:	09 f4       	brne	.+2      	; 0x2e9c <GPIO_writePin+0x5a>
    2e9a:	5f c0       	rjmp	.+190    	; 0x2f5a <GPIO_writePin+0x118>
    2e9c:	8c 81       	ldd	r24, Y+4	; 0x04
    2e9e:	9d 81       	ldd	r25, Y+5	; 0x05
    2ea0:	83 30       	cpi	r24, 0x03	; 3
    2ea2:	91 05       	cpc	r25, r1
    2ea4:	09 f4       	brne	.+2      	; 0x2ea8 <GPIO_writePin+0x66>
    2ea6:	85 c0       	rjmp	.+266    	; 0x2fb2 <GPIO_writePin+0x170>
    2ea8:	af c0       	rjmp	.+350    	; 0x3008 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    2eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    2eac:	81 30       	cpi	r24, 0x01	; 1
    2eae:	a1 f4       	brne	.+40     	; 0x2ed8 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    2eb0:	ab e3       	ldi	r26, 0x3B	; 59
    2eb2:	b0 e0       	ldi	r27, 0x00	; 0
    2eb4:	eb e3       	ldi	r30, 0x3B	; 59
    2eb6:	f0 e0       	ldi	r31, 0x00	; 0
    2eb8:	80 81       	ld	r24, Z
    2eba:	48 2f       	mov	r20, r24
    2ebc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ebe:	28 2f       	mov	r18, r24
    2ec0:	30 e0       	ldi	r19, 0x00	; 0
    2ec2:	81 e0       	ldi	r24, 0x01	; 1
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	02 2e       	mov	r0, r18
    2ec8:	02 c0       	rjmp	.+4      	; 0x2ece <GPIO_writePin+0x8c>
    2eca:	88 0f       	add	r24, r24
    2ecc:	99 1f       	adc	r25, r25
    2ece:	0a 94       	dec	r0
    2ed0:	e2 f7       	brpl	.-8      	; 0x2eca <GPIO_writePin+0x88>
    2ed2:	84 2b       	or	r24, r20
    2ed4:	8c 93       	st	X, r24
    2ed6:	98 c0       	rjmp	.+304    	; 0x3008 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    2ed8:	ab e3       	ldi	r26, 0x3B	; 59
    2eda:	b0 e0       	ldi	r27, 0x00	; 0
    2edc:	eb e3       	ldi	r30, 0x3B	; 59
    2ede:	f0 e0       	ldi	r31, 0x00	; 0
    2ee0:	80 81       	ld	r24, Z
    2ee2:	48 2f       	mov	r20, r24
    2ee4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ee6:	28 2f       	mov	r18, r24
    2ee8:	30 e0       	ldi	r19, 0x00	; 0
    2eea:	81 e0       	ldi	r24, 0x01	; 1
    2eec:	90 e0       	ldi	r25, 0x00	; 0
    2eee:	02 2e       	mov	r0, r18
    2ef0:	02 c0       	rjmp	.+4      	; 0x2ef6 <GPIO_writePin+0xb4>
    2ef2:	88 0f       	add	r24, r24
    2ef4:	99 1f       	adc	r25, r25
    2ef6:	0a 94       	dec	r0
    2ef8:	e2 f7       	brpl	.-8      	; 0x2ef2 <GPIO_writePin+0xb0>
    2efa:	80 95       	com	r24
    2efc:	84 23       	and	r24, r20
    2efe:	8c 93       	st	X, r24
    2f00:	83 c0       	rjmp	.+262    	; 0x3008 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    2f02:	8b 81       	ldd	r24, Y+3	; 0x03
    2f04:	81 30       	cpi	r24, 0x01	; 1
    2f06:	a1 f4       	brne	.+40     	; 0x2f30 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    2f08:	a8 e3       	ldi	r26, 0x38	; 56
    2f0a:	b0 e0       	ldi	r27, 0x00	; 0
    2f0c:	e8 e3       	ldi	r30, 0x38	; 56
    2f0e:	f0 e0       	ldi	r31, 0x00	; 0
    2f10:	80 81       	ld	r24, Z
    2f12:	48 2f       	mov	r20, r24
    2f14:	8a 81       	ldd	r24, Y+2	; 0x02
    2f16:	28 2f       	mov	r18, r24
    2f18:	30 e0       	ldi	r19, 0x00	; 0
    2f1a:	81 e0       	ldi	r24, 0x01	; 1
    2f1c:	90 e0       	ldi	r25, 0x00	; 0
    2f1e:	02 2e       	mov	r0, r18
    2f20:	02 c0       	rjmp	.+4      	; 0x2f26 <GPIO_writePin+0xe4>
    2f22:	88 0f       	add	r24, r24
    2f24:	99 1f       	adc	r25, r25
    2f26:	0a 94       	dec	r0
    2f28:	e2 f7       	brpl	.-8      	; 0x2f22 <GPIO_writePin+0xe0>
    2f2a:	84 2b       	or	r24, r20
    2f2c:	8c 93       	st	X, r24
    2f2e:	6c c0       	rjmp	.+216    	; 0x3008 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    2f30:	a8 e3       	ldi	r26, 0x38	; 56
    2f32:	b0 e0       	ldi	r27, 0x00	; 0
    2f34:	e8 e3       	ldi	r30, 0x38	; 56
    2f36:	f0 e0       	ldi	r31, 0x00	; 0
    2f38:	80 81       	ld	r24, Z
    2f3a:	48 2f       	mov	r20, r24
    2f3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f3e:	28 2f       	mov	r18, r24
    2f40:	30 e0       	ldi	r19, 0x00	; 0
    2f42:	81 e0       	ldi	r24, 0x01	; 1
    2f44:	90 e0       	ldi	r25, 0x00	; 0
    2f46:	02 2e       	mov	r0, r18
    2f48:	02 c0       	rjmp	.+4      	; 0x2f4e <GPIO_writePin+0x10c>
    2f4a:	88 0f       	add	r24, r24
    2f4c:	99 1f       	adc	r25, r25
    2f4e:	0a 94       	dec	r0
    2f50:	e2 f7       	brpl	.-8      	; 0x2f4a <GPIO_writePin+0x108>
    2f52:	80 95       	com	r24
    2f54:	84 23       	and	r24, r20
    2f56:	8c 93       	st	X, r24
    2f58:	57 c0       	rjmp	.+174    	; 0x3008 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    2f5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f5c:	81 30       	cpi	r24, 0x01	; 1
    2f5e:	a1 f4       	brne	.+40     	; 0x2f88 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    2f60:	a5 e3       	ldi	r26, 0x35	; 53
    2f62:	b0 e0       	ldi	r27, 0x00	; 0
    2f64:	e5 e3       	ldi	r30, 0x35	; 53
    2f66:	f0 e0       	ldi	r31, 0x00	; 0
    2f68:	80 81       	ld	r24, Z
    2f6a:	48 2f       	mov	r20, r24
    2f6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f6e:	28 2f       	mov	r18, r24
    2f70:	30 e0       	ldi	r19, 0x00	; 0
    2f72:	81 e0       	ldi	r24, 0x01	; 1
    2f74:	90 e0       	ldi	r25, 0x00	; 0
    2f76:	02 2e       	mov	r0, r18
    2f78:	02 c0       	rjmp	.+4      	; 0x2f7e <GPIO_writePin+0x13c>
    2f7a:	88 0f       	add	r24, r24
    2f7c:	99 1f       	adc	r25, r25
    2f7e:	0a 94       	dec	r0
    2f80:	e2 f7       	brpl	.-8      	; 0x2f7a <GPIO_writePin+0x138>
    2f82:	84 2b       	or	r24, r20
    2f84:	8c 93       	st	X, r24
    2f86:	40 c0       	rjmp	.+128    	; 0x3008 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    2f88:	a5 e3       	ldi	r26, 0x35	; 53
    2f8a:	b0 e0       	ldi	r27, 0x00	; 0
    2f8c:	e5 e3       	ldi	r30, 0x35	; 53
    2f8e:	f0 e0       	ldi	r31, 0x00	; 0
    2f90:	80 81       	ld	r24, Z
    2f92:	48 2f       	mov	r20, r24
    2f94:	8a 81       	ldd	r24, Y+2	; 0x02
    2f96:	28 2f       	mov	r18, r24
    2f98:	30 e0       	ldi	r19, 0x00	; 0
    2f9a:	81 e0       	ldi	r24, 0x01	; 1
    2f9c:	90 e0       	ldi	r25, 0x00	; 0
    2f9e:	02 2e       	mov	r0, r18
    2fa0:	02 c0       	rjmp	.+4      	; 0x2fa6 <GPIO_writePin+0x164>
    2fa2:	88 0f       	add	r24, r24
    2fa4:	99 1f       	adc	r25, r25
    2fa6:	0a 94       	dec	r0
    2fa8:	e2 f7       	brpl	.-8      	; 0x2fa2 <GPIO_writePin+0x160>
    2faa:	80 95       	com	r24
    2fac:	84 23       	and	r24, r20
    2fae:	8c 93       	st	X, r24
    2fb0:	2b c0       	rjmp	.+86     	; 0x3008 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    2fb2:	8b 81       	ldd	r24, Y+3	; 0x03
    2fb4:	81 30       	cpi	r24, 0x01	; 1
    2fb6:	a1 f4       	brne	.+40     	; 0x2fe0 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    2fb8:	a2 e3       	ldi	r26, 0x32	; 50
    2fba:	b0 e0       	ldi	r27, 0x00	; 0
    2fbc:	e2 e3       	ldi	r30, 0x32	; 50
    2fbe:	f0 e0       	ldi	r31, 0x00	; 0
    2fc0:	80 81       	ld	r24, Z
    2fc2:	48 2f       	mov	r20, r24
    2fc4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc6:	28 2f       	mov	r18, r24
    2fc8:	30 e0       	ldi	r19, 0x00	; 0
    2fca:	81 e0       	ldi	r24, 0x01	; 1
    2fcc:	90 e0       	ldi	r25, 0x00	; 0
    2fce:	02 2e       	mov	r0, r18
    2fd0:	02 c0       	rjmp	.+4      	; 0x2fd6 <GPIO_writePin+0x194>
    2fd2:	88 0f       	add	r24, r24
    2fd4:	99 1f       	adc	r25, r25
    2fd6:	0a 94       	dec	r0
    2fd8:	e2 f7       	brpl	.-8      	; 0x2fd2 <GPIO_writePin+0x190>
    2fda:	84 2b       	or	r24, r20
    2fdc:	8c 93       	st	X, r24
    2fde:	14 c0       	rjmp	.+40     	; 0x3008 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    2fe0:	a2 e3       	ldi	r26, 0x32	; 50
    2fe2:	b0 e0       	ldi	r27, 0x00	; 0
    2fe4:	e2 e3       	ldi	r30, 0x32	; 50
    2fe6:	f0 e0       	ldi	r31, 0x00	; 0
    2fe8:	80 81       	ld	r24, Z
    2fea:	48 2f       	mov	r20, r24
    2fec:	8a 81       	ldd	r24, Y+2	; 0x02
    2fee:	28 2f       	mov	r18, r24
    2ff0:	30 e0       	ldi	r19, 0x00	; 0
    2ff2:	81 e0       	ldi	r24, 0x01	; 1
    2ff4:	90 e0       	ldi	r25, 0x00	; 0
    2ff6:	02 2e       	mov	r0, r18
    2ff8:	02 c0       	rjmp	.+4      	; 0x2ffe <GPIO_writePin+0x1bc>
    2ffa:	88 0f       	add	r24, r24
    2ffc:	99 1f       	adc	r25, r25
    2ffe:	0a 94       	dec	r0
    3000:	e2 f7       	brpl	.-8      	; 0x2ffa <GPIO_writePin+0x1b8>
    3002:	80 95       	com	r24
    3004:	84 23       	and	r24, r20
    3006:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    3008:	0f 90       	pop	r0
    300a:	0f 90       	pop	r0
    300c:	0f 90       	pop	r0
    300e:	0f 90       	pop	r0
    3010:	0f 90       	pop	r0
    3012:	cf 91       	pop	r28
    3014:	df 91       	pop	r29
    3016:	08 95       	ret

00003018 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    3018:	df 93       	push	r29
    301a:	cf 93       	push	r28
    301c:	00 d0       	rcall	.+0      	; 0x301e <GPIO_readPin+0x6>
    301e:	00 d0       	rcall	.+0      	; 0x3020 <GPIO_readPin+0x8>
    3020:	0f 92       	push	r0
    3022:	cd b7       	in	r28, 0x3d	; 61
    3024:	de b7       	in	r29, 0x3e	; 62
    3026:	8a 83       	std	Y+2, r24	; 0x02
    3028:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    302a:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    302c:	8b 81       	ldd	r24, Y+3	; 0x03
    302e:	88 30       	cpi	r24, 0x08	; 8
    3030:	08 f0       	brcs	.+2      	; 0x3034 <GPIO_readPin+0x1c>
    3032:	84 c0       	rjmp	.+264    	; 0x313c <GPIO_readPin+0x124>
    3034:	8a 81       	ldd	r24, Y+2	; 0x02
    3036:	84 30       	cpi	r24, 0x04	; 4
    3038:	08 f0       	brcs	.+2      	; 0x303c <GPIO_readPin+0x24>
    303a:	80 c0       	rjmp	.+256    	; 0x313c <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    303c:	8a 81       	ldd	r24, Y+2	; 0x02
    303e:	28 2f       	mov	r18, r24
    3040:	30 e0       	ldi	r19, 0x00	; 0
    3042:	3d 83       	std	Y+5, r19	; 0x05
    3044:	2c 83       	std	Y+4, r18	; 0x04
    3046:	4c 81       	ldd	r20, Y+4	; 0x04
    3048:	5d 81       	ldd	r21, Y+5	; 0x05
    304a:	41 30       	cpi	r20, 0x01	; 1
    304c:	51 05       	cpc	r21, r1
    304e:	79 f1       	breq	.+94     	; 0x30ae <GPIO_readPin+0x96>
    3050:	8c 81       	ldd	r24, Y+4	; 0x04
    3052:	9d 81       	ldd	r25, Y+5	; 0x05
    3054:	82 30       	cpi	r24, 0x02	; 2
    3056:	91 05       	cpc	r25, r1
    3058:	34 f4       	brge	.+12     	; 0x3066 <GPIO_readPin+0x4e>
    305a:	2c 81       	ldd	r18, Y+4	; 0x04
    305c:	3d 81       	ldd	r19, Y+5	; 0x05
    305e:	21 15       	cp	r18, r1
    3060:	31 05       	cpc	r19, r1
    3062:	69 f0       	breq	.+26     	; 0x307e <GPIO_readPin+0x66>
    3064:	6b c0       	rjmp	.+214    	; 0x313c <GPIO_readPin+0x124>
    3066:	4c 81       	ldd	r20, Y+4	; 0x04
    3068:	5d 81       	ldd	r21, Y+5	; 0x05
    306a:	42 30       	cpi	r20, 0x02	; 2
    306c:	51 05       	cpc	r21, r1
    306e:	b9 f1       	breq	.+110    	; 0x30de <GPIO_readPin+0xc6>
    3070:	8c 81       	ldd	r24, Y+4	; 0x04
    3072:	9d 81       	ldd	r25, Y+5	; 0x05
    3074:	83 30       	cpi	r24, 0x03	; 3
    3076:	91 05       	cpc	r25, r1
    3078:	09 f4       	brne	.+2      	; 0x307c <GPIO_readPin+0x64>
    307a:	49 c0       	rjmp	.+146    	; 0x310e <GPIO_readPin+0xf6>
    307c:	5f c0       	rjmp	.+190    	; 0x313c <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    307e:	e9 e3       	ldi	r30, 0x39	; 57
    3080:	f0 e0       	ldi	r31, 0x00	; 0
    3082:	80 81       	ld	r24, Z
    3084:	28 2f       	mov	r18, r24
    3086:	30 e0       	ldi	r19, 0x00	; 0
    3088:	8b 81       	ldd	r24, Y+3	; 0x03
    308a:	88 2f       	mov	r24, r24
    308c:	90 e0       	ldi	r25, 0x00	; 0
    308e:	a9 01       	movw	r20, r18
    3090:	02 c0       	rjmp	.+4      	; 0x3096 <GPIO_readPin+0x7e>
    3092:	55 95       	asr	r21
    3094:	47 95       	ror	r20
    3096:	8a 95       	dec	r24
    3098:	e2 f7       	brpl	.-8      	; 0x3092 <GPIO_readPin+0x7a>
    309a:	ca 01       	movw	r24, r20
    309c:	81 70       	andi	r24, 0x01	; 1
    309e:	90 70       	andi	r25, 0x00	; 0
    30a0:	88 23       	and	r24, r24
    30a2:	19 f0       	breq	.+6      	; 0x30aa <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    30a4:	81 e0       	ldi	r24, 0x01	; 1
    30a6:	89 83       	std	Y+1, r24	; 0x01
    30a8:	49 c0       	rjmp	.+146    	; 0x313c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    30aa:	19 82       	std	Y+1, r1	; 0x01
    30ac:	47 c0       	rjmp	.+142    	; 0x313c <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    30ae:	e6 e3       	ldi	r30, 0x36	; 54
    30b0:	f0 e0       	ldi	r31, 0x00	; 0
    30b2:	80 81       	ld	r24, Z
    30b4:	28 2f       	mov	r18, r24
    30b6:	30 e0       	ldi	r19, 0x00	; 0
    30b8:	8b 81       	ldd	r24, Y+3	; 0x03
    30ba:	88 2f       	mov	r24, r24
    30bc:	90 e0       	ldi	r25, 0x00	; 0
    30be:	a9 01       	movw	r20, r18
    30c0:	02 c0       	rjmp	.+4      	; 0x30c6 <GPIO_readPin+0xae>
    30c2:	55 95       	asr	r21
    30c4:	47 95       	ror	r20
    30c6:	8a 95       	dec	r24
    30c8:	e2 f7       	brpl	.-8      	; 0x30c2 <GPIO_readPin+0xaa>
    30ca:	ca 01       	movw	r24, r20
    30cc:	81 70       	andi	r24, 0x01	; 1
    30ce:	90 70       	andi	r25, 0x00	; 0
    30d0:	88 23       	and	r24, r24
    30d2:	19 f0       	breq	.+6      	; 0x30da <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    30d4:	81 e0       	ldi	r24, 0x01	; 1
    30d6:	89 83       	std	Y+1, r24	; 0x01
    30d8:	31 c0       	rjmp	.+98     	; 0x313c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    30da:	19 82       	std	Y+1, r1	; 0x01
    30dc:	2f c0       	rjmp	.+94     	; 0x313c <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    30de:	e3 e3       	ldi	r30, 0x33	; 51
    30e0:	f0 e0       	ldi	r31, 0x00	; 0
    30e2:	80 81       	ld	r24, Z
    30e4:	28 2f       	mov	r18, r24
    30e6:	30 e0       	ldi	r19, 0x00	; 0
    30e8:	8b 81       	ldd	r24, Y+3	; 0x03
    30ea:	88 2f       	mov	r24, r24
    30ec:	90 e0       	ldi	r25, 0x00	; 0
    30ee:	a9 01       	movw	r20, r18
    30f0:	02 c0       	rjmp	.+4      	; 0x30f6 <GPIO_readPin+0xde>
    30f2:	55 95       	asr	r21
    30f4:	47 95       	ror	r20
    30f6:	8a 95       	dec	r24
    30f8:	e2 f7       	brpl	.-8      	; 0x30f2 <GPIO_readPin+0xda>
    30fa:	ca 01       	movw	r24, r20
    30fc:	81 70       	andi	r24, 0x01	; 1
    30fe:	90 70       	andi	r25, 0x00	; 0
    3100:	88 23       	and	r24, r24
    3102:	19 f0       	breq	.+6      	; 0x310a <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    3104:	81 e0       	ldi	r24, 0x01	; 1
    3106:	89 83       	std	Y+1, r24	; 0x01
    3108:	19 c0       	rjmp	.+50     	; 0x313c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    310a:	19 82       	std	Y+1, r1	; 0x01
    310c:	17 c0       	rjmp	.+46     	; 0x313c <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    310e:	e0 e3       	ldi	r30, 0x30	; 48
    3110:	f0 e0       	ldi	r31, 0x00	; 0
    3112:	80 81       	ld	r24, Z
    3114:	28 2f       	mov	r18, r24
    3116:	30 e0       	ldi	r19, 0x00	; 0
    3118:	8b 81       	ldd	r24, Y+3	; 0x03
    311a:	88 2f       	mov	r24, r24
    311c:	90 e0       	ldi	r25, 0x00	; 0
    311e:	a9 01       	movw	r20, r18
    3120:	02 c0       	rjmp	.+4      	; 0x3126 <GPIO_readPin+0x10e>
    3122:	55 95       	asr	r21
    3124:	47 95       	ror	r20
    3126:	8a 95       	dec	r24
    3128:	e2 f7       	brpl	.-8      	; 0x3122 <GPIO_readPin+0x10a>
    312a:	ca 01       	movw	r24, r20
    312c:	81 70       	andi	r24, 0x01	; 1
    312e:	90 70       	andi	r25, 0x00	; 0
    3130:	88 23       	and	r24, r24
    3132:	19 f0       	breq	.+6      	; 0x313a <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    3134:	81 e0       	ldi	r24, 0x01	; 1
    3136:	89 83       	std	Y+1, r24	; 0x01
    3138:	01 c0       	rjmp	.+2      	; 0x313c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    313a:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    313c:	89 81       	ldd	r24, Y+1	; 0x01
}
    313e:	0f 90       	pop	r0
    3140:	0f 90       	pop	r0
    3142:	0f 90       	pop	r0
    3144:	0f 90       	pop	r0
    3146:	0f 90       	pop	r0
    3148:	cf 91       	pop	r28
    314a:	df 91       	pop	r29
    314c:	08 95       	ret

0000314e <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    314e:	df 93       	push	r29
    3150:	cf 93       	push	r28
    3152:	00 d0       	rcall	.+0      	; 0x3154 <GPIO_setupPortDirection+0x6>
    3154:	00 d0       	rcall	.+0      	; 0x3156 <GPIO_setupPortDirection+0x8>
    3156:	cd b7       	in	r28, 0x3d	; 61
    3158:	de b7       	in	r29, 0x3e	; 62
    315a:	89 83       	std	Y+1, r24	; 0x01
    315c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    315e:	89 81       	ldd	r24, Y+1	; 0x01
    3160:	84 30       	cpi	r24, 0x04	; 4
    3162:	90 f5       	brcc	.+100    	; 0x31c8 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    3164:	89 81       	ldd	r24, Y+1	; 0x01
    3166:	28 2f       	mov	r18, r24
    3168:	30 e0       	ldi	r19, 0x00	; 0
    316a:	3c 83       	std	Y+4, r19	; 0x04
    316c:	2b 83       	std	Y+3, r18	; 0x03
    316e:	8b 81       	ldd	r24, Y+3	; 0x03
    3170:	9c 81       	ldd	r25, Y+4	; 0x04
    3172:	81 30       	cpi	r24, 0x01	; 1
    3174:	91 05       	cpc	r25, r1
    3176:	d1 f0       	breq	.+52     	; 0x31ac <GPIO_setupPortDirection+0x5e>
    3178:	2b 81       	ldd	r18, Y+3	; 0x03
    317a:	3c 81       	ldd	r19, Y+4	; 0x04
    317c:	22 30       	cpi	r18, 0x02	; 2
    317e:	31 05       	cpc	r19, r1
    3180:	2c f4       	brge	.+10     	; 0x318c <GPIO_setupPortDirection+0x3e>
    3182:	8b 81       	ldd	r24, Y+3	; 0x03
    3184:	9c 81       	ldd	r25, Y+4	; 0x04
    3186:	00 97       	sbiw	r24, 0x00	; 0
    3188:	61 f0       	breq	.+24     	; 0x31a2 <GPIO_setupPortDirection+0x54>
    318a:	1e c0       	rjmp	.+60     	; 0x31c8 <GPIO_setupPortDirection+0x7a>
    318c:	2b 81       	ldd	r18, Y+3	; 0x03
    318e:	3c 81       	ldd	r19, Y+4	; 0x04
    3190:	22 30       	cpi	r18, 0x02	; 2
    3192:	31 05       	cpc	r19, r1
    3194:	81 f0       	breq	.+32     	; 0x31b6 <GPIO_setupPortDirection+0x68>
    3196:	8b 81       	ldd	r24, Y+3	; 0x03
    3198:	9c 81       	ldd	r25, Y+4	; 0x04
    319a:	83 30       	cpi	r24, 0x03	; 3
    319c:	91 05       	cpc	r25, r1
    319e:	81 f0       	breq	.+32     	; 0x31c0 <GPIO_setupPortDirection+0x72>
    31a0:	13 c0       	rjmp	.+38     	; 0x31c8 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    31a2:	ea e3       	ldi	r30, 0x3A	; 58
    31a4:	f0 e0       	ldi	r31, 0x00	; 0
    31a6:	8a 81       	ldd	r24, Y+2	; 0x02
    31a8:	80 83       	st	Z, r24
    31aa:	0e c0       	rjmp	.+28     	; 0x31c8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    31ac:	e7 e3       	ldi	r30, 0x37	; 55
    31ae:	f0 e0       	ldi	r31, 0x00	; 0
    31b0:	8a 81       	ldd	r24, Y+2	; 0x02
    31b2:	80 83       	st	Z, r24
    31b4:	09 c0       	rjmp	.+18     	; 0x31c8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    31b6:	e4 e3       	ldi	r30, 0x34	; 52
    31b8:	f0 e0       	ldi	r31, 0x00	; 0
    31ba:	8a 81       	ldd	r24, Y+2	; 0x02
    31bc:	80 83       	st	Z, r24
    31be:	04 c0       	rjmp	.+8      	; 0x31c8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    31c0:	e1 e3       	ldi	r30, 0x31	; 49
    31c2:	f0 e0       	ldi	r31, 0x00	; 0
    31c4:	8a 81       	ldd	r24, Y+2	; 0x02
    31c6:	80 83       	st	Z, r24
			break;
		}
	}
}
    31c8:	0f 90       	pop	r0
    31ca:	0f 90       	pop	r0
    31cc:	0f 90       	pop	r0
    31ce:	0f 90       	pop	r0
    31d0:	cf 91       	pop	r28
    31d2:	df 91       	pop	r29
    31d4:	08 95       	ret

000031d6 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    31d6:	df 93       	push	r29
    31d8:	cf 93       	push	r28
    31da:	00 d0       	rcall	.+0      	; 0x31dc <GPIO_writePort+0x6>
    31dc:	00 d0       	rcall	.+0      	; 0x31de <GPIO_writePort+0x8>
    31de:	cd b7       	in	r28, 0x3d	; 61
    31e0:	de b7       	in	r29, 0x3e	; 62
    31e2:	89 83       	std	Y+1, r24	; 0x01
    31e4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    31e6:	89 81       	ldd	r24, Y+1	; 0x01
    31e8:	84 30       	cpi	r24, 0x04	; 4
    31ea:	90 f5       	brcc	.+100    	; 0x3250 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    31ec:	89 81       	ldd	r24, Y+1	; 0x01
    31ee:	28 2f       	mov	r18, r24
    31f0:	30 e0       	ldi	r19, 0x00	; 0
    31f2:	3c 83       	std	Y+4, r19	; 0x04
    31f4:	2b 83       	std	Y+3, r18	; 0x03
    31f6:	8b 81       	ldd	r24, Y+3	; 0x03
    31f8:	9c 81       	ldd	r25, Y+4	; 0x04
    31fa:	81 30       	cpi	r24, 0x01	; 1
    31fc:	91 05       	cpc	r25, r1
    31fe:	d1 f0       	breq	.+52     	; 0x3234 <GPIO_writePort+0x5e>
    3200:	2b 81       	ldd	r18, Y+3	; 0x03
    3202:	3c 81       	ldd	r19, Y+4	; 0x04
    3204:	22 30       	cpi	r18, 0x02	; 2
    3206:	31 05       	cpc	r19, r1
    3208:	2c f4       	brge	.+10     	; 0x3214 <GPIO_writePort+0x3e>
    320a:	8b 81       	ldd	r24, Y+3	; 0x03
    320c:	9c 81       	ldd	r25, Y+4	; 0x04
    320e:	00 97       	sbiw	r24, 0x00	; 0
    3210:	61 f0       	breq	.+24     	; 0x322a <GPIO_writePort+0x54>
    3212:	1e c0       	rjmp	.+60     	; 0x3250 <GPIO_writePort+0x7a>
    3214:	2b 81       	ldd	r18, Y+3	; 0x03
    3216:	3c 81       	ldd	r19, Y+4	; 0x04
    3218:	22 30       	cpi	r18, 0x02	; 2
    321a:	31 05       	cpc	r19, r1
    321c:	81 f0       	breq	.+32     	; 0x323e <GPIO_writePort+0x68>
    321e:	8b 81       	ldd	r24, Y+3	; 0x03
    3220:	9c 81       	ldd	r25, Y+4	; 0x04
    3222:	83 30       	cpi	r24, 0x03	; 3
    3224:	91 05       	cpc	r25, r1
    3226:	81 f0       	breq	.+32     	; 0x3248 <GPIO_writePort+0x72>
    3228:	13 c0       	rjmp	.+38     	; 0x3250 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    322a:	eb e3       	ldi	r30, 0x3B	; 59
    322c:	f0 e0       	ldi	r31, 0x00	; 0
    322e:	8a 81       	ldd	r24, Y+2	; 0x02
    3230:	80 83       	st	Z, r24
    3232:	0e c0       	rjmp	.+28     	; 0x3250 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    3234:	e8 e3       	ldi	r30, 0x38	; 56
    3236:	f0 e0       	ldi	r31, 0x00	; 0
    3238:	8a 81       	ldd	r24, Y+2	; 0x02
    323a:	80 83       	st	Z, r24
    323c:	09 c0       	rjmp	.+18     	; 0x3250 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    323e:	e5 e3       	ldi	r30, 0x35	; 53
    3240:	f0 e0       	ldi	r31, 0x00	; 0
    3242:	8a 81       	ldd	r24, Y+2	; 0x02
    3244:	80 83       	st	Z, r24
    3246:	04 c0       	rjmp	.+8      	; 0x3250 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    3248:	e2 e3       	ldi	r30, 0x32	; 50
    324a:	f0 e0       	ldi	r31, 0x00	; 0
    324c:	8a 81       	ldd	r24, Y+2	; 0x02
    324e:	80 83       	st	Z, r24
			break;
		}
	}
}
    3250:	0f 90       	pop	r0
    3252:	0f 90       	pop	r0
    3254:	0f 90       	pop	r0
    3256:	0f 90       	pop	r0
    3258:	cf 91       	pop	r28
    325a:	df 91       	pop	r29
    325c:	08 95       	ret

0000325e <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    325e:	df 93       	push	r29
    3260:	cf 93       	push	r28
    3262:	00 d0       	rcall	.+0      	; 0x3264 <GPIO_readPort+0x6>
    3264:	00 d0       	rcall	.+0      	; 0x3266 <GPIO_readPort+0x8>
    3266:	cd b7       	in	r28, 0x3d	; 61
    3268:	de b7       	in	r29, 0x3e	; 62
    326a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    326c:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    326e:	8a 81       	ldd	r24, Y+2	; 0x02
    3270:	84 30       	cpi	r24, 0x04	; 4
    3272:	90 f5       	brcc	.+100    	; 0x32d8 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    3274:	8a 81       	ldd	r24, Y+2	; 0x02
    3276:	28 2f       	mov	r18, r24
    3278:	30 e0       	ldi	r19, 0x00	; 0
    327a:	3c 83       	std	Y+4, r19	; 0x04
    327c:	2b 83       	std	Y+3, r18	; 0x03
    327e:	8b 81       	ldd	r24, Y+3	; 0x03
    3280:	9c 81       	ldd	r25, Y+4	; 0x04
    3282:	81 30       	cpi	r24, 0x01	; 1
    3284:	91 05       	cpc	r25, r1
    3286:	d1 f0       	breq	.+52     	; 0x32bc <GPIO_readPort+0x5e>
    3288:	2b 81       	ldd	r18, Y+3	; 0x03
    328a:	3c 81       	ldd	r19, Y+4	; 0x04
    328c:	22 30       	cpi	r18, 0x02	; 2
    328e:	31 05       	cpc	r19, r1
    3290:	2c f4       	brge	.+10     	; 0x329c <GPIO_readPort+0x3e>
    3292:	8b 81       	ldd	r24, Y+3	; 0x03
    3294:	9c 81       	ldd	r25, Y+4	; 0x04
    3296:	00 97       	sbiw	r24, 0x00	; 0
    3298:	61 f0       	breq	.+24     	; 0x32b2 <GPIO_readPort+0x54>
    329a:	1e c0       	rjmp	.+60     	; 0x32d8 <GPIO_readPort+0x7a>
    329c:	2b 81       	ldd	r18, Y+3	; 0x03
    329e:	3c 81       	ldd	r19, Y+4	; 0x04
    32a0:	22 30       	cpi	r18, 0x02	; 2
    32a2:	31 05       	cpc	r19, r1
    32a4:	81 f0       	breq	.+32     	; 0x32c6 <GPIO_readPort+0x68>
    32a6:	8b 81       	ldd	r24, Y+3	; 0x03
    32a8:	9c 81       	ldd	r25, Y+4	; 0x04
    32aa:	83 30       	cpi	r24, 0x03	; 3
    32ac:	91 05       	cpc	r25, r1
    32ae:	81 f0       	breq	.+32     	; 0x32d0 <GPIO_readPort+0x72>
    32b0:	13 c0       	rjmp	.+38     	; 0x32d8 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    32b2:	e9 e3       	ldi	r30, 0x39	; 57
    32b4:	f0 e0       	ldi	r31, 0x00	; 0
    32b6:	80 81       	ld	r24, Z
    32b8:	89 83       	std	Y+1, r24	; 0x01
    32ba:	0e c0       	rjmp	.+28     	; 0x32d8 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    32bc:	e6 e3       	ldi	r30, 0x36	; 54
    32be:	f0 e0       	ldi	r31, 0x00	; 0
    32c0:	80 81       	ld	r24, Z
    32c2:	89 83       	std	Y+1, r24	; 0x01
    32c4:	09 c0       	rjmp	.+18     	; 0x32d8 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    32c6:	e3 e3       	ldi	r30, 0x33	; 51
    32c8:	f0 e0       	ldi	r31, 0x00	; 0
    32ca:	80 81       	ld	r24, Z
    32cc:	89 83       	std	Y+1, r24	; 0x01
    32ce:	04 c0       	rjmp	.+8      	; 0x32d8 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    32d0:	e0 e3       	ldi	r30, 0x30	; 48
    32d2:	f0 e0       	ldi	r31, 0x00	; 0
    32d4:	80 81       	ld	r24, Z
    32d6:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    32d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    32da:	0f 90       	pop	r0
    32dc:	0f 90       	pop	r0
    32de:	0f 90       	pop	r0
    32e0:	0f 90       	pop	r0
    32e2:	cf 91       	pop	r28
    32e4:	df 91       	pop	r29
    32e6:	08 95       	ret

000032e8 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    32e8:	df 93       	push	r29
    32ea:	cf 93       	push	r28
    32ec:	00 d0       	rcall	.+0      	; 0x32ee <KEYPAD_getPressedKey+0x6>
    32ee:	cd b7       	in	r28, 0x3d	; 61
    32f0:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    32f2:	81 e0       	ldi	r24, 0x01	; 1
    32f4:	64 e0       	ldi	r22, 0x04	; 4
    32f6:	40 e0       	ldi	r20, 0x00	; 0
    32f8:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    32fc:	81 e0       	ldi	r24, 0x01	; 1
    32fe:	65 e0       	ldi	r22, 0x05	; 5
    3300:	40 e0       	ldi	r20, 0x00	; 0
    3302:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    3306:	81 e0       	ldi	r24, 0x01	; 1
    3308:	66 e0       	ldi	r22, 0x06	; 6
    330a:	40 e0       	ldi	r20, 0x00	; 0
    330c:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    3310:	81 e0       	ldi	r24, 0x01	; 1
    3312:	67 e0       	ldi	r22, 0x07	; 7
    3314:	40 e0       	ldi	r20, 0x00	; 0
    3316:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    331a:	81 e0       	ldi	r24, 0x01	; 1
    331c:	60 e0       	ldi	r22, 0x00	; 0
    331e:	40 e0       	ldi	r20, 0x00	; 0
    3320:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    3324:	81 e0       	ldi	r24, 0x01	; 1
    3326:	61 e0       	ldi	r22, 0x01	; 1
    3328:	40 e0       	ldi	r20, 0x00	; 0
    332a:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    332e:	81 e0       	ldi	r24, 0x01	; 1
    3330:	62 e0       	ldi	r22, 0x02	; 2
    3332:	40 e0       	ldi	r20, 0x00	; 0
    3334:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    3338:	81 e0       	ldi	r24, 0x01	; 1
    333a:	63 e0       	ldi	r22, 0x03	; 3
    333c:	40 e0       	ldi	r20, 0x00	; 0
    333e:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    3342:	19 82       	std	Y+1, r1	; 0x01
    3344:	3b c0       	rjmp	.+118    	; 0x33bc <KEYPAD_getPressedKey+0xd4>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    3346:	89 81       	ldd	r24, Y+1	; 0x01
    3348:	98 2f       	mov	r25, r24
    334a:	9c 5f       	subi	r25, 0xFC	; 252
    334c:	81 e0       	ldi	r24, 0x01	; 1
    334e:	69 2f       	mov	r22, r25
    3350:	41 e0       	ldi	r20, 0x01	; 1
    3352:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    3356:	89 81       	ldd	r24, Y+1	; 0x01
    3358:	98 2f       	mov	r25, r24
    335a:	9c 5f       	subi	r25, 0xFC	; 252
    335c:	81 e0       	ldi	r24, 0x01	; 1
    335e:	69 2f       	mov	r22, r25
    3360:	40 e0       	ldi	r20, 0x00	; 0
    3362:	0e 94 21 17 	call	0x2e42	; 0x2e42 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    3366:	1a 82       	std	Y+2, r1	; 0x02
    3368:	1b c0       	rjmp	.+54     	; 0x33a0 <KEYPAD_getPressedKey+0xb8>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    336a:	81 e0       	ldi	r24, 0x01	; 1
    336c:	6a 81       	ldd	r22, Y+2	; 0x02
    336e:	0e 94 0c 18 	call	0x3018	; 0x3018 <GPIO_readPin>
    3372:	88 23       	and	r24, r24
    3374:	91 f4       	brne	.+36     	; 0x339a <KEYPAD_getPressedKey+0xb2>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((col*KEYPAD_NUM_COLS)+row+1);
    3376:	8a 81       	ldd	r24, Y+2	; 0x02
    3378:	88 2f       	mov	r24, r24
    337a:	90 e0       	ldi	r25, 0x00	; 0
    337c:	88 0f       	add	r24, r24
    337e:	99 1f       	adc	r25, r25
    3380:	88 0f       	add	r24, r24
    3382:	99 1f       	adc	r25, r25
    3384:	98 2f       	mov	r25, r24
    3386:	89 81       	ldd	r24, Y+1	; 0x01
    3388:	89 0f       	add	r24, r25
    338a:	8f 5f       	subi	r24, 0xFF	; 255
    338c:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <KEYPAD_4x4_adjustKeyNumber>
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
		}
	}	
}
    3390:	0f 90       	pop	r0
    3392:	0f 90       	pop	r0
    3394:	cf 91       	pop	r28
    3396:	df 91       	pop	r29
    3398:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    339a:	8a 81       	ldd	r24, Y+2	; 0x02
    339c:	8f 5f       	subi	r24, 0xFF	; 255
    339e:	8a 83       	std	Y+2, r24	; 0x02
    33a0:	8a 81       	ldd	r24, Y+2	; 0x02
    33a2:	84 30       	cpi	r24, 0x04	; 4
    33a4:	10 f3       	brcs	.-60     	; 0x336a <KEYPAD_getPressedKey+0x82>
							return KEYPAD_4x4_adjustKeyNumber((col*KEYPAD_NUM_COLS)+row+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    33a6:	89 81       	ldd	r24, Y+1	; 0x01
    33a8:	98 2f       	mov	r25, r24
    33aa:	9c 5f       	subi	r25, 0xFC	; 252
    33ac:	81 e0       	ldi	r24, 0x01	; 1
    33ae:	69 2f       	mov	r22, r25
    33b0:	40 e0       	ldi	r20, 0x00	; 0
    33b2:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    33b6:	89 81       	ldd	r24, Y+1	; 0x01
    33b8:	8f 5f       	subi	r24, 0xFF	; 255
    33ba:	89 83       	std	Y+1, r24	; 0x01
    33bc:	89 81       	ldd	r24, Y+1	; 0x01
    33be:	84 30       	cpi	r24, 0x04	; 4
    33c0:	10 f2       	brcs	.-124    	; 0x3346 <KEYPAD_getPressedKey+0x5e>
    33c2:	bf cf       	rjmp	.-130    	; 0x3342 <KEYPAD_getPressedKey+0x5a>

000033c4 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    33c4:	df 93       	push	r29
    33c6:	cf 93       	push	r28
    33c8:	00 d0       	rcall	.+0      	; 0x33ca <KEYPAD_4x4_adjustKeyNumber+0x6>
    33ca:	00 d0       	rcall	.+0      	; 0x33cc <KEYPAD_4x4_adjustKeyNumber+0x8>
    33cc:	cd b7       	in	r28, 0x3d	; 61
    33ce:	de b7       	in	r29, 0x3e	; 62
    33d0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    33d2:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    33d4:	8a 81       	ldd	r24, Y+2	; 0x02
    33d6:	28 2f       	mov	r18, r24
    33d8:	30 e0       	ldi	r19, 0x00	; 0
    33da:	3c 83       	std	Y+4, r19	; 0x04
    33dc:	2b 83       	std	Y+3, r18	; 0x03
    33de:	8b 81       	ldd	r24, Y+3	; 0x03
    33e0:	9c 81       	ldd	r25, Y+4	; 0x04
    33e2:	88 30       	cpi	r24, 0x08	; 8
    33e4:	91 05       	cpc	r25, r1
    33e6:	09 f4       	brne	.+2      	; 0x33ea <KEYPAD_4x4_adjustKeyNumber+0x26>
    33e8:	70 c0       	rjmp	.+224    	; 0x34ca <KEYPAD_4x4_adjustKeyNumber+0x106>
    33ea:	2b 81       	ldd	r18, Y+3	; 0x03
    33ec:	3c 81       	ldd	r19, Y+4	; 0x04
    33ee:	29 30       	cpi	r18, 0x09	; 9
    33f0:	31 05       	cpc	r19, r1
    33f2:	5c f5       	brge	.+86     	; 0x344a <KEYPAD_4x4_adjustKeyNumber+0x86>
    33f4:	8b 81       	ldd	r24, Y+3	; 0x03
    33f6:	9c 81       	ldd	r25, Y+4	; 0x04
    33f8:	84 30       	cpi	r24, 0x04	; 4
    33fa:	91 05       	cpc	r25, r1
    33fc:	09 f4       	brne	.+2      	; 0x3400 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    33fe:	59 c0       	rjmp	.+178    	; 0x34b2 <KEYPAD_4x4_adjustKeyNumber+0xee>
    3400:	2b 81       	ldd	r18, Y+3	; 0x03
    3402:	3c 81       	ldd	r19, Y+4	; 0x04
    3404:	25 30       	cpi	r18, 0x05	; 5
    3406:	31 05       	cpc	r19, r1
    3408:	9c f4       	brge	.+38     	; 0x3430 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    340a:	8b 81       	ldd	r24, Y+3	; 0x03
    340c:	9c 81       	ldd	r25, Y+4	; 0x04
    340e:	82 30       	cpi	r24, 0x02	; 2
    3410:	91 05       	cpc	r25, r1
    3412:	09 f4       	brne	.+2      	; 0x3416 <KEYPAD_4x4_adjustKeyNumber+0x52>
    3414:	48 c0       	rjmp	.+144    	; 0x34a6 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    3416:	2b 81       	ldd	r18, Y+3	; 0x03
    3418:	3c 81       	ldd	r19, Y+4	; 0x04
    341a:	23 30       	cpi	r18, 0x03	; 3
    341c:	31 05       	cpc	r19, r1
    341e:	0c f0       	brlt	.+2      	; 0x3422 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    3420:	45 c0       	rjmp	.+138    	; 0x34ac <KEYPAD_4x4_adjustKeyNumber+0xe8>
    3422:	8b 81       	ldd	r24, Y+3	; 0x03
    3424:	9c 81       	ldd	r25, Y+4	; 0x04
    3426:	81 30       	cpi	r24, 0x01	; 1
    3428:	91 05       	cpc	r25, r1
    342a:	09 f4       	brne	.+2      	; 0x342e <KEYPAD_4x4_adjustKeyNumber+0x6a>
    342c:	39 c0       	rjmp	.+114    	; 0x34a0 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    342e:	67 c0       	rjmp	.+206    	; 0x34fe <KEYPAD_4x4_adjustKeyNumber+0x13a>
    3430:	2b 81       	ldd	r18, Y+3	; 0x03
    3432:	3c 81       	ldd	r19, Y+4	; 0x04
    3434:	26 30       	cpi	r18, 0x06	; 6
    3436:	31 05       	cpc	r19, r1
    3438:	09 f4       	brne	.+2      	; 0x343c <KEYPAD_4x4_adjustKeyNumber+0x78>
    343a:	41 c0       	rjmp	.+130    	; 0x34be <KEYPAD_4x4_adjustKeyNumber+0xfa>
    343c:	8b 81       	ldd	r24, Y+3	; 0x03
    343e:	9c 81       	ldd	r25, Y+4	; 0x04
    3440:	87 30       	cpi	r24, 0x07	; 7
    3442:	91 05       	cpc	r25, r1
    3444:	0c f0       	brlt	.+2      	; 0x3448 <KEYPAD_4x4_adjustKeyNumber+0x84>
    3446:	3e c0       	rjmp	.+124    	; 0x34c4 <KEYPAD_4x4_adjustKeyNumber+0x100>
    3448:	37 c0       	rjmp	.+110    	; 0x34b8 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    344a:	2b 81       	ldd	r18, Y+3	; 0x03
    344c:	3c 81       	ldd	r19, Y+4	; 0x04
    344e:	2c 30       	cpi	r18, 0x0C	; 12
    3450:	31 05       	cpc	r19, r1
    3452:	09 f4       	brne	.+2      	; 0x3456 <KEYPAD_4x4_adjustKeyNumber+0x92>
    3454:	46 c0       	rjmp	.+140    	; 0x34e2 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    3456:	8b 81       	ldd	r24, Y+3	; 0x03
    3458:	9c 81       	ldd	r25, Y+4	; 0x04
    345a:	8d 30       	cpi	r24, 0x0D	; 13
    345c:	91 05       	cpc	r25, r1
    345e:	5c f4       	brge	.+22     	; 0x3476 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    3460:	2b 81       	ldd	r18, Y+3	; 0x03
    3462:	3c 81       	ldd	r19, Y+4	; 0x04
    3464:	2a 30       	cpi	r18, 0x0A	; 10
    3466:	31 05       	cpc	r19, r1
    3468:	b1 f1       	breq	.+108    	; 0x34d6 <KEYPAD_4x4_adjustKeyNumber+0x112>
    346a:	8b 81       	ldd	r24, Y+3	; 0x03
    346c:	9c 81       	ldd	r25, Y+4	; 0x04
    346e:	8b 30       	cpi	r24, 0x0B	; 11
    3470:	91 05       	cpc	r25, r1
    3472:	a4 f5       	brge	.+104    	; 0x34dc <KEYPAD_4x4_adjustKeyNumber+0x118>
    3474:	2d c0       	rjmp	.+90     	; 0x34d0 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    3476:	2b 81       	ldd	r18, Y+3	; 0x03
    3478:	3c 81       	ldd	r19, Y+4	; 0x04
    347a:	2e 30       	cpi	r18, 0x0E	; 14
    347c:	31 05       	cpc	r19, r1
    347e:	b9 f1       	breq	.+110    	; 0x34ee <KEYPAD_4x4_adjustKeyNumber+0x12a>
    3480:	8b 81       	ldd	r24, Y+3	; 0x03
    3482:	9c 81       	ldd	r25, Y+4	; 0x04
    3484:	8e 30       	cpi	r24, 0x0E	; 14
    3486:	91 05       	cpc	r25, r1
    3488:	7c f1       	brlt	.+94     	; 0x34e8 <KEYPAD_4x4_adjustKeyNumber+0x124>
    348a:	2b 81       	ldd	r18, Y+3	; 0x03
    348c:	3c 81       	ldd	r19, Y+4	; 0x04
    348e:	2f 30       	cpi	r18, 0x0F	; 15
    3490:	31 05       	cpc	r19, r1
    3492:	79 f1       	breq	.+94     	; 0x34f2 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    3494:	8b 81       	ldd	r24, Y+3	; 0x03
    3496:	9c 81       	ldd	r25, Y+4	; 0x04
    3498:	80 31       	cpi	r24, 0x10	; 16
    349a:	91 05       	cpc	r25, r1
    349c:	69 f1       	breq	.+90     	; 0x34f8 <KEYPAD_4x4_adjustKeyNumber+0x134>
    349e:	2f c0       	rjmp	.+94     	; 0x34fe <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    34a0:	87 e0       	ldi	r24, 0x07	; 7
    34a2:	89 83       	std	Y+1, r24	; 0x01
    34a4:	2e c0       	rjmp	.+92     	; 0x3502 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    34a6:	88 e0       	ldi	r24, 0x08	; 8
    34a8:	89 83       	std	Y+1, r24	; 0x01
    34aa:	2b c0       	rjmp	.+86     	; 0x3502 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    34ac:	89 e0       	ldi	r24, 0x09	; 9
    34ae:	89 83       	std	Y+1, r24	; 0x01
    34b0:	28 c0       	rjmp	.+80     	; 0x3502 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    34b2:	85 e2       	ldi	r24, 0x25	; 37
    34b4:	89 83       	std	Y+1, r24	; 0x01
    34b6:	25 c0       	rjmp	.+74     	; 0x3502 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    34b8:	84 e0       	ldi	r24, 0x04	; 4
    34ba:	89 83       	std	Y+1, r24	; 0x01
    34bc:	22 c0       	rjmp	.+68     	; 0x3502 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    34be:	85 e0       	ldi	r24, 0x05	; 5
    34c0:	89 83       	std	Y+1, r24	; 0x01
    34c2:	1f c0       	rjmp	.+62     	; 0x3502 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    34c4:	86 e0       	ldi	r24, 0x06	; 6
    34c6:	89 83       	std	Y+1, r24	; 0x01
    34c8:	1c c0       	rjmp	.+56     	; 0x3502 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    34ca:	8a e2       	ldi	r24, 0x2A	; 42
    34cc:	89 83       	std	Y+1, r24	; 0x01
    34ce:	19 c0       	rjmp	.+50     	; 0x3502 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    34d0:	81 e0       	ldi	r24, 0x01	; 1
    34d2:	89 83       	std	Y+1, r24	; 0x01
    34d4:	16 c0       	rjmp	.+44     	; 0x3502 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    34d6:	82 e0       	ldi	r24, 0x02	; 2
    34d8:	89 83       	std	Y+1, r24	; 0x01
    34da:	13 c0       	rjmp	.+38     	; 0x3502 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    34dc:	83 e0       	ldi	r24, 0x03	; 3
    34de:	89 83       	std	Y+1, r24	; 0x01
    34e0:	10 c0       	rjmp	.+32     	; 0x3502 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    34e2:	8d e2       	ldi	r24, 0x2D	; 45
    34e4:	89 83       	std	Y+1, r24	; 0x01
    34e6:	0d c0       	rjmp	.+26     	; 0x3502 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    34e8:	8d e0       	ldi	r24, 0x0D	; 13
    34ea:	89 83       	std	Y+1, r24	; 0x01
    34ec:	0a c0       	rjmp	.+20     	; 0x3502 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    34ee:	19 82       	std	Y+1, r1	; 0x01
    34f0:	08 c0       	rjmp	.+16     	; 0x3502 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    34f2:	8d e3       	ldi	r24, 0x3D	; 61
    34f4:	89 83       	std	Y+1, r24	; 0x01
    34f6:	05 c0       	rjmp	.+10     	; 0x3502 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    34f8:	8b e2       	ldi	r24, 0x2B	; 43
    34fa:	89 83       	std	Y+1, r24	; 0x01
    34fc:	02 c0       	rjmp	.+4      	; 0x3502 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    34fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3500:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    3502:	89 81       	ldd	r24, Y+1	; 0x01
} 
    3504:	0f 90       	pop	r0
    3506:	0f 90       	pop	r0
    3508:	0f 90       	pop	r0
    350a:	0f 90       	pop	r0
    350c:	cf 91       	pop	r28
    350e:	df 91       	pop	r29
    3510:	08 95       	ret

00003512 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    3512:	df 93       	push	r29
    3514:	cf 93       	push	r28
    3516:	cd b7       	in	r28, 0x3d	; 61
    3518:	de b7       	in	r29, 0x3e	; 62
    351a:	2e 97       	sbiw	r28, 0x0e	; 14
    351c:	0f b6       	in	r0, 0x3f	; 63
    351e:	f8 94       	cli
    3520:	de bf       	out	0x3e, r29	; 62
    3522:	0f be       	out	0x3f, r0	; 63
    3524:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    3526:	82 e0       	ldi	r24, 0x02	; 2
    3528:	60 e0       	ldi	r22, 0x00	; 0
    352a:	41 e0       	ldi	r20, 0x01	; 1
    352c:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    3530:	82 e0       	ldi	r24, 0x02	; 2
    3532:	61 e0       	ldi	r22, 0x01	; 1
    3534:	41 e0       	ldi	r20, 0x01	; 1
    3536:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <GPIO_setupPinDirection>
    353a:	80 e0       	ldi	r24, 0x00	; 0
    353c:	90 e0       	ldi	r25, 0x00	; 0
    353e:	a0 ea       	ldi	r26, 0xA0	; 160
    3540:	b1 e4       	ldi	r27, 0x41	; 65
    3542:	8b 87       	std	Y+11, r24	; 0x0b
    3544:	9c 87       	std	Y+12, r25	; 0x0c
    3546:	ad 87       	std	Y+13, r26	; 0x0d
    3548:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    354a:	6b 85       	ldd	r22, Y+11	; 0x0b
    354c:	7c 85       	ldd	r23, Y+12	; 0x0c
    354e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3550:	9e 85       	ldd	r25, Y+14	; 0x0e
    3552:	20 e0       	ldi	r18, 0x00	; 0
    3554:	30 e0       	ldi	r19, 0x00	; 0
    3556:	4a e7       	ldi	r20, 0x7A	; 122
    3558:	53 e4       	ldi	r21, 0x43	; 67
    355a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    355e:	dc 01       	movw	r26, r24
    3560:	cb 01       	movw	r24, r22
    3562:	8f 83       	std	Y+7, r24	; 0x07
    3564:	98 87       	std	Y+8, r25	; 0x08
    3566:	a9 87       	std	Y+9, r26	; 0x09
    3568:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    356a:	6f 81       	ldd	r22, Y+7	; 0x07
    356c:	78 85       	ldd	r23, Y+8	; 0x08
    356e:	89 85       	ldd	r24, Y+9	; 0x09
    3570:	9a 85       	ldd	r25, Y+10	; 0x0a
    3572:	20 e0       	ldi	r18, 0x00	; 0
    3574:	30 e0       	ldi	r19, 0x00	; 0
    3576:	40 e8       	ldi	r20, 0x80	; 128
    3578:	5f e3       	ldi	r21, 0x3F	; 63
    357a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    357e:	88 23       	and	r24, r24
    3580:	2c f4       	brge	.+10     	; 0x358c <LCD_init+0x7a>
		__ticks = 1;
    3582:	81 e0       	ldi	r24, 0x01	; 1
    3584:	90 e0       	ldi	r25, 0x00	; 0
    3586:	9e 83       	std	Y+6, r25	; 0x06
    3588:	8d 83       	std	Y+5, r24	; 0x05
    358a:	3f c0       	rjmp	.+126    	; 0x360a <LCD_init+0xf8>
	else if (__tmp > 65535)
    358c:	6f 81       	ldd	r22, Y+7	; 0x07
    358e:	78 85       	ldd	r23, Y+8	; 0x08
    3590:	89 85       	ldd	r24, Y+9	; 0x09
    3592:	9a 85       	ldd	r25, Y+10	; 0x0a
    3594:	20 e0       	ldi	r18, 0x00	; 0
    3596:	3f ef       	ldi	r19, 0xFF	; 255
    3598:	4f e7       	ldi	r20, 0x7F	; 127
    359a:	57 e4       	ldi	r21, 0x47	; 71
    359c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    35a0:	18 16       	cp	r1, r24
    35a2:	4c f5       	brge	.+82     	; 0x35f6 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    35a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    35a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    35aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    35ac:	20 e0       	ldi	r18, 0x00	; 0
    35ae:	30 e0       	ldi	r19, 0x00	; 0
    35b0:	40 e2       	ldi	r20, 0x20	; 32
    35b2:	51 e4       	ldi	r21, 0x41	; 65
    35b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    35b8:	dc 01       	movw	r26, r24
    35ba:	cb 01       	movw	r24, r22
    35bc:	bc 01       	movw	r22, r24
    35be:	cd 01       	movw	r24, r26
    35c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    35c4:	dc 01       	movw	r26, r24
    35c6:	cb 01       	movw	r24, r22
    35c8:	9e 83       	std	Y+6, r25	; 0x06
    35ca:	8d 83       	std	Y+5, r24	; 0x05
    35cc:	0f c0       	rjmp	.+30     	; 0x35ec <LCD_init+0xda>
    35ce:	89 e1       	ldi	r24, 0x19	; 25
    35d0:	90 e0       	ldi	r25, 0x00	; 0
    35d2:	9c 83       	std	Y+4, r25	; 0x04
    35d4:	8b 83       	std	Y+3, r24	; 0x03
    35d6:	8b 81       	ldd	r24, Y+3	; 0x03
    35d8:	9c 81       	ldd	r25, Y+4	; 0x04
    35da:	01 97       	sbiw	r24, 0x01	; 1
    35dc:	f1 f7       	brne	.-4      	; 0x35da <LCD_init+0xc8>
    35de:	9c 83       	std	Y+4, r25	; 0x04
    35e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35e2:	8d 81       	ldd	r24, Y+5	; 0x05
    35e4:	9e 81       	ldd	r25, Y+6	; 0x06
    35e6:	01 97       	sbiw	r24, 0x01	; 1
    35e8:	9e 83       	std	Y+6, r25	; 0x06
    35ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35ec:	8d 81       	ldd	r24, Y+5	; 0x05
    35ee:	9e 81       	ldd	r25, Y+6	; 0x06
    35f0:	00 97       	sbiw	r24, 0x00	; 0
    35f2:	69 f7       	brne	.-38     	; 0x35ce <LCD_init+0xbc>
    35f4:	14 c0       	rjmp	.+40     	; 0x361e <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35f6:	6f 81       	ldd	r22, Y+7	; 0x07
    35f8:	78 85       	ldd	r23, Y+8	; 0x08
    35fa:	89 85       	ldd	r24, Y+9	; 0x09
    35fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    35fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3602:	dc 01       	movw	r26, r24
    3604:	cb 01       	movw	r24, r22
    3606:	9e 83       	std	Y+6, r25	; 0x06
    3608:	8d 83       	std	Y+5, r24	; 0x05
    360a:	8d 81       	ldd	r24, Y+5	; 0x05
    360c:	9e 81       	ldd	r25, Y+6	; 0x06
    360e:	9a 83       	std	Y+2, r25	; 0x02
    3610:	89 83       	std	Y+1, r24	; 0x01
    3612:	89 81       	ldd	r24, Y+1	; 0x01
    3614:	9a 81       	ldd	r25, Y+2	; 0x02
    3616:	01 97       	sbiw	r24, 0x01	; 1
    3618:	f1 f7       	brne	.-4      	; 0x3616 <LCD_init+0x104>
    361a:	9a 83       	std	Y+2, r25	; 0x02
    361c:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    361e:	80 e0       	ldi	r24, 0x00	; 0
    3620:	6f ef       	ldi	r22, 0xFF	; 255
    3622:	0e 94 a7 18 	call	0x314e	; 0x314e <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    3626:	88 e3       	ldi	r24, 0x38	; 56
    3628:	0e 94 25 1b 	call	0x364a	; 0x364a <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    362c:	8c e0       	ldi	r24, 0x0C	; 12
    362e:	0e 94 25 1b 	call	0x364a	; 0x364a <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    3632:	81 e0       	ldi	r24, 0x01	; 1
    3634:	0e 94 25 1b 	call	0x364a	; 0x364a <LCD_sendCommand>
}
    3638:	2e 96       	adiw	r28, 0x0e	; 14
    363a:	0f b6       	in	r0, 0x3f	; 63
    363c:	f8 94       	cli
    363e:	de bf       	out	0x3e, r29	; 62
    3640:	0f be       	out	0x3f, r0	; 63
    3642:	cd bf       	out	0x3d, r28	; 61
    3644:	cf 91       	pop	r28
    3646:	df 91       	pop	r29
    3648:	08 95       	ret

0000364a <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    364a:	df 93       	push	r29
    364c:	cf 93       	push	r28
    364e:	cd b7       	in	r28, 0x3d	; 61
    3650:	de b7       	in	r29, 0x3e	; 62
    3652:	e9 97       	sbiw	r28, 0x39	; 57
    3654:	0f b6       	in	r0, 0x3f	; 63
    3656:	f8 94       	cli
    3658:	de bf       	out	0x3e, r29	; 62
    365a:	0f be       	out	0x3f, r0	; 63
    365c:	cd bf       	out	0x3d, r28	; 61
    365e:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    3660:	82 e0       	ldi	r24, 0x02	; 2
    3662:	60 e0       	ldi	r22, 0x00	; 0
    3664:	40 e0       	ldi	r20, 0x00	; 0
    3666:	0e 94 21 17 	call	0x2e42	; 0x2e42 <GPIO_writePin>
    366a:	80 e0       	ldi	r24, 0x00	; 0
    366c:	90 e0       	ldi	r25, 0x00	; 0
    366e:	a0 e8       	ldi	r26, 0x80	; 128
    3670:	bf e3       	ldi	r27, 0x3F	; 63
    3672:	8d ab       	std	Y+53, r24	; 0x35
    3674:	9e ab       	std	Y+54, r25	; 0x36
    3676:	af ab       	std	Y+55, r26	; 0x37
    3678:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    367a:	6d a9       	ldd	r22, Y+53	; 0x35
    367c:	7e a9       	ldd	r23, Y+54	; 0x36
    367e:	8f a9       	ldd	r24, Y+55	; 0x37
    3680:	98 ad       	ldd	r25, Y+56	; 0x38
    3682:	20 e0       	ldi	r18, 0x00	; 0
    3684:	30 e0       	ldi	r19, 0x00	; 0
    3686:	4a e7       	ldi	r20, 0x7A	; 122
    3688:	53 e4       	ldi	r21, 0x43	; 67
    368a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    368e:	dc 01       	movw	r26, r24
    3690:	cb 01       	movw	r24, r22
    3692:	89 ab       	std	Y+49, r24	; 0x31
    3694:	9a ab       	std	Y+50, r25	; 0x32
    3696:	ab ab       	std	Y+51, r26	; 0x33
    3698:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    369a:	69 a9       	ldd	r22, Y+49	; 0x31
    369c:	7a a9       	ldd	r23, Y+50	; 0x32
    369e:	8b a9       	ldd	r24, Y+51	; 0x33
    36a0:	9c a9       	ldd	r25, Y+52	; 0x34
    36a2:	20 e0       	ldi	r18, 0x00	; 0
    36a4:	30 e0       	ldi	r19, 0x00	; 0
    36a6:	40 e8       	ldi	r20, 0x80	; 128
    36a8:	5f e3       	ldi	r21, 0x3F	; 63
    36aa:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    36ae:	88 23       	and	r24, r24
    36b0:	2c f4       	brge	.+10     	; 0x36bc <LCD_sendCommand+0x72>
		__ticks = 1;
    36b2:	81 e0       	ldi	r24, 0x01	; 1
    36b4:	90 e0       	ldi	r25, 0x00	; 0
    36b6:	98 ab       	std	Y+48, r25	; 0x30
    36b8:	8f a7       	std	Y+47, r24	; 0x2f
    36ba:	3f c0       	rjmp	.+126    	; 0x373a <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    36bc:	69 a9       	ldd	r22, Y+49	; 0x31
    36be:	7a a9       	ldd	r23, Y+50	; 0x32
    36c0:	8b a9       	ldd	r24, Y+51	; 0x33
    36c2:	9c a9       	ldd	r25, Y+52	; 0x34
    36c4:	20 e0       	ldi	r18, 0x00	; 0
    36c6:	3f ef       	ldi	r19, 0xFF	; 255
    36c8:	4f e7       	ldi	r20, 0x7F	; 127
    36ca:	57 e4       	ldi	r21, 0x47	; 71
    36cc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    36d0:	18 16       	cp	r1, r24
    36d2:	4c f5       	brge	.+82     	; 0x3726 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36d4:	6d a9       	ldd	r22, Y+53	; 0x35
    36d6:	7e a9       	ldd	r23, Y+54	; 0x36
    36d8:	8f a9       	ldd	r24, Y+55	; 0x37
    36da:	98 ad       	ldd	r25, Y+56	; 0x38
    36dc:	20 e0       	ldi	r18, 0x00	; 0
    36de:	30 e0       	ldi	r19, 0x00	; 0
    36e0:	40 e2       	ldi	r20, 0x20	; 32
    36e2:	51 e4       	ldi	r21, 0x41	; 65
    36e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    36e8:	dc 01       	movw	r26, r24
    36ea:	cb 01       	movw	r24, r22
    36ec:	bc 01       	movw	r22, r24
    36ee:	cd 01       	movw	r24, r26
    36f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    36f4:	dc 01       	movw	r26, r24
    36f6:	cb 01       	movw	r24, r22
    36f8:	98 ab       	std	Y+48, r25	; 0x30
    36fa:	8f a7       	std	Y+47, r24	; 0x2f
    36fc:	0f c0       	rjmp	.+30     	; 0x371c <LCD_sendCommand+0xd2>
    36fe:	89 e1       	ldi	r24, 0x19	; 25
    3700:	90 e0       	ldi	r25, 0x00	; 0
    3702:	9e a7       	std	Y+46, r25	; 0x2e
    3704:	8d a7       	std	Y+45, r24	; 0x2d
    3706:	8d a5       	ldd	r24, Y+45	; 0x2d
    3708:	9e a5       	ldd	r25, Y+46	; 0x2e
    370a:	01 97       	sbiw	r24, 0x01	; 1
    370c:	f1 f7       	brne	.-4      	; 0x370a <LCD_sendCommand+0xc0>
    370e:	9e a7       	std	Y+46, r25	; 0x2e
    3710:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3712:	8f a5       	ldd	r24, Y+47	; 0x2f
    3714:	98 a9       	ldd	r25, Y+48	; 0x30
    3716:	01 97       	sbiw	r24, 0x01	; 1
    3718:	98 ab       	std	Y+48, r25	; 0x30
    371a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    371c:	8f a5       	ldd	r24, Y+47	; 0x2f
    371e:	98 a9       	ldd	r25, Y+48	; 0x30
    3720:	00 97       	sbiw	r24, 0x00	; 0
    3722:	69 f7       	brne	.-38     	; 0x36fe <LCD_sendCommand+0xb4>
    3724:	14 c0       	rjmp	.+40     	; 0x374e <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3726:	69 a9       	ldd	r22, Y+49	; 0x31
    3728:	7a a9       	ldd	r23, Y+50	; 0x32
    372a:	8b a9       	ldd	r24, Y+51	; 0x33
    372c:	9c a9       	ldd	r25, Y+52	; 0x34
    372e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3732:	dc 01       	movw	r26, r24
    3734:	cb 01       	movw	r24, r22
    3736:	98 ab       	std	Y+48, r25	; 0x30
    3738:	8f a7       	std	Y+47, r24	; 0x2f
    373a:	8f a5       	ldd	r24, Y+47	; 0x2f
    373c:	98 a9       	ldd	r25, Y+48	; 0x30
    373e:	9c a7       	std	Y+44, r25	; 0x2c
    3740:	8b a7       	std	Y+43, r24	; 0x2b
    3742:	8b a5       	ldd	r24, Y+43	; 0x2b
    3744:	9c a5       	ldd	r25, Y+44	; 0x2c
    3746:	01 97       	sbiw	r24, 0x01	; 1
    3748:	f1 f7       	brne	.-4      	; 0x3746 <LCD_sendCommand+0xfc>
    374a:	9c a7       	std	Y+44, r25	; 0x2c
    374c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    374e:	82 e0       	ldi	r24, 0x02	; 2
    3750:	61 e0       	ldi	r22, 0x01	; 1
    3752:	41 e0       	ldi	r20, 0x01	; 1
    3754:	0e 94 21 17 	call	0x2e42	; 0x2e42 <GPIO_writePin>
    3758:	80 e0       	ldi	r24, 0x00	; 0
    375a:	90 e0       	ldi	r25, 0x00	; 0
    375c:	a0 e8       	ldi	r26, 0x80	; 128
    375e:	bf e3       	ldi	r27, 0x3F	; 63
    3760:	8f a3       	std	Y+39, r24	; 0x27
    3762:	98 a7       	std	Y+40, r25	; 0x28
    3764:	a9 a7       	std	Y+41, r26	; 0x29
    3766:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3768:	6f a1       	ldd	r22, Y+39	; 0x27
    376a:	78 a5       	ldd	r23, Y+40	; 0x28
    376c:	89 a5       	ldd	r24, Y+41	; 0x29
    376e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3770:	20 e0       	ldi	r18, 0x00	; 0
    3772:	30 e0       	ldi	r19, 0x00	; 0
    3774:	4a e7       	ldi	r20, 0x7A	; 122
    3776:	53 e4       	ldi	r21, 0x43	; 67
    3778:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    377c:	dc 01       	movw	r26, r24
    377e:	cb 01       	movw	r24, r22
    3780:	8b a3       	std	Y+35, r24	; 0x23
    3782:	9c a3       	std	Y+36, r25	; 0x24
    3784:	ad a3       	std	Y+37, r26	; 0x25
    3786:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3788:	6b a1       	ldd	r22, Y+35	; 0x23
    378a:	7c a1       	ldd	r23, Y+36	; 0x24
    378c:	8d a1       	ldd	r24, Y+37	; 0x25
    378e:	9e a1       	ldd	r25, Y+38	; 0x26
    3790:	20 e0       	ldi	r18, 0x00	; 0
    3792:	30 e0       	ldi	r19, 0x00	; 0
    3794:	40 e8       	ldi	r20, 0x80	; 128
    3796:	5f e3       	ldi	r21, 0x3F	; 63
    3798:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    379c:	88 23       	and	r24, r24
    379e:	2c f4       	brge	.+10     	; 0x37aa <LCD_sendCommand+0x160>
		__ticks = 1;
    37a0:	81 e0       	ldi	r24, 0x01	; 1
    37a2:	90 e0       	ldi	r25, 0x00	; 0
    37a4:	9a a3       	std	Y+34, r25	; 0x22
    37a6:	89 a3       	std	Y+33, r24	; 0x21
    37a8:	3f c0       	rjmp	.+126    	; 0x3828 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    37aa:	6b a1       	ldd	r22, Y+35	; 0x23
    37ac:	7c a1       	ldd	r23, Y+36	; 0x24
    37ae:	8d a1       	ldd	r24, Y+37	; 0x25
    37b0:	9e a1       	ldd	r25, Y+38	; 0x26
    37b2:	20 e0       	ldi	r18, 0x00	; 0
    37b4:	3f ef       	ldi	r19, 0xFF	; 255
    37b6:	4f e7       	ldi	r20, 0x7F	; 127
    37b8:	57 e4       	ldi	r21, 0x47	; 71
    37ba:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    37be:	18 16       	cp	r1, r24
    37c0:	4c f5       	brge	.+82     	; 0x3814 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37c2:	6f a1       	ldd	r22, Y+39	; 0x27
    37c4:	78 a5       	ldd	r23, Y+40	; 0x28
    37c6:	89 a5       	ldd	r24, Y+41	; 0x29
    37c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    37ca:	20 e0       	ldi	r18, 0x00	; 0
    37cc:	30 e0       	ldi	r19, 0x00	; 0
    37ce:	40 e2       	ldi	r20, 0x20	; 32
    37d0:	51 e4       	ldi	r21, 0x41	; 65
    37d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    37d6:	dc 01       	movw	r26, r24
    37d8:	cb 01       	movw	r24, r22
    37da:	bc 01       	movw	r22, r24
    37dc:	cd 01       	movw	r24, r26
    37de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    37e2:	dc 01       	movw	r26, r24
    37e4:	cb 01       	movw	r24, r22
    37e6:	9a a3       	std	Y+34, r25	; 0x22
    37e8:	89 a3       	std	Y+33, r24	; 0x21
    37ea:	0f c0       	rjmp	.+30     	; 0x380a <LCD_sendCommand+0x1c0>
    37ec:	89 e1       	ldi	r24, 0x19	; 25
    37ee:	90 e0       	ldi	r25, 0x00	; 0
    37f0:	98 a3       	std	Y+32, r25	; 0x20
    37f2:	8f 8f       	std	Y+31, r24	; 0x1f
    37f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    37f6:	98 a1       	ldd	r25, Y+32	; 0x20
    37f8:	01 97       	sbiw	r24, 0x01	; 1
    37fa:	f1 f7       	brne	.-4      	; 0x37f8 <LCD_sendCommand+0x1ae>
    37fc:	98 a3       	std	Y+32, r25	; 0x20
    37fe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3800:	89 a1       	ldd	r24, Y+33	; 0x21
    3802:	9a a1       	ldd	r25, Y+34	; 0x22
    3804:	01 97       	sbiw	r24, 0x01	; 1
    3806:	9a a3       	std	Y+34, r25	; 0x22
    3808:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    380a:	89 a1       	ldd	r24, Y+33	; 0x21
    380c:	9a a1       	ldd	r25, Y+34	; 0x22
    380e:	00 97       	sbiw	r24, 0x00	; 0
    3810:	69 f7       	brne	.-38     	; 0x37ec <LCD_sendCommand+0x1a2>
    3812:	14 c0       	rjmp	.+40     	; 0x383c <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3814:	6b a1       	ldd	r22, Y+35	; 0x23
    3816:	7c a1       	ldd	r23, Y+36	; 0x24
    3818:	8d a1       	ldd	r24, Y+37	; 0x25
    381a:	9e a1       	ldd	r25, Y+38	; 0x26
    381c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3820:	dc 01       	movw	r26, r24
    3822:	cb 01       	movw	r24, r22
    3824:	9a a3       	std	Y+34, r25	; 0x22
    3826:	89 a3       	std	Y+33, r24	; 0x21
    3828:	89 a1       	ldd	r24, Y+33	; 0x21
    382a:	9a a1       	ldd	r25, Y+34	; 0x22
    382c:	9e 8f       	std	Y+30, r25	; 0x1e
    382e:	8d 8f       	std	Y+29, r24	; 0x1d
    3830:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3832:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3834:	01 97       	sbiw	r24, 0x01	; 1
    3836:	f1 f7       	brne	.-4      	; 0x3834 <LCD_sendCommand+0x1ea>
    3838:	9e 8f       	std	Y+30, r25	; 0x1e
    383a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    383c:	80 e0       	ldi	r24, 0x00	; 0
    383e:	69 ad       	ldd	r22, Y+57	; 0x39
    3840:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <GPIO_writePort>
    3844:	80 e0       	ldi	r24, 0x00	; 0
    3846:	90 e0       	ldi	r25, 0x00	; 0
    3848:	a0 e8       	ldi	r26, 0x80	; 128
    384a:	bf e3       	ldi	r27, 0x3F	; 63
    384c:	89 8f       	std	Y+25, r24	; 0x19
    384e:	9a 8f       	std	Y+26, r25	; 0x1a
    3850:	ab 8f       	std	Y+27, r26	; 0x1b
    3852:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3854:	69 8d       	ldd	r22, Y+25	; 0x19
    3856:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3858:	8b 8d       	ldd	r24, Y+27	; 0x1b
    385a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    385c:	20 e0       	ldi	r18, 0x00	; 0
    385e:	30 e0       	ldi	r19, 0x00	; 0
    3860:	4a e7       	ldi	r20, 0x7A	; 122
    3862:	53 e4       	ldi	r21, 0x43	; 67
    3864:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3868:	dc 01       	movw	r26, r24
    386a:	cb 01       	movw	r24, r22
    386c:	8d 8b       	std	Y+21, r24	; 0x15
    386e:	9e 8b       	std	Y+22, r25	; 0x16
    3870:	af 8b       	std	Y+23, r26	; 0x17
    3872:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3874:	6d 89       	ldd	r22, Y+21	; 0x15
    3876:	7e 89       	ldd	r23, Y+22	; 0x16
    3878:	8f 89       	ldd	r24, Y+23	; 0x17
    387a:	98 8d       	ldd	r25, Y+24	; 0x18
    387c:	20 e0       	ldi	r18, 0x00	; 0
    387e:	30 e0       	ldi	r19, 0x00	; 0
    3880:	40 e8       	ldi	r20, 0x80	; 128
    3882:	5f e3       	ldi	r21, 0x3F	; 63
    3884:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3888:	88 23       	and	r24, r24
    388a:	2c f4       	brge	.+10     	; 0x3896 <LCD_sendCommand+0x24c>
		__ticks = 1;
    388c:	81 e0       	ldi	r24, 0x01	; 1
    388e:	90 e0       	ldi	r25, 0x00	; 0
    3890:	9c 8b       	std	Y+20, r25	; 0x14
    3892:	8b 8b       	std	Y+19, r24	; 0x13
    3894:	3f c0       	rjmp	.+126    	; 0x3914 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    3896:	6d 89       	ldd	r22, Y+21	; 0x15
    3898:	7e 89       	ldd	r23, Y+22	; 0x16
    389a:	8f 89       	ldd	r24, Y+23	; 0x17
    389c:	98 8d       	ldd	r25, Y+24	; 0x18
    389e:	20 e0       	ldi	r18, 0x00	; 0
    38a0:	3f ef       	ldi	r19, 0xFF	; 255
    38a2:	4f e7       	ldi	r20, 0x7F	; 127
    38a4:	57 e4       	ldi	r21, 0x47	; 71
    38a6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    38aa:	18 16       	cp	r1, r24
    38ac:	4c f5       	brge	.+82     	; 0x3900 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38ae:	69 8d       	ldd	r22, Y+25	; 0x19
    38b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    38b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38b6:	20 e0       	ldi	r18, 0x00	; 0
    38b8:	30 e0       	ldi	r19, 0x00	; 0
    38ba:	40 e2       	ldi	r20, 0x20	; 32
    38bc:	51 e4       	ldi	r21, 0x41	; 65
    38be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    38c2:	dc 01       	movw	r26, r24
    38c4:	cb 01       	movw	r24, r22
    38c6:	bc 01       	movw	r22, r24
    38c8:	cd 01       	movw	r24, r26
    38ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    38ce:	dc 01       	movw	r26, r24
    38d0:	cb 01       	movw	r24, r22
    38d2:	9c 8b       	std	Y+20, r25	; 0x14
    38d4:	8b 8b       	std	Y+19, r24	; 0x13
    38d6:	0f c0       	rjmp	.+30     	; 0x38f6 <LCD_sendCommand+0x2ac>
    38d8:	89 e1       	ldi	r24, 0x19	; 25
    38da:	90 e0       	ldi	r25, 0x00	; 0
    38dc:	9a 8b       	std	Y+18, r25	; 0x12
    38de:	89 8b       	std	Y+17, r24	; 0x11
    38e0:	89 89       	ldd	r24, Y+17	; 0x11
    38e2:	9a 89       	ldd	r25, Y+18	; 0x12
    38e4:	01 97       	sbiw	r24, 0x01	; 1
    38e6:	f1 f7       	brne	.-4      	; 0x38e4 <LCD_sendCommand+0x29a>
    38e8:	9a 8b       	std	Y+18, r25	; 0x12
    38ea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38ec:	8b 89       	ldd	r24, Y+19	; 0x13
    38ee:	9c 89       	ldd	r25, Y+20	; 0x14
    38f0:	01 97       	sbiw	r24, 0x01	; 1
    38f2:	9c 8b       	std	Y+20, r25	; 0x14
    38f4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38f6:	8b 89       	ldd	r24, Y+19	; 0x13
    38f8:	9c 89       	ldd	r25, Y+20	; 0x14
    38fa:	00 97       	sbiw	r24, 0x00	; 0
    38fc:	69 f7       	brne	.-38     	; 0x38d8 <LCD_sendCommand+0x28e>
    38fe:	14 c0       	rjmp	.+40     	; 0x3928 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3900:	6d 89       	ldd	r22, Y+21	; 0x15
    3902:	7e 89       	ldd	r23, Y+22	; 0x16
    3904:	8f 89       	ldd	r24, Y+23	; 0x17
    3906:	98 8d       	ldd	r25, Y+24	; 0x18
    3908:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    390c:	dc 01       	movw	r26, r24
    390e:	cb 01       	movw	r24, r22
    3910:	9c 8b       	std	Y+20, r25	; 0x14
    3912:	8b 8b       	std	Y+19, r24	; 0x13
    3914:	8b 89       	ldd	r24, Y+19	; 0x13
    3916:	9c 89       	ldd	r25, Y+20	; 0x14
    3918:	98 8b       	std	Y+16, r25	; 0x10
    391a:	8f 87       	std	Y+15, r24	; 0x0f
    391c:	8f 85       	ldd	r24, Y+15	; 0x0f
    391e:	98 89       	ldd	r25, Y+16	; 0x10
    3920:	01 97       	sbiw	r24, 0x01	; 1
    3922:	f1 f7       	brne	.-4      	; 0x3920 <LCD_sendCommand+0x2d6>
    3924:	98 8b       	std	Y+16, r25	; 0x10
    3926:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3928:	82 e0       	ldi	r24, 0x02	; 2
    392a:	61 e0       	ldi	r22, 0x01	; 1
    392c:	40 e0       	ldi	r20, 0x00	; 0
    392e:	0e 94 21 17 	call	0x2e42	; 0x2e42 <GPIO_writePin>
    3932:	80 e0       	ldi	r24, 0x00	; 0
    3934:	90 e0       	ldi	r25, 0x00	; 0
    3936:	a0 e8       	ldi	r26, 0x80	; 128
    3938:	bf e3       	ldi	r27, 0x3F	; 63
    393a:	8b 87       	std	Y+11, r24	; 0x0b
    393c:	9c 87       	std	Y+12, r25	; 0x0c
    393e:	ad 87       	std	Y+13, r26	; 0x0d
    3940:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3942:	6b 85       	ldd	r22, Y+11	; 0x0b
    3944:	7c 85       	ldd	r23, Y+12	; 0x0c
    3946:	8d 85       	ldd	r24, Y+13	; 0x0d
    3948:	9e 85       	ldd	r25, Y+14	; 0x0e
    394a:	20 e0       	ldi	r18, 0x00	; 0
    394c:	30 e0       	ldi	r19, 0x00	; 0
    394e:	4a e7       	ldi	r20, 0x7A	; 122
    3950:	53 e4       	ldi	r21, 0x43	; 67
    3952:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3956:	dc 01       	movw	r26, r24
    3958:	cb 01       	movw	r24, r22
    395a:	8f 83       	std	Y+7, r24	; 0x07
    395c:	98 87       	std	Y+8, r25	; 0x08
    395e:	a9 87       	std	Y+9, r26	; 0x09
    3960:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3962:	6f 81       	ldd	r22, Y+7	; 0x07
    3964:	78 85       	ldd	r23, Y+8	; 0x08
    3966:	89 85       	ldd	r24, Y+9	; 0x09
    3968:	9a 85       	ldd	r25, Y+10	; 0x0a
    396a:	20 e0       	ldi	r18, 0x00	; 0
    396c:	30 e0       	ldi	r19, 0x00	; 0
    396e:	40 e8       	ldi	r20, 0x80	; 128
    3970:	5f e3       	ldi	r21, 0x3F	; 63
    3972:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3976:	88 23       	and	r24, r24
    3978:	2c f4       	brge	.+10     	; 0x3984 <LCD_sendCommand+0x33a>
		__ticks = 1;
    397a:	81 e0       	ldi	r24, 0x01	; 1
    397c:	90 e0       	ldi	r25, 0x00	; 0
    397e:	9e 83       	std	Y+6, r25	; 0x06
    3980:	8d 83       	std	Y+5, r24	; 0x05
    3982:	3f c0       	rjmp	.+126    	; 0x3a02 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    3984:	6f 81       	ldd	r22, Y+7	; 0x07
    3986:	78 85       	ldd	r23, Y+8	; 0x08
    3988:	89 85       	ldd	r24, Y+9	; 0x09
    398a:	9a 85       	ldd	r25, Y+10	; 0x0a
    398c:	20 e0       	ldi	r18, 0x00	; 0
    398e:	3f ef       	ldi	r19, 0xFF	; 255
    3990:	4f e7       	ldi	r20, 0x7F	; 127
    3992:	57 e4       	ldi	r21, 0x47	; 71
    3994:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3998:	18 16       	cp	r1, r24
    399a:	4c f5       	brge	.+82     	; 0x39ee <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    399c:	6b 85       	ldd	r22, Y+11	; 0x0b
    399e:	7c 85       	ldd	r23, Y+12	; 0x0c
    39a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    39a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    39a4:	20 e0       	ldi	r18, 0x00	; 0
    39a6:	30 e0       	ldi	r19, 0x00	; 0
    39a8:	40 e2       	ldi	r20, 0x20	; 32
    39aa:	51 e4       	ldi	r21, 0x41	; 65
    39ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    39b0:	dc 01       	movw	r26, r24
    39b2:	cb 01       	movw	r24, r22
    39b4:	bc 01       	movw	r22, r24
    39b6:	cd 01       	movw	r24, r26
    39b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    39bc:	dc 01       	movw	r26, r24
    39be:	cb 01       	movw	r24, r22
    39c0:	9e 83       	std	Y+6, r25	; 0x06
    39c2:	8d 83       	std	Y+5, r24	; 0x05
    39c4:	0f c0       	rjmp	.+30     	; 0x39e4 <LCD_sendCommand+0x39a>
    39c6:	89 e1       	ldi	r24, 0x19	; 25
    39c8:	90 e0       	ldi	r25, 0x00	; 0
    39ca:	9c 83       	std	Y+4, r25	; 0x04
    39cc:	8b 83       	std	Y+3, r24	; 0x03
    39ce:	8b 81       	ldd	r24, Y+3	; 0x03
    39d0:	9c 81       	ldd	r25, Y+4	; 0x04
    39d2:	01 97       	sbiw	r24, 0x01	; 1
    39d4:	f1 f7       	brne	.-4      	; 0x39d2 <LCD_sendCommand+0x388>
    39d6:	9c 83       	std	Y+4, r25	; 0x04
    39d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39da:	8d 81       	ldd	r24, Y+5	; 0x05
    39dc:	9e 81       	ldd	r25, Y+6	; 0x06
    39de:	01 97       	sbiw	r24, 0x01	; 1
    39e0:	9e 83       	std	Y+6, r25	; 0x06
    39e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39e4:	8d 81       	ldd	r24, Y+5	; 0x05
    39e6:	9e 81       	ldd	r25, Y+6	; 0x06
    39e8:	00 97       	sbiw	r24, 0x00	; 0
    39ea:	69 f7       	brne	.-38     	; 0x39c6 <LCD_sendCommand+0x37c>
    39ec:	14 c0       	rjmp	.+40     	; 0x3a16 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39ee:	6f 81       	ldd	r22, Y+7	; 0x07
    39f0:	78 85       	ldd	r23, Y+8	; 0x08
    39f2:	89 85       	ldd	r24, Y+9	; 0x09
    39f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    39f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    39fa:	dc 01       	movw	r26, r24
    39fc:	cb 01       	movw	r24, r22
    39fe:	9e 83       	std	Y+6, r25	; 0x06
    3a00:	8d 83       	std	Y+5, r24	; 0x05
    3a02:	8d 81       	ldd	r24, Y+5	; 0x05
    3a04:	9e 81       	ldd	r25, Y+6	; 0x06
    3a06:	9a 83       	std	Y+2, r25	; 0x02
    3a08:	89 83       	std	Y+1, r24	; 0x01
    3a0a:	89 81       	ldd	r24, Y+1	; 0x01
    3a0c:	9a 81       	ldd	r25, Y+2	; 0x02
    3a0e:	01 97       	sbiw	r24, 0x01	; 1
    3a10:	f1 f7       	brne	.-4      	; 0x3a0e <LCD_sendCommand+0x3c4>
    3a12:	9a 83       	std	Y+2, r25	; 0x02
    3a14:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3a16:	e9 96       	adiw	r28, 0x39	; 57
    3a18:	0f b6       	in	r0, 0x3f	; 63
    3a1a:	f8 94       	cli
    3a1c:	de bf       	out	0x3e, r29	; 62
    3a1e:	0f be       	out	0x3f, r0	; 63
    3a20:	cd bf       	out	0x3d, r28	; 61
    3a22:	cf 91       	pop	r28
    3a24:	df 91       	pop	r29
    3a26:	08 95       	ret

00003a28 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    3a28:	df 93       	push	r29
    3a2a:	cf 93       	push	r28
    3a2c:	cd b7       	in	r28, 0x3d	; 61
    3a2e:	de b7       	in	r29, 0x3e	; 62
    3a30:	e9 97       	sbiw	r28, 0x39	; 57
    3a32:	0f b6       	in	r0, 0x3f	; 63
    3a34:	f8 94       	cli
    3a36:	de bf       	out	0x3e, r29	; 62
    3a38:	0f be       	out	0x3f, r0	; 63
    3a3a:	cd bf       	out	0x3d, r28	; 61
    3a3c:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    3a3e:	82 e0       	ldi	r24, 0x02	; 2
    3a40:	60 e0       	ldi	r22, 0x00	; 0
    3a42:	41 e0       	ldi	r20, 0x01	; 1
    3a44:	0e 94 21 17 	call	0x2e42	; 0x2e42 <GPIO_writePin>
    3a48:	80 e0       	ldi	r24, 0x00	; 0
    3a4a:	90 e0       	ldi	r25, 0x00	; 0
    3a4c:	a0 e8       	ldi	r26, 0x80	; 128
    3a4e:	bf e3       	ldi	r27, 0x3F	; 63
    3a50:	8d ab       	std	Y+53, r24	; 0x35
    3a52:	9e ab       	std	Y+54, r25	; 0x36
    3a54:	af ab       	std	Y+55, r26	; 0x37
    3a56:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a58:	6d a9       	ldd	r22, Y+53	; 0x35
    3a5a:	7e a9       	ldd	r23, Y+54	; 0x36
    3a5c:	8f a9       	ldd	r24, Y+55	; 0x37
    3a5e:	98 ad       	ldd	r25, Y+56	; 0x38
    3a60:	20 e0       	ldi	r18, 0x00	; 0
    3a62:	30 e0       	ldi	r19, 0x00	; 0
    3a64:	4a e7       	ldi	r20, 0x7A	; 122
    3a66:	53 e4       	ldi	r21, 0x43	; 67
    3a68:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3a6c:	dc 01       	movw	r26, r24
    3a6e:	cb 01       	movw	r24, r22
    3a70:	89 ab       	std	Y+49, r24	; 0x31
    3a72:	9a ab       	std	Y+50, r25	; 0x32
    3a74:	ab ab       	std	Y+51, r26	; 0x33
    3a76:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3a78:	69 a9       	ldd	r22, Y+49	; 0x31
    3a7a:	7a a9       	ldd	r23, Y+50	; 0x32
    3a7c:	8b a9       	ldd	r24, Y+51	; 0x33
    3a7e:	9c a9       	ldd	r25, Y+52	; 0x34
    3a80:	20 e0       	ldi	r18, 0x00	; 0
    3a82:	30 e0       	ldi	r19, 0x00	; 0
    3a84:	40 e8       	ldi	r20, 0x80	; 128
    3a86:	5f e3       	ldi	r21, 0x3F	; 63
    3a88:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3a8c:	88 23       	and	r24, r24
    3a8e:	2c f4       	brge	.+10     	; 0x3a9a <LCD_displayCharacter+0x72>
		__ticks = 1;
    3a90:	81 e0       	ldi	r24, 0x01	; 1
    3a92:	90 e0       	ldi	r25, 0x00	; 0
    3a94:	98 ab       	std	Y+48, r25	; 0x30
    3a96:	8f a7       	std	Y+47, r24	; 0x2f
    3a98:	3f c0       	rjmp	.+126    	; 0x3b18 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    3a9a:	69 a9       	ldd	r22, Y+49	; 0x31
    3a9c:	7a a9       	ldd	r23, Y+50	; 0x32
    3a9e:	8b a9       	ldd	r24, Y+51	; 0x33
    3aa0:	9c a9       	ldd	r25, Y+52	; 0x34
    3aa2:	20 e0       	ldi	r18, 0x00	; 0
    3aa4:	3f ef       	ldi	r19, 0xFF	; 255
    3aa6:	4f e7       	ldi	r20, 0x7F	; 127
    3aa8:	57 e4       	ldi	r21, 0x47	; 71
    3aaa:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3aae:	18 16       	cp	r1, r24
    3ab0:	4c f5       	brge	.+82     	; 0x3b04 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ab2:	6d a9       	ldd	r22, Y+53	; 0x35
    3ab4:	7e a9       	ldd	r23, Y+54	; 0x36
    3ab6:	8f a9       	ldd	r24, Y+55	; 0x37
    3ab8:	98 ad       	ldd	r25, Y+56	; 0x38
    3aba:	20 e0       	ldi	r18, 0x00	; 0
    3abc:	30 e0       	ldi	r19, 0x00	; 0
    3abe:	40 e2       	ldi	r20, 0x20	; 32
    3ac0:	51 e4       	ldi	r21, 0x41	; 65
    3ac2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3ac6:	dc 01       	movw	r26, r24
    3ac8:	cb 01       	movw	r24, r22
    3aca:	bc 01       	movw	r22, r24
    3acc:	cd 01       	movw	r24, r26
    3ace:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3ad2:	dc 01       	movw	r26, r24
    3ad4:	cb 01       	movw	r24, r22
    3ad6:	98 ab       	std	Y+48, r25	; 0x30
    3ad8:	8f a7       	std	Y+47, r24	; 0x2f
    3ada:	0f c0       	rjmp	.+30     	; 0x3afa <LCD_displayCharacter+0xd2>
    3adc:	89 e1       	ldi	r24, 0x19	; 25
    3ade:	90 e0       	ldi	r25, 0x00	; 0
    3ae0:	9e a7       	std	Y+46, r25	; 0x2e
    3ae2:	8d a7       	std	Y+45, r24	; 0x2d
    3ae4:	8d a5       	ldd	r24, Y+45	; 0x2d
    3ae6:	9e a5       	ldd	r25, Y+46	; 0x2e
    3ae8:	01 97       	sbiw	r24, 0x01	; 1
    3aea:	f1 f7       	brne	.-4      	; 0x3ae8 <LCD_displayCharacter+0xc0>
    3aec:	9e a7       	std	Y+46, r25	; 0x2e
    3aee:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3af0:	8f a5       	ldd	r24, Y+47	; 0x2f
    3af2:	98 a9       	ldd	r25, Y+48	; 0x30
    3af4:	01 97       	sbiw	r24, 0x01	; 1
    3af6:	98 ab       	std	Y+48, r25	; 0x30
    3af8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3afa:	8f a5       	ldd	r24, Y+47	; 0x2f
    3afc:	98 a9       	ldd	r25, Y+48	; 0x30
    3afe:	00 97       	sbiw	r24, 0x00	; 0
    3b00:	69 f7       	brne	.-38     	; 0x3adc <LCD_displayCharacter+0xb4>
    3b02:	14 c0       	rjmp	.+40     	; 0x3b2c <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b04:	69 a9       	ldd	r22, Y+49	; 0x31
    3b06:	7a a9       	ldd	r23, Y+50	; 0x32
    3b08:	8b a9       	ldd	r24, Y+51	; 0x33
    3b0a:	9c a9       	ldd	r25, Y+52	; 0x34
    3b0c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3b10:	dc 01       	movw	r26, r24
    3b12:	cb 01       	movw	r24, r22
    3b14:	98 ab       	std	Y+48, r25	; 0x30
    3b16:	8f a7       	std	Y+47, r24	; 0x2f
    3b18:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b1a:	98 a9       	ldd	r25, Y+48	; 0x30
    3b1c:	9c a7       	std	Y+44, r25	; 0x2c
    3b1e:	8b a7       	std	Y+43, r24	; 0x2b
    3b20:	8b a5       	ldd	r24, Y+43	; 0x2b
    3b22:	9c a5       	ldd	r25, Y+44	; 0x2c
    3b24:	01 97       	sbiw	r24, 0x01	; 1
    3b26:	f1 f7       	brne	.-4      	; 0x3b24 <LCD_displayCharacter+0xfc>
    3b28:	9c a7       	std	Y+44, r25	; 0x2c
    3b2a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    3b2c:	82 e0       	ldi	r24, 0x02	; 2
    3b2e:	61 e0       	ldi	r22, 0x01	; 1
    3b30:	41 e0       	ldi	r20, 0x01	; 1
    3b32:	0e 94 21 17 	call	0x2e42	; 0x2e42 <GPIO_writePin>
    3b36:	80 e0       	ldi	r24, 0x00	; 0
    3b38:	90 e0       	ldi	r25, 0x00	; 0
    3b3a:	a0 e8       	ldi	r26, 0x80	; 128
    3b3c:	bf e3       	ldi	r27, 0x3F	; 63
    3b3e:	8f a3       	std	Y+39, r24	; 0x27
    3b40:	98 a7       	std	Y+40, r25	; 0x28
    3b42:	a9 a7       	std	Y+41, r26	; 0x29
    3b44:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b46:	6f a1       	ldd	r22, Y+39	; 0x27
    3b48:	78 a5       	ldd	r23, Y+40	; 0x28
    3b4a:	89 a5       	ldd	r24, Y+41	; 0x29
    3b4c:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b4e:	20 e0       	ldi	r18, 0x00	; 0
    3b50:	30 e0       	ldi	r19, 0x00	; 0
    3b52:	4a e7       	ldi	r20, 0x7A	; 122
    3b54:	53 e4       	ldi	r21, 0x43	; 67
    3b56:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3b5a:	dc 01       	movw	r26, r24
    3b5c:	cb 01       	movw	r24, r22
    3b5e:	8b a3       	std	Y+35, r24	; 0x23
    3b60:	9c a3       	std	Y+36, r25	; 0x24
    3b62:	ad a3       	std	Y+37, r26	; 0x25
    3b64:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3b66:	6b a1       	ldd	r22, Y+35	; 0x23
    3b68:	7c a1       	ldd	r23, Y+36	; 0x24
    3b6a:	8d a1       	ldd	r24, Y+37	; 0x25
    3b6c:	9e a1       	ldd	r25, Y+38	; 0x26
    3b6e:	20 e0       	ldi	r18, 0x00	; 0
    3b70:	30 e0       	ldi	r19, 0x00	; 0
    3b72:	40 e8       	ldi	r20, 0x80	; 128
    3b74:	5f e3       	ldi	r21, 0x3F	; 63
    3b76:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3b7a:	88 23       	and	r24, r24
    3b7c:	2c f4       	brge	.+10     	; 0x3b88 <LCD_displayCharacter+0x160>
		__ticks = 1;
    3b7e:	81 e0       	ldi	r24, 0x01	; 1
    3b80:	90 e0       	ldi	r25, 0x00	; 0
    3b82:	9a a3       	std	Y+34, r25	; 0x22
    3b84:	89 a3       	std	Y+33, r24	; 0x21
    3b86:	3f c0       	rjmp	.+126    	; 0x3c06 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    3b88:	6b a1       	ldd	r22, Y+35	; 0x23
    3b8a:	7c a1       	ldd	r23, Y+36	; 0x24
    3b8c:	8d a1       	ldd	r24, Y+37	; 0x25
    3b8e:	9e a1       	ldd	r25, Y+38	; 0x26
    3b90:	20 e0       	ldi	r18, 0x00	; 0
    3b92:	3f ef       	ldi	r19, 0xFF	; 255
    3b94:	4f e7       	ldi	r20, 0x7F	; 127
    3b96:	57 e4       	ldi	r21, 0x47	; 71
    3b98:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3b9c:	18 16       	cp	r1, r24
    3b9e:	4c f5       	brge	.+82     	; 0x3bf2 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ba0:	6f a1       	ldd	r22, Y+39	; 0x27
    3ba2:	78 a5       	ldd	r23, Y+40	; 0x28
    3ba4:	89 a5       	ldd	r24, Y+41	; 0x29
    3ba6:	9a a5       	ldd	r25, Y+42	; 0x2a
    3ba8:	20 e0       	ldi	r18, 0x00	; 0
    3baa:	30 e0       	ldi	r19, 0x00	; 0
    3bac:	40 e2       	ldi	r20, 0x20	; 32
    3bae:	51 e4       	ldi	r21, 0x41	; 65
    3bb0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3bb4:	dc 01       	movw	r26, r24
    3bb6:	cb 01       	movw	r24, r22
    3bb8:	bc 01       	movw	r22, r24
    3bba:	cd 01       	movw	r24, r26
    3bbc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3bc0:	dc 01       	movw	r26, r24
    3bc2:	cb 01       	movw	r24, r22
    3bc4:	9a a3       	std	Y+34, r25	; 0x22
    3bc6:	89 a3       	std	Y+33, r24	; 0x21
    3bc8:	0f c0       	rjmp	.+30     	; 0x3be8 <LCD_displayCharacter+0x1c0>
    3bca:	89 e1       	ldi	r24, 0x19	; 25
    3bcc:	90 e0       	ldi	r25, 0x00	; 0
    3bce:	98 a3       	std	Y+32, r25	; 0x20
    3bd0:	8f 8f       	std	Y+31, r24	; 0x1f
    3bd2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3bd4:	98 a1       	ldd	r25, Y+32	; 0x20
    3bd6:	01 97       	sbiw	r24, 0x01	; 1
    3bd8:	f1 f7       	brne	.-4      	; 0x3bd6 <LCD_displayCharacter+0x1ae>
    3bda:	98 a3       	std	Y+32, r25	; 0x20
    3bdc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bde:	89 a1       	ldd	r24, Y+33	; 0x21
    3be0:	9a a1       	ldd	r25, Y+34	; 0x22
    3be2:	01 97       	sbiw	r24, 0x01	; 1
    3be4:	9a a3       	std	Y+34, r25	; 0x22
    3be6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3be8:	89 a1       	ldd	r24, Y+33	; 0x21
    3bea:	9a a1       	ldd	r25, Y+34	; 0x22
    3bec:	00 97       	sbiw	r24, 0x00	; 0
    3bee:	69 f7       	brne	.-38     	; 0x3bca <LCD_displayCharacter+0x1a2>
    3bf0:	14 c0       	rjmp	.+40     	; 0x3c1a <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bf2:	6b a1       	ldd	r22, Y+35	; 0x23
    3bf4:	7c a1       	ldd	r23, Y+36	; 0x24
    3bf6:	8d a1       	ldd	r24, Y+37	; 0x25
    3bf8:	9e a1       	ldd	r25, Y+38	; 0x26
    3bfa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3bfe:	dc 01       	movw	r26, r24
    3c00:	cb 01       	movw	r24, r22
    3c02:	9a a3       	std	Y+34, r25	; 0x22
    3c04:	89 a3       	std	Y+33, r24	; 0x21
    3c06:	89 a1       	ldd	r24, Y+33	; 0x21
    3c08:	9a a1       	ldd	r25, Y+34	; 0x22
    3c0a:	9e 8f       	std	Y+30, r25	; 0x1e
    3c0c:	8d 8f       	std	Y+29, r24	; 0x1d
    3c0e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3c10:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3c12:	01 97       	sbiw	r24, 0x01	; 1
    3c14:	f1 f7       	brne	.-4      	; 0x3c12 <LCD_displayCharacter+0x1ea>
    3c16:	9e 8f       	std	Y+30, r25	; 0x1e
    3c18:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    3c1a:	80 e0       	ldi	r24, 0x00	; 0
    3c1c:	69 ad       	ldd	r22, Y+57	; 0x39
    3c1e:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <GPIO_writePort>
    3c22:	80 e0       	ldi	r24, 0x00	; 0
    3c24:	90 e0       	ldi	r25, 0x00	; 0
    3c26:	a0 e8       	ldi	r26, 0x80	; 128
    3c28:	bf e3       	ldi	r27, 0x3F	; 63
    3c2a:	89 8f       	std	Y+25, r24	; 0x19
    3c2c:	9a 8f       	std	Y+26, r25	; 0x1a
    3c2e:	ab 8f       	std	Y+27, r26	; 0x1b
    3c30:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c32:	69 8d       	ldd	r22, Y+25	; 0x19
    3c34:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c36:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c38:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c3a:	20 e0       	ldi	r18, 0x00	; 0
    3c3c:	30 e0       	ldi	r19, 0x00	; 0
    3c3e:	4a e7       	ldi	r20, 0x7A	; 122
    3c40:	53 e4       	ldi	r21, 0x43	; 67
    3c42:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3c46:	dc 01       	movw	r26, r24
    3c48:	cb 01       	movw	r24, r22
    3c4a:	8d 8b       	std	Y+21, r24	; 0x15
    3c4c:	9e 8b       	std	Y+22, r25	; 0x16
    3c4e:	af 8b       	std	Y+23, r26	; 0x17
    3c50:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3c52:	6d 89       	ldd	r22, Y+21	; 0x15
    3c54:	7e 89       	ldd	r23, Y+22	; 0x16
    3c56:	8f 89       	ldd	r24, Y+23	; 0x17
    3c58:	98 8d       	ldd	r25, Y+24	; 0x18
    3c5a:	20 e0       	ldi	r18, 0x00	; 0
    3c5c:	30 e0       	ldi	r19, 0x00	; 0
    3c5e:	40 e8       	ldi	r20, 0x80	; 128
    3c60:	5f e3       	ldi	r21, 0x3F	; 63
    3c62:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3c66:	88 23       	and	r24, r24
    3c68:	2c f4       	brge	.+10     	; 0x3c74 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    3c6a:	81 e0       	ldi	r24, 0x01	; 1
    3c6c:	90 e0       	ldi	r25, 0x00	; 0
    3c6e:	9c 8b       	std	Y+20, r25	; 0x14
    3c70:	8b 8b       	std	Y+19, r24	; 0x13
    3c72:	3f c0       	rjmp	.+126    	; 0x3cf2 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    3c74:	6d 89       	ldd	r22, Y+21	; 0x15
    3c76:	7e 89       	ldd	r23, Y+22	; 0x16
    3c78:	8f 89       	ldd	r24, Y+23	; 0x17
    3c7a:	98 8d       	ldd	r25, Y+24	; 0x18
    3c7c:	20 e0       	ldi	r18, 0x00	; 0
    3c7e:	3f ef       	ldi	r19, 0xFF	; 255
    3c80:	4f e7       	ldi	r20, 0x7F	; 127
    3c82:	57 e4       	ldi	r21, 0x47	; 71
    3c84:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3c88:	18 16       	cp	r1, r24
    3c8a:	4c f5       	brge	.+82     	; 0x3cde <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c8c:	69 8d       	ldd	r22, Y+25	; 0x19
    3c8e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c90:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c92:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c94:	20 e0       	ldi	r18, 0x00	; 0
    3c96:	30 e0       	ldi	r19, 0x00	; 0
    3c98:	40 e2       	ldi	r20, 0x20	; 32
    3c9a:	51 e4       	ldi	r21, 0x41	; 65
    3c9c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3ca0:	dc 01       	movw	r26, r24
    3ca2:	cb 01       	movw	r24, r22
    3ca4:	bc 01       	movw	r22, r24
    3ca6:	cd 01       	movw	r24, r26
    3ca8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3cac:	dc 01       	movw	r26, r24
    3cae:	cb 01       	movw	r24, r22
    3cb0:	9c 8b       	std	Y+20, r25	; 0x14
    3cb2:	8b 8b       	std	Y+19, r24	; 0x13
    3cb4:	0f c0       	rjmp	.+30     	; 0x3cd4 <LCD_displayCharacter+0x2ac>
    3cb6:	89 e1       	ldi	r24, 0x19	; 25
    3cb8:	90 e0       	ldi	r25, 0x00	; 0
    3cba:	9a 8b       	std	Y+18, r25	; 0x12
    3cbc:	89 8b       	std	Y+17, r24	; 0x11
    3cbe:	89 89       	ldd	r24, Y+17	; 0x11
    3cc0:	9a 89       	ldd	r25, Y+18	; 0x12
    3cc2:	01 97       	sbiw	r24, 0x01	; 1
    3cc4:	f1 f7       	brne	.-4      	; 0x3cc2 <LCD_displayCharacter+0x29a>
    3cc6:	9a 8b       	std	Y+18, r25	; 0x12
    3cc8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cca:	8b 89       	ldd	r24, Y+19	; 0x13
    3ccc:	9c 89       	ldd	r25, Y+20	; 0x14
    3cce:	01 97       	sbiw	r24, 0x01	; 1
    3cd0:	9c 8b       	std	Y+20, r25	; 0x14
    3cd2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cd4:	8b 89       	ldd	r24, Y+19	; 0x13
    3cd6:	9c 89       	ldd	r25, Y+20	; 0x14
    3cd8:	00 97       	sbiw	r24, 0x00	; 0
    3cda:	69 f7       	brne	.-38     	; 0x3cb6 <LCD_displayCharacter+0x28e>
    3cdc:	14 c0       	rjmp	.+40     	; 0x3d06 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cde:	6d 89       	ldd	r22, Y+21	; 0x15
    3ce0:	7e 89       	ldd	r23, Y+22	; 0x16
    3ce2:	8f 89       	ldd	r24, Y+23	; 0x17
    3ce4:	98 8d       	ldd	r25, Y+24	; 0x18
    3ce6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3cea:	dc 01       	movw	r26, r24
    3cec:	cb 01       	movw	r24, r22
    3cee:	9c 8b       	std	Y+20, r25	; 0x14
    3cf0:	8b 8b       	std	Y+19, r24	; 0x13
    3cf2:	8b 89       	ldd	r24, Y+19	; 0x13
    3cf4:	9c 89       	ldd	r25, Y+20	; 0x14
    3cf6:	98 8b       	std	Y+16, r25	; 0x10
    3cf8:	8f 87       	std	Y+15, r24	; 0x0f
    3cfa:	8f 85       	ldd	r24, Y+15	; 0x0f
    3cfc:	98 89       	ldd	r25, Y+16	; 0x10
    3cfe:	01 97       	sbiw	r24, 0x01	; 1
    3d00:	f1 f7       	brne	.-4      	; 0x3cfe <LCD_displayCharacter+0x2d6>
    3d02:	98 8b       	std	Y+16, r25	; 0x10
    3d04:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3d06:	82 e0       	ldi	r24, 0x02	; 2
    3d08:	61 e0       	ldi	r22, 0x01	; 1
    3d0a:	40 e0       	ldi	r20, 0x00	; 0
    3d0c:	0e 94 21 17 	call	0x2e42	; 0x2e42 <GPIO_writePin>
    3d10:	80 e0       	ldi	r24, 0x00	; 0
    3d12:	90 e0       	ldi	r25, 0x00	; 0
    3d14:	a0 e8       	ldi	r26, 0x80	; 128
    3d16:	bf e3       	ldi	r27, 0x3F	; 63
    3d18:	8b 87       	std	Y+11, r24	; 0x0b
    3d1a:	9c 87       	std	Y+12, r25	; 0x0c
    3d1c:	ad 87       	std	Y+13, r26	; 0x0d
    3d1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d20:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d22:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d24:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d26:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d28:	20 e0       	ldi	r18, 0x00	; 0
    3d2a:	30 e0       	ldi	r19, 0x00	; 0
    3d2c:	4a e7       	ldi	r20, 0x7A	; 122
    3d2e:	53 e4       	ldi	r21, 0x43	; 67
    3d30:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3d34:	dc 01       	movw	r26, r24
    3d36:	cb 01       	movw	r24, r22
    3d38:	8f 83       	std	Y+7, r24	; 0x07
    3d3a:	98 87       	std	Y+8, r25	; 0x08
    3d3c:	a9 87       	std	Y+9, r26	; 0x09
    3d3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d40:	6f 81       	ldd	r22, Y+7	; 0x07
    3d42:	78 85       	ldd	r23, Y+8	; 0x08
    3d44:	89 85       	ldd	r24, Y+9	; 0x09
    3d46:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d48:	20 e0       	ldi	r18, 0x00	; 0
    3d4a:	30 e0       	ldi	r19, 0x00	; 0
    3d4c:	40 e8       	ldi	r20, 0x80	; 128
    3d4e:	5f e3       	ldi	r21, 0x3F	; 63
    3d50:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3d54:	88 23       	and	r24, r24
    3d56:	2c f4       	brge	.+10     	; 0x3d62 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    3d58:	81 e0       	ldi	r24, 0x01	; 1
    3d5a:	90 e0       	ldi	r25, 0x00	; 0
    3d5c:	9e 83       	std	Y+6, r25	; 0x06
    3d5e:	8d 83       	std	Y+5, r24	; 0x05
    3d60:	3f c0       	rjmp	.+126    	; 0x3de0 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    3d62:	6f 81       	ldd	r22, Y+7	; 0x07
    3d64:	78 85       	ldd	r23, Y+8	; 0x08
    3d66:	89 85       	ldd	r24, Y+9	; 0x09
    3d68:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d6a:	20 e0       	ldi	r18, 0x00	; 0
    3d6c:	3f ef       	ldi	r19, 0xFF	; 255
    3d6e:	4f e7       	ldi	r20, 0x7F	; 127
    3d70:	57 e4       	ldi	r21, 0x47	; 71
    3d72:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3d76:	18 16       	cp	r1, r24
    3d78:	4c f5       	brge	.+82     	; 0x3dcc <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d80:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d82:	20 e0       	ldi	r18, 0x00	; 0
    3d84:	30 e0       	ldi	r19, 0x00	; 0
    3d86:	40 e2       	ldi	r20, 0x20	; 32
    3d88:	51 e4       	ldi	r21, 0x41	; 65
    3d8a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3d8e:	dc 01       	movw	r26, r24
    3d90:	cb 01       	movw	r24, r22
    3d92:	bc 01       	movw	r22, r24
    3d94:	cd 01       	movw	r24, r26
    3d96:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3d9a:	dc 01       	movw	r26, r24
    3d9c:	cb 01       	movw	r24, r22
    3d9e:	9e 83       	std	Y+6, r25	; 0x06
    3da0:	8d 83       	std	Y+5, r24	; 0x05
    3da2:	0f c0       	rjmp	.+30     	; 0x3dc2 <LCD_displayCharacter+0x39a>
    3da4:	89 e1       	ldi	r24, 0x19	; 25
    3da6:	90 e0       	ldi	r25, 0x00	; 0
    3da8:	9c 83       	std	Y+4, r25	; 0x04
    3daa:	8b 83       	std	Y+3, r24	; 0x03
    3dac:	8b 81       	ldd	r24, Y+3	; 0x03
    3dae:	9c 81       	ldd	r25, Y+4	; 0x04
    3db0:	01 97       	sbiw	r24, 0x01	; 1
    3db2:	f1 f7       	brne	.-4      	; 0x3db0 <LCD_displayCharacter+0x388>
    3db4:	9c 83       	std	Y+4, r25	; 0x04
    3db6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3db8:	8d 81       	ldd	r24, Y+5	; 0x05
    3dba:	9e 81       	ldd	r25, Y+6	; 0x06
    3dbc:	01 97       	sbiw	r24, 0x01	; 1
    3dbe:	9e 83       	std	Y+6, r25	; 0x06
    3dc0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dc2:	8d 81       	ldd	r24, Y+5	; 0x05
    3dc4:	9e 81       	ldd	r25, Y+6	; 0x06
    3dc6:	00 97       	sbiw	r24, 0x00	; 0
    3dc8:	69 f7       	brne	.-38     	; 0x3da4 <LCD_displayCharacter+0x37c>
    3dca:	14 c0       	rjmp	.+40     	; 0x3df4 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dcc:	6f 81       	ldd	r22, Y+7	; 0x07
    3dce:	78 85       	ldd	r23, Y+8	; 0x08
    3dd0:	89 85       	ldd	r24, Y+9	; 0x09
    3dd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dd4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3dd8:	dc 01       	movw	r26, r24
    3dda:	cb 01       	movw	r24, r22
    3ddc:	9e 83       	std	Y+6, r25	; 0x06
    3dde:	8d 83       	std	Y+5, r24	; 0x05
    3de0:	8d 81       	ldd	r24, Y+5	; 0x05
    3de2:	9e 81       	ldd	r25, Y+6	; 0x06
    3de4:	9a 83       	std	Y+2, r25	; 0x02
    3de6:	89 83       	std	Y+1, r24	; 0x01
    3de8:	89 81       	ldd	r24, Y+1	; 0x01
    3dea:	9a 81       	ldd	r25, Y+2	; 0x02
    3dec:	01 97       	sbiw	r24, 0x01	; 1
    3dee:	f1 f7       	brne	.-4      	; 0x3dec <LCD_displayCharacter+0x3c4>
    3df0:	9a 83       	std	Y+2, r25	; 0x02
    3df2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3df4:	e9 96       	adiw	r28, 0x39	; 57
    3df6:	0f b6       	in	r0, 0x3f	; 63
    3df8:	f8 94       	cli
    3dfa:	de bf       	out	0x3e, r29	; 62
    3dfc:	0f be       	out	0x3f, r0	; 63
    3dfe:	cd bf       	out	0x3d, r28	; 61
    3e00:	cf 91       	pop	r28
    3e02:	df 91       	pop	r29
    3e04:	08 95       	ret

00003e06 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    3e06:	df 93       	push	r29
    3e08:	cf 93       	push	r28
    3e0a:	00 d0       	rcall	.+0      	; 0x3e0c <LCD_displayString+0x6>
    3e0c:	0f 92       	push	r0
    3e0e:	cd b7       	in	r28, 0x3d	; 61
    3e10:	de b7       	in	r29, 0x3e	; 62
    3e12:	9b 83       	std	Y+3, r25	; 0x03
    3e14:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3e16:	19 82       	std	Y+1, r1	; 0x01
    3e18:	15 c0       	rjmp	.+42     	; 0x3e44 <LCD_displayString+0x3e>
	while(Str[i] != '\0')
	{
		if (i == 16){
    3e1a:	89 81       	ldd	r24, Y+1	; 0x01
    3e1c:	80 31       	cpi	r24, 0x10	; 16
    3e1e:	21 f4       	brne	.+8      	; 0x3e28 <LCD_displayString+0x22>
			LCD_moveCursor(2, 0);
    3e20:	82 e0       	ldi	r24, 0x02	; 2
    3e22:	60 e0       	ldi	r22, 0x00	; 0
    3e24:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <LCD_moveCursor>
		}
		LCD_displayCharacter(Str[i]);
    3e28:	89 81       	ldd	r24, Y+1	; 0x01
    3e2a:	28 2f       	mov	r18, r24
    3e2c:	30 e0       	ldi	r19, 0x00	; 0
    3e2e:	8a 81       	ldd	r24, Y+2	; 0x02
    3e30:	9b 81       	ldd	r25, Y+3	; 0x03
    3e32:	fc 01       	movw	r30, r24
    3e34:	e2 0f       	add	r30, r18
    3e36:	f3 1f       	adc	r31, r19
    3e38:	80 81       	ld	r24, Z
    3e3a:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <LCD_displayCharacter>
		i++;
    3e3e:	89 81       	ldd	r24, Y+1	; 0x01
    3e40:	8f 5f       	subi	r24, 0xFF	; 255
    3e42:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    3e44:	89 81       	ldd	r24, Y+1	; 0x01
    3e46:	28 2f       	mov	r18, r24
    3e48:	30 e0       	ldi	r19, 0x00	; 0
    3e4a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e4c:	9b 81       	ldd	r25, Y+3	; 0x03
    3e4e:	fc 01       	movw	r30, r24
    3e50:	e2 0f       	add	r30, r18
    3e52:	f3 1f       	adc	r31, r19
    3e54:	80 81       	ld	r24, Z
    3e56:	88 23       	and	r24, r24
    3e58:	01 f7       	brne	.-64     	; 0x3e1a <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    3e5a:	0f 90       	pop	r0
    3e5c:	0f 90       	pop	r0
    3e5e:	0f 90       	pop	r0
    3e60:	cf 91       	pop	r28
    3e62:	df 91       	pop	r29
    3e64:	08 95       	ret

00003e66 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    3e66:	df 93       	push	r29
    3e68:	cf 93       	push	r28
    3e6a:	00 d0       	rcall	.+0      	; 0x3e6c <LCD_moveCursor+0x6>
    3e6c:	00 d0       	rcall	.+0      	; 0x3e6e <LCD_moveCursor+0x8>
    3e6e:	0f 92       	push	r0
    3e70:	cd b7       	in	r28, 0x3d	; 61
    3e72:	de b7       	in	r29, 0x3e	; 62
    3e74:	8a 83       	std	Y+2, r24	; 0x02
    3e76:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    3e78:	8a 81       	ldd	r24, Y+2	; 0x02
    3e7a:	28 2f       	mov	r18, r24
    3e7c:	30 e0       	ldi	r19, 0x00	; 0
    3e7e:	3d 83       	std	Y+5, r19	; 0x05
    3e80:	2c 83       	std	Y+4, r18	; 0x04
    3e82:	8c 81       	ldd	r24, Y+4	; 0x04
    3e84:	9d 81       	ldd	r25, Y+5	; 0x05
    3e86:	81 30       	cpi	r24, 0x01	; 1
    3e88:	91 05       	cpc	r25, r1
    3e8a:	c1 f0       	breq	.+48     	; 0x3ebc <LCD_moveCursor+0x56>
    3e8c:	2c 81       	ldd	r18, Y+4	; 0x04
    3e8e:	3d 81       	ldd	r19, Y+5	; 0x05
    3e90:	22 30       	cpi	r18, 0x02	; 2
    3e92:	31 05       	cpc	r19, r1
    3e94:	2c f4       	brge	.+10     	; 0x3ea0 <LCD_moveCursor+0x3a>
    3e96:	8c 81       	ldd	r24, Y+4	; 0x04
    3e98:	9d 81       	ldd	r25, Y+5	; 0x05
    3e9a:	00 97       	sbiw	r24, 0x00	; 0
    3e9c:	61 f0       	breq	.+24     	; 0x3eb6 <LCD_moveCursor+0x50>
    3e9e:	19 c0       	rjmp	.+50     	; 0x3ed2 <LCD_moveCursor+0x6c>
    3ea0:	2c 81       	ldd	r18, Y+4	; 0x04
    3ea2:	3d 81       	ldd	r19, Y+5	; 0x05
    3ea4:	22 30       	cpi	r18, 0x02	; 2
    3ea6:	31 05       	cpc	r19, r1
    3ea8:	69 f0       	breq	.+26     	; 0x3ec4 <LCD_moveCursor+0x5e>
    3eaa:	8c 81       	ldd	r24, Y+4	; 0x04
    3eac:	9d 81       	ldd	r25, Y+5	; 0x05
    3eae:	83 30       	cpi	r24, 0x03	; 3
    3eb0:	91 05       	cpc	r25, r1
    3eb2:	61 f0       	breq	.+24     	; 0x3ecc <LCD_moveCursor+0x66>
    3eb4:	0e c0       	rjmp	.+28     	; 0x3ed2 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    3eb6:	8b 81       	ldd	r24, Y+3	; 0x03
    3eb8:	89 83       	std	Y+1, r24	; 0x01
    3eba:	0b c0       	rjmp	.+22     	; 0x3ed2 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    3ebc:	8b 81       	ldd	r24, Y+3	; 0x03
    3ebe:	80 5c       	subi	r24, 0xC0	; 192
    3ec0:	89 83       	std	Y+1, r24	; 0x01
    3ec2:	07 c0       	rjmp	.+14     	; 0x3ed2 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    3ec4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ec6:	80 5f       	subi	r24, 0xF0	; 240
    3ec8:	89 83       	std	Y+1, r24	; 0x01
    3eca:	03 c0       	rjmp	.+6      	; 0x3ed2 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    3ecc:	8b 81       	ldd	r24, Y+3	; 0x03
    3ece:	80 5b       	subi	r24, 0xB0	; 176
    3ed0:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    3ed2:	89 81       	ldd	r24, Y+1	; 0x01
    3ed4:	80 68       	ori	r24, 0x80	; 128
    3ed6:	0e 94 25 1b 	call	0x364a	; 0x364a <LCD_sendCommand>
}
    3eda:	0f 90       	pop	r0
    3edc:	0f 90       	pop	r0
    3ede:	0f 90       	pop	r0
    3ee0:	0f 90       	pop	r0
    3ee2:	0f 90       	pop	r0
    3ee4:	cf 91       	pop	r28
    3ee6:	df 91       	pop	r29
    3ee8:	08 95       	ret

00003eea <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    3eea:	df 93       	push	r29
    3eec:	cf 93       	push	r28
    3eee:	00 d0       	rcall	.+0      	; 0x3ef0 <LCD_displayStringRowColumn+0x6>
    3ef0:	00 d0       	rcall	.+0      	; 0x3ef2 <LCD_displayStringRowColumn+0x8>
    3ef2:	cd b7       	in	r28, 0x3d	; 61
    3ef4:	de b7       	in	r29, 0x3e	; 62
    3ef6:	89 83       	std	Y+1, r24	; 0x01
    3ef8:	6a 83       	std	Y+2, r22	; 0x02
    3efa:	5c 83       	std	Y+4, r21	; 0x04
    3efc:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    3efe:	89 81       	ldd	r24, Y+1	; 0x01
    3f00:	6a 81       	ldd	r22, Y+2	; 0x02
    3f02:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    3f06:	8b 81       	ldd	r24, Y+3	; 0x03
    3f08:	9c 81       	ldd	r25, Y+4	; 0x04
    3f0a:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <LCD_displayString>
}
    3f0e:	0f 90       	pop	r0
    3f10:	0f 90       	pop	r0
    3f12:	0f 90       	pop	r0
    3f14:	0f 90       	pop	r0
    3f16:	cf 91       	pop	r28
    3f18:	df 91       	pop	r29
    3f1a:	08 95       	ret

00003f1c <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    3f1c:	df 93       	push	r29
    3f1e:	cf 93       	push	r28
    3f20:	cd b7       	in	r28, 0x3d	; 61
    3f22:	de b7       	in	r29, 0x3e	; 62
    3f24:	62 97       	sbiw	r28, 0x12	; 18
    3f26:	0f b6       	in	r0, 0x3f	; 63
    3f28:	f8 94       	cli
    3f2a:	de bf       	out	0x3e, r29	; 62
    3f2c:	0f be       	out	0x3f, r0	; 63
    3f2e:	cd bf       	out	0x3d, r28	; 61
    3f30:	9a 8b       	std	Y+18, r25	; 0x12
    3f32:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    3f34:	89 89       	ldd	r24, Y+17	; 0x11
    3f36:	9a 89       	ldd	r25, Y+18	; 0x12
    3f38:	9e 01       	movw	r18, r28
    3f3a:	2f 5f       	subi	r18, 0xFF	; 255
    3f3c:	3f 4f       	sbci	r19, 0xFF	; 255
    3f3e:	b9 01       	movw	r22, r18
    3f40:	4a e0       	ldi	r20, 0x0A	; 10
    3f42:	50 e0       	ldi	r21, 0x00	; 0
    3f44:	0e 94 19 20 	call	0x4032	; 0x4032 <itoa>
   LCD_displayString(buff); /* Display the string */
    3f48:	ce 01       	movw	r24, r28
    3f4a:	01 96       	adiw	r24, 0x01	; 1
    3f4c:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <LCD_displayString>
}
    3f50:	62 96       	adiw	r28, 0x12	; 18
    3f52:	0f b6       	in	r0, 0x3f	; 63
    3f54:	f8 94       	cli
    3f56:	de bf       	out	0x3e, r29	; 62
    3f58:	0f be       	out	0x3f, r0	; 63
    3f5a:	cd bf       	out	0x3d, r28	; 61
    3f5c:	cf 91       	pop	r28
    3f5e:	df 91       	pop	r29
    3f60:	08 95       	ret

00003f62 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    3f62:	df 93       	push	r29
    3f64:	cf 93       	push	r28
    3f66:	cd b7       	in	r28, 0x3d	; 61
    3f68:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    3f6a:	81 e0       	ldi	r24, 0x01	; 1
    3f6c:	0e 94 25 1b 	call	0x364a	; 0x364a <LCD_sendCommand>
}
    3f70:	cf 91       	pop	r28
    3f72:	df 91       	pop	r29
    3f74:	08 95       	ret

00003f76 <__prologue_saves__>:
    3f76:	2f 92       	push	r2
    3f78:	3f 92       	push	r3
    3f7a:	4f 92       	push	r4
    3f7c:	5f 92       	push	r5
    3f7e:	6f 92       	push	r6
    3f80:	7f 92       	push	r7
    3f82:	8f 92       	push	r8
    3f84:	9f 92       	push	r9
    3f86:	af 92       	push	r10
    3f88:	bf 92       	push	r11
    3f8a:	cf 92       	push	r12
    3f8c:	df 92       	push	r13
    3f8e:	ef 92       	push	r14
    3f90:	ff 92       	push	r15
    3f92:	0f 93       	push	r16
    3f94:	1f 93       	push	r17
    3f96:	cf 93       	push	r28
    3f98:	df 93       	push	r29
    3f9a:	cd b7       	in	r28, 0x3d	; 61
    3f9c:	de b7       	in	r29, 0x3e	; 62
    3f9e:	ca 1b       	sub	r28, r26
    3fa0:	db 0b       	sbc	r29, r27
    3fa2:	0f b6       	in	r0, 0x3f	; 63
    3fa4:	f8 94       	cli
    3fa6:	de bf       	out	0x3e, r29	; 62
    3fa8:	0f be       	out	0x3f, r0	; 63
    3faa:	cd bf       	out	0x3d, r28	; 61
    3fac:	09 94       	ijmp

00003fae <__epilogue_restores__>:
    3fae:	2a 88       	ldd	r2, Y+18	; 0x12
    3fb0:	39 88       	ldd	r3, Y+17	; 0x11
    3fb2:	48 88       	ldd	r4, Y+16	; 0x10
    3fb4:	5f 84       	ldd	r5, Y+15	; 0x0f
    3fb6:	6e 84       	ldd	r6, Y+14	; 0x0e
    3fb8:	7d 84       	ldd	r7, Y+13	; 0x0d
    3fba:	8c 84       	ldd	r8, Y+12	; 0x0c
    3fbc:	9b 84       	ldd	r9, Y+11	; 0x0b
    3fbe:	aa 84       	ldd	r10, Y+10	; 0x0a
    3fc0:	b9 84       	ldd	r11, Y+9	; 0x09
    3fc2:	c8 84       	ldd	r12, Y+8	; 0x08
    3fc4:	df 80       	ldd	r13, Y+7	; 0x07
    3fc6:	ee 80       	ldd	r14, Y+6	; 0x06
    3fc8:	fd 80       	ldd	r15, Y+5	; 0x05
    3fca:	0c 81       	ldd	r16, Y+4	; 0x04
    3fcc:	1b 81       	ldd	r17, Y+3	; 0x03
    3fce:	aa 81       	ldd	r26, Y+2	; 0x02
    3fd0:	b9 81       	ldd	r27, Y+1	; 0x01
    3fd2:	ce 0f       	add	r28, r30
    3fd4:	d1 1d       	adc	r29, r1
    3fd6:	0f b6       	in	r0, 0x3f	; 63
    3fd8:	f8 94       	cli
    3fda:	de bf       	out	0x3e, r29	; 62
    3fdc:	0f be       	out	0x3f, r0	; 63
    3fde:	cd bf       	out	0x3d, r28	; 61
    3fe0:	ed 01       	movw	r28, r26
    3fe2:	08 95       	ret

00003fe4 <atol>:
    3fe4:	1f 93       	push	r17
    3fe6:	fc 01       	movw	r30, r24
    3fe8:	99 27       	eor	r25, r25
    3fea:	88 27       	eor	r24, r24
    3fec:	bc 01       	movw	r22, r24
    3fee:	e8 94       	clt
    3ff0:	11 91       	ld	r17, Z+
    3ff2:	10 32       	cpi	r17, 0x20	; 32
    3ff4:	e9 f3       	breq	.-6      	; 0x3ff0 <atol+0xc>
    3ff6:	19 30       	cpi	r17, 0x09	; 9
    3ff8:	10 f0       	brcs	.+4      	; 0x3ffe <atol+0x1a>
    3ffa:	1e 30       	cpi	r17, 0x0E	; 14
    3ffc:	c8 f3       	brcs	.-14     	; 0x3ff0 <atol+0xc>
    3ffe:	1b 32       	cpi	r17, 0x2B	; 43
    4000:	51 f0       	breq	.+20     	; 0x4016 <atol+0x32>
    4002:	1d 32       	cpi	r17, 0x2D	; 45
    4004:	49 f4       	brne	.+18     	; 0x4018 <atol+0x34>
    4006:	68 94       	set
    4008:	06 c0       	rjmp	.+12     	; 0x4016 <atol+0x32>
    400a:	0e 94 3a 20 	call	0x4074	; 0x4074 <__mulsi_const_10>
    400e:	61 0f       	add	r22, r17
    4010:	71 1d       	adc	r23, r1
    4012:	81 1d       	adc	r24, r1
    4014:	91 1d       	adc	r25, r1
    4016:	11 91       	ld	r17, Z+
    4018:	10 53       	subi	r17, 0x30	; 48
    401a:	1a 30       	cpi	r17, 0x0A	; 10
    401c:	b0 f3       	brcs	.-20     	; 0x400a <atol+0x26>
    401e:	3e f4       	brtc	.+14     	; 0x402e <atol+0x4a>
    4020:	90 95       	com	r25
    4022:	80 95       	com	r24
    4024:	70 95       	com	r23
    4026:	61 95       	neg	r22
    4028:	7f 4f       	sbci	r23, 0xFF	; 255
    402a:	8f 4f       	sbci	r24, 0xFF	; 255
    402c:	9f 4f       	sbci	r25, 0xFF	; 255
    402e:	1f 91       	pop	r17
    4030:	08 95       	ret

00004032 <itoa>:
    4032:	fb 01       	movw	r30, r22
    4034:	9f 01       	movw	r18, r30
    4036:	e8 94       	clt
    4038:	42 30       	cpi	r20, 0x02	; 2
    403a:	c4 f0       	brlt	.+48     	; 0x406c <itoa+0x3a>
    403c:	45 32       	cpi	r20, 0x25	; 37
    403e:	b4 f4       	brge	.+44     	; 0x406c <itoa+0x3a>
    4040:	4a 30       	cpi	r20, 0x0A	; 10
    4042:	29 f4       	brne	.+10     	; 0x404e <itoa+0x1c>
    4044:	97 fb       	bst	r25, 7
    4046:	1e f4       	brtc	.+6      	; 0x404e <itoa+0x1c>
    4048:	90 95       	com	r25
    404a:	81 95       	neg	r24
    404c:	9f 4f       	sbci	r25, 0xFF	; 255
    404e:	64 2f       	mov	r22, r20
    4050:	77 27       	eor	r23, r23
    4052:	0e 94 db 20 	call	0x41b6	; 0x41b6 <__udivmodhi4>
    4056:	80 5d       	subi	r24, 0xD0	; 208
    4058:	8a 33       	cpi	r24, 0x3A	; 58
    405a:	0c f0       	brlt	.+2      	; 0x405e <itoa+0x2c>
    405c:	89 5d       	subi	r24, 0xD9	; 217
    405e:	81 93       	st	Z+, r24
    4060:	cb 01       	movw	r24, r22
    4062:	00 97       	sbiw	r24, 0x00	; 0
    4064:	a1 f7       	brne	.-24     	; 0x404e <itoa+0x1c>
    4066:	16 f4       	brtc	.+4      	; 0x406c <itoa+0x3a>
    4068:	5d e2       	ldi	r21, 0x2D	; 45
    406a:	51 93       	st	Z+, r21
    406c:	10 82       	st	Z, r1
    406e:	c9 01       	movw	r24, r18
    4070:	0c 94 91 20 	jmp	0x4122	; 0x4122 <strrev>

00004074 <__mulsi_const_10>:
    4074:	59 2f       	mov	r21, r25
    4076:	48 2f       	mov	r20, r24
    4078:	37 2f       	mov	r19, r23
    407a:	26 2f       	mov	r18, r22
    407c:	66 0f       	add	r22, r22
    407e:	77 1f       	adc	r23, r23
    4080:	88 1f       	adc	r24, r24
    4082:	99 1f       	adc	r25, r25
    4084:	66 0f       	add	r22, r22
    4086:	77 1f       	adc	r23, r23
    4088:	88 1f       	adc	r24, r24
    408a:	99 1f       	adc	r25, r25
    408c:	62 0f       	add	r22, r18
    408e:	73 1f       	adc	r23, r19
    4090:	84 1f       	adc	r24, r20
    4092:	95 1f       	adc	r25, r21
    4094:	66 0f       	add	r22, r22
    4096:	77 1f       	adc	r23, r23
    4098:	88 1f       	adc	r24, r24
    409a:	99 1f       	adc	r25, r25
    409c:	08 95       	ret
    409e:	11 f4       	brne	.+4      	; 0x40a4 <__mulsi_const_10+0x30>
    40a0:	0e f4       	brtc	.+2      	; 0x40a4 <__mulsi_const_10+0x30>
    40a2:	5d c0       	rjmp	.+186    	; 0x415e <__fp_nan>
    40a4:	4e c0       	rjmp	.+156    	; 0x4142 <__fp_mpack>

000040a6 <sqrt>:
    40a6:	6d d0       	rcall	.+218    	; 0x4182 <__fp_splitA>
    40a8:	d0 f3       	brcs	.-12     	; 0x409e <__mulsi_const_10+0x2a>
    40aa:	99 23       	and	r25, r25
    40ac:	d9 f3       	breq	.-10     	; 0x40a4 <__mulsi_const_10+0x30>
    40ae:	ce f3       	brts	.-14     	; 0x40a2 <__mulsi_const_10+0x2e>
    40b0:	9f 57       	subi	r25, 0x7F	; 127
    40b2:	55 0b       	sbc	r21, r21
    40b4:	87 ff       	sbrs	r24, 7
    40b6:	56 d0       	rcall	.+172    	; 0x4164 <__fp_norm2>
    40b8:	00 24       	eor	r0, r0
    40ba:	a0 e6       	ldi	r26, 0x60	; 96
    40bc:	40 ea       	ldi	r20, 0xA0	; 160
    40be:	90 01       	movw	r18, r0
    40c0:	80 58       	subi	r24, 0x80	; 128
    40c2:	56 95       	lsr	r21
    40c4:	97 95       	ror	r25
    40c6:	28 f4       	brcc	.+10     	; 0x40d2 <sqrt+0x2c>
    40c8:	80 5c       	subi	r24, 0xC0	; 192
    40ca:	66 0f       	add	r22, r22
    40cc:	77 1f       	adc	r23, r23
    40ce:	88 1f       	adc	r24, r24
    40d0:	20 f0       	brcs	.+8      	; 0x40da <sqrt+0x34>
    40d2:	26 17       	cp	r18, r22
    40d4:	37 07       	cpc	r19, r23
    40d6:	48 07       	cpc	r20, r24
    40d8:	30 f4       	brcc	.+12     	; 0x40e6 <sqrt+0x40>
    40da:	62 1b       	sub	r22, r18
    40dc:	73 0b       	sbc	r23, r19
    40de:	84 0b       	sbc	r24, r20
    40e0:	20 29       	or	r18, r0
    40e2:	31 29       	or	r19, r1
    40e4:	4a 2b       	or	r20, r26
    40e6:	a6 95       	lsr	r26
    40e8:	17 94       	ror	r1
    40ea:	07 94       	ror	r0
    40ec:	20 25       	eor	r18, r0
    40ee:	31 25       	eor	r19, r1
    40f0:	4a 27       	eor	r20, r26
    40f2:	58 f7       	brcc	.-42     	; 0x40ca <sqrt+0x24>
    40f4:	66 0f       	add	r22, r22
    40f6:	77 1f       	adc	r23, r23
    40f8:	88 1f       	adc	r24, r24
    40fa:	20 f0       	brcs	.+8      	; 0x4104 <sqrt+0x5e>
    40fc:	26 17       	cp	r18, r22
    40fe:	37 07       	cpc	r19, r23
    4100:	48 07       	cpc	r20, r24
    4102:	30 f4       	brcc	.+12     	; 0x4110 <sqrt+0x6a>
    4104:	62 0b       	sbc	r22, r18
    4106:	73 0b       	sbc	r23, r19
    4108:	84 0b       	sbc	r24, r20
    410a:	20 0d       	add	r18, r0
    410c:	31 1d       	adc	r19, r1
    410e:	41 1d       	adc	r20, r1
    4110:	a0 95       	com	r26
    4112:	81 f7       	brne	.-32     	; 0x40f4 <sqrt+0x4e>
    4114:	b9 01       	movw	r22, r18
    4116:	84 2f       	mov	r24, r20
    4118:	91 58       	subi	r25, 0x81	; 129
    411a:	88 0f       	add	r24, r24
    411c:	96 95       	lsr	r25
    411e:	87 95       	ror	r24
    4120:	08 95       	ret

00004122 <strrev>:
    4122:	dc 01       	movw	r26, r24
    4124:	fc 01       	movw	r30, r24
    4126:	67 2f       	mov	r22, r23
    4128:	71 91       	ld	r23, Z+
    412a:	77 23       	and	r23, r23
    412c:	e1 f7       	brne	.-8      	; 0x4126 <strrev+0x4>
    412e:	32 97       	sbiw	r30, 0x02	; 2
    4130:	04 c0       	rjmp	.+8      	; 0x413a <strrev+0x18>
    4132:	7c 91       	ld	r23, X
    4134:	6d 93       	st	X+, r22
    4136:	70 83       	st	Z, r23
    4138:	62 91       	ld	r22, -Z
    413a:	ae 17       	cp	r26, r30
    413c:	bf 07       	cpc	r27, r31
    413e:	c8 f3       	brcs	.-14     	; 0x4132 <strrev+0x10>
    4140:	08 95       	ret

00004142 <__fp_mpack>:
    4142:	9f 3f       	cpi	r25, 0xFF	; 255
    4144:	31 f0       	breq	.+12     	; 0x4152 <__fp_mpack_finite+0xc>

00004146 <__fp_mpack_finite>:
    4146:	91 50       	subi	r25, 0x01	; 1
    4148:	20 f4       	brcc	.+8      	; 0x4152 <__fp_mpack_finite+0xc>
    414a:	87 95       	ror	r24
    414c:	77 95       	ror	r23
    414e:	67 95       	ror	r22
    4150:	b7 95       	ror	r27
    4152:	88 0f       	add	r24, r24
    4154:	91 1d       	adc	r25, r1
    4156:	96 95       	lsr	r25
    4158:	87 95       	ror	r24
    415a:	97 f9       	bld	r25, 7
    415c:	08 95       	ret

0000415e <__fp_nan>:
    415e:	9f ef       	ldi	r25, 0xFF	; 255
    4160:	80 ec       	ldi	r24, 0xC0	; 192
    4162:	08 95       	ret

00004164 <__fp_norm2>:
    4164:	91 50       	subi	r25, 0x01	; 1
    4166:	50 40       	sbci	r21, 0x00	; 0
    4168:	66 0f       	add	r22, r22
    416a:	77 1f       	adc	r23, r23
    416c:	88 1f       	adc	r24, r24
    416e:	d2 f7       	brpl	.-12     	; 0x4164 <__fp_norm2>
    4170:	08 95       	ret

00004172 <__fp_split3>:
    4172:	57 fd       	sbrc	r21, 7
    4174:	90 58       	subi	r25, 0x80	; 128
    4176:	44 0f       	add	r20, r20
    4178:	55 1f       	adc	r21, r21
    417a:	59 f0       	breq	.+22     	; 0x4192 <__fp_splitA+0x10>
    417c:	5f 3f       	cpi	r21, 0xFF	; 255
    417e:	71 f0       	breq	.+28     	; 0x419c <__fp_splitA+0x1a>
    4180:	47 95       	ror	r20

00004182 <__fp_splitA>:
    4182:	88 0f       	add	r24, r24
    4184:	97 fb       	bst	r25, 7
    4186:	99 1f       	adc	r25, r25
    4188:	61 f0       	breq	.+24     	; 0x41a2 <__fp_splitA+0x20>
    418a:	9f 3f       	cpi	r25, 0xFF	; 255
    418c:	79 f0       	breq	.+30     	; 0x41ac <__fp_splitA+0x2a>
    418e:	87 95       	ror	r24
    4190:	08 95       	ret
    4192:	12 16       	cp	r1, r18
    4194:	13 06       	cpc	r1, r19
    4196:	14 06       	cpc	r1, r20
    4198:	55 1f       	adc	r21, r21
    419a:	f2 cf       	rjmp	.-28     	; 0x4180 <__fp_split3+0xe>
    419c:	46 95       	lsr	r20
    419e:	f1 df       	rcall	.-30     	; 0x4182 <__fp_splitA>
    41a0:	08 c0       	rjmp	.+16     	; 0x41b2 <__fp_splitA+0x30>
    41a2:	16 16       	cp	r1, r22
    41a4:	17 06       	cpc	r1, r23
    41a6:	18 06       	cpc	r1, r24
    41a8:	99 1f       	adc	r25, r25
    41aa:	f1 cf       	rjmp	.-30     	; 0x418e <__fp_splitA+0xc>
    41ac:	86 95       	lsr	r24
    41ae:	71 05       	cpc	r23, r1
    41b0:	61 05       	cpc	r22, r1
    41b2:	08 94       	sec
    41b4:	08 95       	ret

000041b6 <__udivmodhi4>:
    41b6:	aa 1b       	sub	r26, r26
    41b8:	bb 1b       	sub	r27, r27
    41ba:	51 e1       	ldi	r21, 0x11	; 17
    41bc:	07 c0       	rjmp	.+14     	; 0x41cc <__udivmodhi4_ep>

000041be <__udivmodhi4_loop>:
    41be:	aa 1f       	adc	r26, r26
    41c0:	bb 1f       	adc	r27, r27
    41c2:	a6 17       	cp	r26, r22
    41c4:	b7 07       	cpc	r27, r23
    41c6:	10 f0       	brcs	.+4      	; 0x41cc <__udivmodhi4_ep>
    41c8:	a6 1b       	sub	r26, r22
    41ca:	b7 0b       	sbc	r27, r23

000041cc <__udivmodhi4_ep>:
    41cc:	88 1f       	adc	r24, r24
    41ce:	99 1f       	adc	r25, r25
    41d0:	5a 95       	dec	r21
    41d2:	a9 f7       	brne	.-22     	; 0x41be <__udivmodhi4_loop>
    41d4:	80 95       	com	r24
    41d6:	90 95       	com	r25
    41d8:	bc 01       	movw	r22, r24
    41da:	cd 01       	movw	r24, r26
    41dc:	08 95       	ret

000041de <_exit>:
    41de:	f8 94       	cli

000041e0 <__stop_program>:
    41e0:	ff cf       	rjmp	.-2      	; 0x41e0 <__stop_program>
